
lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d68  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002e74  08002e74  00012e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e98  08002e98  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e98  08002e98  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e98  08002e98  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e98  08002e98  00012e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e9c  08002e9c  00012e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08002ea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000008c  08002f2c  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08002f2c  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b342  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020fb  00000000  00000000  0002b3f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  0002d4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a48  00000000  00000000  0002e080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018008  00000000  00000000  0002eac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d18b  00000000  00000000  00046ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086ff8  00000000  00000000  00053c5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dac53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ebc  00000000  00000000  000daca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e5c 	.word	0x08002e5c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	08002e5c 	.word	0x08002e5c

0800014c <display7SEG>:
 */

#include "display7Seg.h"
#include "global.h"

void display7SEG(int num) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b08      	cmp	r3, #8
 8000158:	f200 8187 	bhi.w	800046a <display7SEG+0x31e>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <display7SEG+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	08000189 	.word	0x08000189
 8000168:	080001db 	.word	0x080001db
 800016c:	0800022d 	.word	0x0800022d
 8000170:	0800027f 	.word	0x0800027f
 8000174:	080002d1 	.word	0x080002d1
 8000178:	08000323 	.word	0x08000323
 800017c:	08000375 	.word	0x08000375
 8000180:	080003c7 	.word	0x080003c7
 8000184:	08000419 	.word	0x08000419
	switch (num) {
			case 0:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000188:	2200      	movs	r2, #0
 800018a:	2140      	movs	r1, #64	; 0x40
 800018c:	48cd      	ldr	r0, [pc, #820]	; (80004c4 <display7SEG+0x378>)
 800018e:	f001 fd4e 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000192:	2200      	movs	r2, #0
 8000194:	2180      	movs	r1, #128	; 0x80
 8000196:	48cb      	ldr	r0, [pc, #812]	; (80004c4 <display7SEG+0x378>)
 8000198:	f001 fd49 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 800019c:	2200      	movs	r2, #0
 800019e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001a2:	48c8      	ldr	r0, [pc, #800]	; (80004c4 <display7SEG+0x378>)
 80001a4:	f001 fd43 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 80001a8:	2200      	movs	r2, #0
 80001aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001ae:	48c5      	ldr	r0, [pc, #788]	; (80004c4 <display7SEG+0x378>)
 80001b0:	f001 fd3d 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 80001b4:	2200      	movs	r2, #0
 80001b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001ba:	48c2      	ldr	r0, [pc, #776]	; (80004c4 <display7SEG+0x378>)
 80001bc:	f001 fd37 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001c6:	48bf      	ldr	r0, [pc, #764]	; (80004c4 <display7SEG+0x378>)
 80001c8:	f001 fd31 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 80001cc:	2201      	movs	r2, #1
 80001ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001d2:	48bc      	ldr	r0, [pc, #752]	; (80004c4 <display7SEG+0x378>)
 80001d4:	f001 fd2b 	bl	8001c2e <HAL_GPIO_WritePin>
				break;
 80001d8:	e170      	b.n	80004bc <display7SEG+0x370>
			case 1:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 80001da:	2201      	movs	r2, #1
 80001dc:	2140      	movs	r1, #64	; 0x40
 80001de:	48b9      	ldr	r0, [pc, #740]	; (80004c4 <display7SEG+0x378>)
 80001e0:	f001 fd25 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80001e4:	2200      	movs	r2, #0
 80001e6:	2180      	movs	r1, #128	; 0x80
 80001e8:	48b6      	ldr	r0, [pc, #728]	; (80004c4 <display7SEG+0x378>)
 80001ea:	f001 fd20 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80001ee:	2200      	movs	r2, #0
 80001f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001f4:	48b3      	ldr	r0, [pc, #716]	; (80004c4 <display7SEG+0x378>)
 80001f6:	f001 fd1a 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 80001fa:	2201      	movs	r2, #1
 80001fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000200:	48b0      	ldr	r0, [pc, #704]	; (80004c4 <display7SEG+0x378>)
 8000202:	f001 fd14 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000206:	2201      	movs	r2, #1
 8000208:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800020c:	48ad      	ldr	r0, [pc, #692]	; (80004c4 <display7SEG+0x378>)
 800020e:	f001 fd0e 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000212:	2201      	movs	r2, #1
 8000214:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000218:	48aa      	ldr	r0, [pc, #680]	; (80004c4 <display7SEG+0x378>)
 800021a:	f001 fd08 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 800021e:	2201      	movs	r2, #1
 8000220:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000224:	48a7      	ldr	r0, [pc, #668]	; (80004c4 <display7SEG+0x378>)
 8000226:	f001 fd02 	bl	8001c2e <HAL_GPIO_WritePin>
				break;
 800022a:	e147      	b.n	80004bc <display7SEG+0x370>
			case 2:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 800022c:	2200      	movs	r2, #0
 800022e:	2140      	movs	r1, #64	; 0x40
 8000230:	48a4      	ldr	r0, [pc, #656]	; (80004c4 <display7SEG+0x378>)
 8000232:	f001 fcfc 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000236:	2200      	movs	r2, #0
 8000238:	2180      	movs	r1, #128	; 0x80
 800023a:	48a2      	ldr	r0, [pc, #648]	; (80004c4 <display7SEG+0x378>)
 800023c:	f001 fcf7 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET);
 8000240:	2201      	movs	r2, #1
 8000242:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000246:	489f      	ldr	r0, [pc, #636]	; (80004c4 <display7SEG+0x378>)
 8000248:	f001 fcf1 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 800024c:	2200      	movs	r2, #0
 800024e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000252:	489c      	ldr	r0, [pc, #624]	; (80004c4 <display7SEG+0x378>)
 8000254:	f001 fceb 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000258:	2200      	movs	r2, #0
 800025a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800025e:	4899      	ldr	r0, [pc, #612]	; (80004c4 <display7SEG+0x378>)
 8000260:	f001 fce5 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000264:	2201      	movs	r2, #1
 8000266:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800026a:	4896      	ldr	r0, [pc, #600]	; (80004c4 <display7SEG+0x378>)
 800026c:	f001 fcdf 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000270:	2200      	movs	r2, #0
 8000272:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000276:	4893      	ldr	r0, [pc, #588]	; (80004c4 <display7SEG+0x378>)
 8000278:	f001 fcd9 	bl	8001c2e <HAL_GPIO_WritePin>
				break;
 800027c:	e11e      	b.n	80004bc <display7SEG+0x370>
			case 3:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 800027e:	2200      	movs	r2, #0
 8000280:	2140      	movs	r1, #64	; 0x40
 8000282:	4890      	ldr	r0, [pc, #576]	; (80004c4 <display7SEG+0x378>)
 8000284:	f001 fcd3 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000288:	2200      	movs	r2, #0
 800028a:	2180      	movs	r1, #128	; 0x80
 800028c:	488d      	ldr	r0, [pc, #564]	; (80004c4 <display7SEG+0x378>)
 800028e:	f001 fcce 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000292:	2200      	movs	r2, #0
 8000294:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000298:	488a      	ldr	r0, [pc, #552]	; (80004c4 <display7SEG+0x378>)
 800029a:	f001 fcc8 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 800029e:	2200      	movs	r2, #0
 80002a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002a4:	4887      	ldr	r0, [pc, #540]	; (80004c4 <display7SEG+0x378>)
 80002a6:	f001 fcc2 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80002aa:	2201      	movs	r2, #1
 80002ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002b0:	4884      	ldr	r0, [pc, #528]	; (80004c4 <display7SEG+0x378>)
 80002b2:	f001 fcbc 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 80002b6:	2201      	movs	r2, #1
 80002b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002bc:	4881      	ldr	r0, [pc, #516]	; (80004c4 <display7SEG+0x378>)
 80002be:	f001 fcb6 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 80002c2:	2200      	movs	r2, #0
 80002c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002c8:	487e      	ldr	r0, [pc, #504]	; (80004c4 <display7SEG+0x378>)
 80002ca:	f001 fcb0 	bl	8001c2e <HAL_GPIO_WritePin>
				break;
 80002ce:	e0f5      	b.n	80004bc <display7SEG+0x370>
			case 4:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 80002d0:	2201      	movs	r2, #1
 80002d2:	2140      	movs	r1, #64	; 0x40
 80002d4:	487b      	ldr	r0, [pc, #492]	; (80004c4 <display7SEG+0x378>)
 80002d6:	f001 fcaa 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80002da:	2200      	movs	r2, #0
 80002dc:	2180      	movs	r1, #128	; 0x80
 80002de:	4879      	ldr	r0, [pc, #484]	; (80004c4 <display7SEG+0x378>)
 80002e0:	f001 fca5 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80002e4:	2200      	movs	r2, #0
 80002e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ea:	4876      	ldr	r0, [pc, #472]	; (80004c4 <display7SEG+0x378>)
 80002ec:	f001 fc9f 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 80002f0:	2201      	movs	r2, #1
 80002f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002f6:	4873      	ldr	r0, [pc, #460]	; (80004c4 <display7SEG+0x378>)
 80002f8:	f001 fc99 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80002fc:	2201      	movs	r2, #1
 80002fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000302:	4870      	ldr	r0, [pc, #448]	; (80004c4 <display7SEG+0x378>)
 8000304:	f001 fc93 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800030e:	486d      	ldr	r0, [pc, #436]	; (80004c4 <display7SEG+0x378>)
 8000310:	f001 fc8d 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000314:	2200      	movs	r2, #0
 8000316:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800031a:	486a      	ldr	r0, [pc, #424]	; (80004c4 <display7SEG+0x378>)
 800031c:	f001 fc87 	bl	8001c2e <HAL_GPIO_WritePin>
				break;
 8000320:	e0cc      	b.n	80004bc <display7SEG+0x370>
			case 5:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000322:	2200      	movs	r2, #0
 8000324:	2140      	movs	r1, #64	; 0x40
 8000326:	4867      	ldr	r0, [pc, #412]	; (80004c4 <display7SEG+0x378>)
 8000328:	f001 fc81 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 800032c:	2201      	movs	r2, #1
 800032e:	2180      	movs	r1, #128	; 0x80
 8000330:	4864      	ldr	r0, [pc, #400]	; (80004c4 <display7SEG+0x378>)
 8000332:	f001 fc7c 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000336:	2200      	movs	r2, #0
 8000338:	f44f 7180 	mov.w	r1, #256	; 0x100
 800033c:	4861      	ldr	r0, [pc, #388]	; (80004c4 <display7SEG+0x378>)
 800033e:	f001 fc76 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000342:	2200      	movs	r2, #0
 8000344:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000348:	485e      	ldr	r0, [pc, #376]	; (80004c4 <display7SEG+0x378>)
 800034a:	f001 fc70 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 800034e:	2201      	movs	r2, #1
 8000350:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000354:	485b      	ldr	r0, [pc, #364]	; (80004c4 <display7SEG+0x378>)
 8000356:	f001 fc6a 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000360:	4858      	ldr	r0, [pc, #352]	; (80004c4 <display7SEG+0x378>)
 8000362:	f001 fc64 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000366:	2200      	movs	r2, #0
 8000368:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800036c:	4855      	ldr	r0, [pc, #340]	; (80004c4 <display7SEG+0x378>)
 800036e:	f001 fc5e 	bl	8001c2e <HAL_GPIO_WritePin>
				break;
 8000372:	e0a3      	b.n	80004bc <display7SEG+0x370>
			case 6:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000374:	2200      	movs	r2, #0
 8000376:	2140      	movs	r1, #64	; 0x40
 8000378:	4852      	ldr	r0, [pc, #328]	; (80004c4 <display7SEG+0x378>)
 800037a:	f001 fc58 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 800037e:	2201      	movs	r2, #1
 8000380:	2180      	movs	r1, #128	; 0x80
 8000382:	4850      	ldr	r0, [pc, #320]	; (80004c4 <display7SEG+0x378>)
 8000384:	f001 fc53 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000388:	2200      	movs	r2, #0
 800038a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800038e:	484d      	ldr	r0, [pc, #308]	; (80004c4 <display7SEG+0x378>)
 8000390:	f001 fc4d 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000394:	2200      	movs	r2, #0
 8000396:	f44f 7100 	mov.w	r1, #512	; 0x200
 800039a:	484a      	ldr	r0, [pc, #296]	; (80004c4 <display7SEG+0x378>)
 800039c:	f001 fc47 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 80003a0:	2200      	movs	r2, #0
 80003a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003a6:	4847      	ldr	r0, [pc, #284]	; (80004c4 <display7SEG+0x378>)
 80003a8:	f001 fc41 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 80003ac:	2200      	movs	r2, #0
 80003ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003b2:	4844      	ldr	r0, [pc, #272]	; (80004c4 <display7SEG+0x378>)
 80003b4:	f001 fc3b 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 80003b8:	2200      	movs	r2, #0
 80003ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003be:	4841      	ldr	r0, [pc, #260]	; (80004c4 <display7SEG+0x378>)
 80003c0:	f001 fc35 	bl	8001c2e <HAL_GPIO_WritePin>
				break;
 80003c4:	e07a      	b.n	80004bc <display7SEG+0x370>
			case 7:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80003c6:	2200      	movs	r2, #0
 80003c8:	2140      	movs	r1, #64	; 0x40
 80003ca:	483e      	ldr	r0, [pc, #248]	; (80004c4 <display7SEG+0x378>)
 80003cc:	f001 fc2f 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80003d0:	2200      	movs	r2, #0
 80003d2:	2180      	movs	r1, #128	; 0x80
 80003d4:	483b      	ldr	r0, [pc, #236]	; (80004c4 <display7SEG+0x378>)
 80003d6:	f001 fc2a 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80003da:	2200      	movs	r2, #0
 80003dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003e0:	4838      	ldr	r0, [pc, #224]	; (80004c4 <display7SEG+0x378>)
 80003e2:	f001 fc24 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 80003e6:	2201      	movs	r2, #1
 80003e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003ec:	4835      	ldr	r0, [pc, #212]	; (80004c4 <display7SEG+0x378>)
 80003ee:	f001 fc1e 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80003f2:	2201      	movs	r2, #1
 80003f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003f8:	4832      	ldr	r0, [pc, #200]	; (80004c4 <display7SEG+0x378>)
 80003fa:	f001 fc18 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 80003fe:	2201      	movs	r2, #1
 8000400:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000404:	482f      	ldr	r0, [pc, #188]	; (80004c4 <display7SEG+0x378>)
 8000406:	f001 fc12 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 800040a:	2201      	movs	r2, #1
 800040c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000410:	482c      	ldr	r0, [pc, #176]	; (80004c4 <display7SEG+0x378>)
 8000412:	f001 fc0c 	bl	8001c2e <HAL_GPIO_WritePin>
				break;
 8000416:	e051      	b.n	80004bc <display7SEG+0x370>
			case 8:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000418:	2200      	movs	r2, #0
 800041a:	2140      	movs	r1, #64	; 0x40
 800041c:	4829      	ldr	r0, [pc, #164]	; (80004c4 <display7SEG+0x378>)
 800041e:	f001 fc06 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000422:	2200      	movs	r2, #0
 8000424:	2180      	movs	r1, #128	; 0x80
 8000426:	4827      	ldr	r0, [pc, #156]	; (80004c4 <display7SEG+0x378>)
 8000428:	f001 fc01 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 800042c:	2200      	movs	r2, #0
 800042e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000432:	4824      	ldr	r0, [pc, #144]	; (80004c4 <display7SEG+0x378>)
 8000434:	f001 fbfb 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000438:	2200      	movs	r2, #0
 800043a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800043e:	4821      	ldr	r0, [pc, #132]	; (80004c4 <display7SEG+0x378>)
 8000440:	f001 fbf5 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000444:	2200      	movs	r2, #0
 8000446:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800044a:	481e      	ldr	r0, [pc, #120]	; (80004c4 <display7SEG+0x378>)
 800044c:	f001 fbef 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000450:	2200      	movs	r2, #0
 8000452:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000456:	481b      	ldr	r0, [pc, #108]	; (80004c4 <display7SEG+0x378>)
 8000458:	f001 fbe9 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 800045c:	2200      	movs	r2, #0
 800045e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000462:	4818      	ldr	r0, [pc, #96]	; (80004c4 <display7SEG+0x378>)
 8000464:	f001 fbe3 	bl	8001c2e <HAL_GPIO_WritePin>
				break;
 8000468:	e028      	b.n	80004bc <display7SEG+0x370>
			default:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 800046a:	2200      	movs	r2, #0
 800046c:	2140      	movs	r1, #64	; 0x40
 800046e:	4815      	ldr	r0, [pc, #84]	; (80004c4 <display7SEG+0x378>)
 8000470:	f001 fbdd 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000474:	2200      	movs	r2, #0
 8000476:	2180      	movs	r1, #128	; 0x80
 8000478:	4812      	ldr	r0, [pc, #72]	; (80004c4 <display7SEG+0x378>)
 800047a:	f001 fbd8 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 800047e:	2200      	movs	r2, #0
 8000480:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000484:	480f      	ldr	r0, [pc, #60]	; (80004c4 <display7SEG+0x378>)
 8000486:	f001 fbd2 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 800048a:	2200      	movs	r2, #0
 800048c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000490:	480c      	ldr	r0, [pc, #48]	; (80004c4 <display7SEG+0x378>)
 8000492:	f001 fbcc 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000496:	2201      	movs	r2, #1
 8000498:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800049c:	4809      	ldr	r0, [pc, #36]	; (80004c4 <display7SEG+0x378>)
 800049e:	f001 fbc6 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 80004a2:	2200      	movs	r2, #0
 80004a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004a8:	4806      	ldr	r0, [pc, #24]	; (80004c4 <display7SEG+0x378>)
 80004aa:	f001 fbc0 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 80004ae:	2200      	movs	r2, #0
 80004b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004b4:	4803      	ldr	r0, [pc, #12]	; (80004c4 <display7SEG+0x378>)
 80004b6:	f001 fbba 	bl	8001c2e <HAL_GPIO_WritePin>
				break;
 80004ba:	bf00      	nop
		}
}
 80004bc:	bf00      	nop
 80004be:	3708      	adds	r7, #8
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	40010800 	.word	0x40010800

080004c8 <updateBuffer>:

void updateBuffer() {
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
	led_buffer[0]= time1 /10;
 80004cc:	4b1a      	ldr	r3, [pc, #104]	; (8000538 <updateBuffer+0x70>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a1a      	ldr	r2, [pc, #104]	; (800053c <updateBuffer+0x74>)
 80004d2:	fb82 1203 	smull	r1, r2, r2, r3
 80004d6:	1092      	asrs	r2, r2, #2
 80004d8:	17db      	asrs	r3, r3, #31
 80004da:	1ad3      	subs	r3, r2, r3
 80004dc:	4a18      	ldr	r2, [pc, #96]	; (8000540 <updateBuffer+0x78>)
 80004de:	6013      	str	r3, [r2, #0]
	led_buffer[1]= time1 %10;
 80004e0:	4b15      	ldr	r3, [pc, #84]	; (8000538 <updateBuffer+0x70>)
 80004e2:	6819      	ldr	r1, [r3, #0]
 80004e4:	4b15      	ldr	r3, [pc, #84]	; (800053c <updateBuffer+0x74>)
 80004e6:	fb83 2301 	smull	r2, r3, r3, r1
 80004ea:	109a      	asrs	r2, r3, #2
 80004ec:	17cb      	asrs	r3, r1, #31
 80004ee:	1ad2      	subs	r2, r2, r3
 80004f0:	4613      	mov	r3, r2
 80004f2:	009b      	lsls	r3, r3, #2
 80004f4:	4413      	add	r3, r2
 80004f6:	005b      	lsls	r3, r3, #1
 80004f8:	1aca      	subs	r2, r1, r3
 80004fa:	4b11      	ldr	r3, [pc, #68]	; (8000540 <updateBuffer+0x78>)
 80004fc:	605a      	str	r2, [r3, #4]
	led_buffer[2]= time2 /10;
 80004fe:	4b11      	ldr	r3, [pc, #68]	; (8000544 <updateBuffer+0x7c>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a0e      	ldr	r2, [pc, #56]	; (800053c <updateBuffer+0x74>)
 8000504:	fb82 1203 	smull	r1, r2, r2, r3
 8000508:	1092      	asrs	r2, r2, #2
 800050a:	17db      	asrs	r3, r3, #31
 800050c:	1ad3      	subs	r3, r2, r3
 800050e:	4a0c      	ldr	r2, [pc, #48]	; (8000540 <updateBuffer+0x78>)
 8000510:	6093      	str	r3, [r2, #8]
	led_buffer[3]= time2 %10;
 8000512:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <updateBuffer+0x7c>)
 8000514:	6819      	ldr	r1, [r3, #0]
 8000516:	4b09      	ldr	r3, [pc, #36]	; (800053c <updateBuffer+0x74>)
 8000518:	fb83 2301 	smull	r2, r3, r3, r1
 800051c:	109a      	asrs	r2, r3, #2
 800051e:	17cb      	asrs	r3, r1, #31
 8000520:	1ad2      	subs	r2, r2, r3
 8000522:	4613      	mov	r3, r2
 8000524:	009b      	lsls	r3, r3, #2
 8000526:	4413      	add	r3, r2
 8000528:	005b      	lsls	r3, r3, #1
 800052a:	1aca      	subs	r2, r1, r3
 800052c:	4b04      	ldr	r3, [pc, #16]	; (8000540 <updateBuffer+0x78>)
 800052e:	60da      	str	r2, [r3, #12]
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr
 8000538:	200000bc 	.word	0x200000bc
 800053c:	66666667 	.word	0x66666667
 8000540:	200000ac 	.word	0x200000ac
 8000544:	200000c0 	.word	0x200000c0

08000548 <update7SEG>:
void update7SEG(int index){
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	2b03      	cmp	r3, #3
 8000554:	d87a      	bhi.n	800064c <update7SEG+0x104>
 8000556:	a201      	add	r2, pc, #4	; (adr r2, 800055c <update7SEG+0x14>)
 8000558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800055c:	0800056d 	.word	0x0800056d
 8000560:	080005a5 	.word	0x080005a5
 8000564:	080005dd 	.word	0x080005dd
 8000568:	08000615 	.word	0x08000615
    switch (index){
        case 0:
            //Display the first 7SEG with led_buffer[0]
        	 HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,RESET);
 800056c:	2200      	movs	r2, #0
 800056e:	2108      	movs	r1, #8
 8000570:	4839      	ldr	r0, [pc, #228]	; (8000658 <update7SEG+0x110>)
 8000572:	f001 fb5c 	bl	8001c2e <HAL_GPIO_WritePin>
        	 HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,SET);
 8000576:	2201      	movs	r2, #1
 8000578:	2110      	movs	r1, #16
 800057a:	4837      	ldr	r0, [pc, #220]	; (8000658 <update7SEG+0x110>)
 800057c:	f001 fb57 	bl	8001c2e <HAL_GPIO_WritePin>
        	 HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,SET);
 8000580:	2201      	movs	r2, #1
 8000582:	2120      	movs	r1, #32
 8000584:	4834      	ldr	r0, [pc, #208]	; (8000658 <update7SEG+0x110>)
 8000586:	f001 fb52 	bl	8001c2e <HAL_GPIO_WritePin>
        	 HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,SET);
 800058a:	2201      	movs	r2, #1
 800058c:	2140      	movs	r1, #64	; 0x40
 800058e:	4832      	ldr	r0, [pc, #200]	; (8000658 <update7SEG+0x110>)
 8000590:	f001 fb4d 	bl	8001c2e <HAL_GPIO_WritePin>
        	 display7SEG(led_buffer[index]);
 8000594:	4a31      	ldr	r2, [pc, #196]	; (800065c <update7SEG+0x114>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800059c:	4618      	mov	r0, r3
 800059e:	f7ff fdd5 	bl	800014c <display7SEG>
            break;
 80005a2:	e054      	b.n	800064e <update7SEG+0x106>
        case 1:
            //Display the second 7SEG with led_buffer[1]
        	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,SET);
 80005a4:	2201      	movs	r2, #1
 80005a6:	2108      	movs	r1, #8
 80005a8:	482b      	ldr	r0, [pc, #172]	; (8000658 <update7SEG+0x110>)
 80005aa:	f001 fb40 	bl	8001c2e <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,RESET);
 80005ae:	2200      	movs	r2, #0
 80005b0:	2110      	movs	r1, #16
 80005b2:	4829      	ldr	r0, [pc, #164]	; (8000658 <update7SEG+0x110>)
 80005b4:	f001 fb3b 	bl	8001c2e <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,SET);
 80005b8:	2201      	movs	r2, #1
 80005ba:	2120      	movs	r1, #32
 80005bc:	4826      	ldr	r0, [pc, #152]	; (8000658 <update7SEG+0x110>)
 80005be:	f001 fb36 	bl	8001c2e <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,SET);
 80005c2:	2201      	movs	r2, #1
 80005c4:	2140      	movs	r1, #64	; 0x40
 80005c6:	4824      	ldr	r0, [pc, #144]	; (8000658 <update7SEG+0x110>)
 80005c8:	f001 fb31 	bl	8001c2e <HAL_GPIO_WritePin>
        	display7SEG(led_buffer[index]);
 80005cc:	4a23      	ldr	r2, [pc, #140]	; (800065c <update7SEG+0x114>)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff fdb9 	bl	800014c <display7SEG>
            break;
 80005da:	e038      	b.n	800064e <update7SEG+0x106>
        case 2:
            //Display the third 7SEG with led_buffer[2]
        	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	2108      	movs	r1, #8
 80005e0:	481d      	ldr	r0, [pc, #116]	; (8000658 <update7SEG+0x110>)
 80005e2:	f001 fb24 	bl	8001c2e <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,SET);
 80005e6:	2201      	movs	r2, #1
 80005e8:	2110      	movs	r1, #16
 80005ea:	481b      	ldr	r0, [pc, #108]	; (8000658 <update7SEG+0x110>)
 80005ec:	f001 fb1f 	bl	8001c2e <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2120      	movs	r1, #32
 80005f4:	4818      	ldr	r0, [pc, #96]	; (8000658 <update7SEG+0x110>)
 80005f6:	f001 fb1a 	bl	8001c2e <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,SET);
 80005fa:	2201      	movs	r2, #1
 80005fc:	2140      	movs	r1, #64	; 0x40
 80005fe:	4816      	ldr	r0, [pc, #88]	; (8000658 <update7SEG+0x110>)
 8000600:	f001 fb15 	bl	8001c2e <HAL_GPIO_WritePin>
        	display7SEG(led_buffer[index]);
 8000604:	4a15      	ldr	r2, [pc, #84]	; (800065c <update7SEG+0x114>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff fd9d 	bl	800014c <display7SEG>
            break;
 8000612:	e01c      	b.n	800064e <update7SEG+0x106>
        case 3:
            //Display the forth 7SEG with led_buffer[3]
        	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,SET);
 8000614:	2201      	movs	r2, #1
 8000616:	2108      	movs	r1, #8
 8000618:	480f      	ldr	r0, [pc, #60]	; (8000658 <update7SEG+0x110>)
 800061a:	f001 fb08 	bl	8001c2e <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,SET);
 800061e:	2201      	movs	r2, #1
 8000620:	2110      	movs	r1, #16
 8000622:	480d      	ldr	r0, [pc, #52]	; (8000658 <update7SEG+0x110>)
 8000624:	f001 fb03 	bl	8001c2e <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,SET);
 8000628:	2201      	movs	r2, #1
 800062a:	2120      	movs	r1, #32
 800062c:	480a      	ldr	r0, [pc, #40]	; (8000658 <update7SEG+0x110>)
 800062e:	f001 fafe 	bl	8001c2e <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	2140      	movs	r1, #64	; 0x40
 8000636:	4808      	ldr	r0, [pc, #32]	; (8000658 <update7SEG+0x110>)
 8000638:	f001 faf9 	bl	8001c2e <HAL_GPIO_WritePin>
        	display7SEG(led_buffer[index]);
 800063c:	4a07      	ldr	r2, [pc, #28]	; (800065c <update7SEG+0x114>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff fd81 	bl	800014c <display7SEG>
            break;
 800064a:	e000      	b.n	800064e <update7SEG+0x106>
        default:
            break;
 800064c:	bf00      	nop
    }
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40010c00 	.word	0x40010c00
 800065c:	200000ac 	.word	0x200000ac

08000660 <clearAllLed>:
 *      Author: OS
 */
#include "main.h"
#include "displayLed.h"

void clearAllLed() {
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Red1_GPIO_Port, LED_Red1_Pin, SET);
 8000664:	2201      	movs	r2, #1
 8000666:	2101      	movs	r1, #1
 8000668:	480e      	ldr	r0, [pc, #56]	; (80006a4 <clearAllLed+0x44>)
 800066a:	f001 fae0 	bl	8001c2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Yellow1_GPIO_Port, LED_Yellow1_Pin, SET);
 800066e:	2201      	movs	r2, #1
 8000670:	2102      	movs	r1, #2
 8000672:	480c      	ldr	r0, [pc, #48]	; (80006a4 <clearAllLed+0x44>)
 8000674:	f001 fadb 	bl	8001c2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Green1_GPIO_Port, LED_Green1_Pin, SET);
 8000678:	2201      	movs	r2, #1
 800067a:	2104      	movs	r1, #4
 800067c:	4809      	ldr	r0, [pc, #36]	; (80006a4 <clearAllLed+0x44>)
 800067e:	f001 fad6 	bl	8001c2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Red2_GPIO_Port, LED_Red2_Pin, SET);
 8000682:	2201      	movs	r2, #1
 8000684:	2108      	movs	r1, #8
 8000686:	4807      	ldr	r0, [pc, #28]	; (80006a4 <clearAllLed+0x44>)
 8000688:	f001 fad1 	bl	8001c2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Yellow2_GPIO_Port, LED_Yellow2_Pin, SET);
 800068c:	2201      	movs	r2, #1
 800068e:	2110      	movs	r1, #16
 8000690:	4804      	ldr	r0, [pc, #16]	; (80006a4 <clearAllLed+0x44>)
 8000692:	f001 facc 	bl	8001c2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Green2_GPIO_Port, LED_Green2_Pin, SET);
 8000696:	2201      	movs	r2, #1
 8000698:	2120      	movs	r1, #32
 800069a:	4802      	ldr	r0, [pc, #8]	; (80006a4 <clearAllLed+0x44>)
 800069c:	f001 fac7 	bl	8001c2e <HAL_GPIO_WritePin>
}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40010800 	.word	0x40010800

080006a8 <displayRed1>:

void displayRed1() {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Red1_GPIO_Port, LED_Red1_Pin, RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2101      	movs	r1, #1
 80006b0:	4807      	ldr	r0, [pc, #28]	; (80006d0 <displayRed1+0x28>)
 80006b2:	f001 fabc 	bl	8001c2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Yellow1_GPIO_Port, LED_Yellow1_Pin, SET);
 80006b6:	2201      	movs	r2, #1
 80006b8:	2102      	movs	r1, #2
 80006ba:	4805      	ldr	r0, [pc, #20]	; (80006d0 <displayRed1+0x28>)
 80006bc:	f001 fab7 	bl	8001c2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Green1_GPIO_Port, LED_Green1_Pin, SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	2104      	movs	r1, #4
 80006c4:	4802      	ldr	r0, [pc, #8]	; (80006d0 <displayRed1+0x28>)
 80006c6:	f001 fab2 	bl	8001c2e <HAL_GPIO_WritePin>
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40010800 	.word	0x40010800

080006d4 <displayYellow1>:

void displayYellow1() {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Red1_GPIO_Port, LED_Red1_Pin, SET);
 80006d8:	2201      	movs	r2, #1
 80006da:	2101      	movs	r1, #1
 80006dc:	4807      	ldr	r0, [pc, #28]	; (80006fc <displayYellow1+0x28>)
 80006de:	f001 faa6 	bl	8001c2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Yellow1_GPIO_Port, LED_Yellow1_Pin, RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2102      	movs	r1, #2
 80006e6:	4805      	ldr	r0, [pc, #20]	; (80006fc <displayYellow1+0x28>)
 80006e8:	f001 faa1 	bl	8001c2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Green1_GPIO_Port, LED_Green1_Pin, SET);
 80006ec:	2201      	movs	r2, #1
 80006ee:	2104      	movs	r1, #4
 80006f0:	4802      	ldr	r0, [pc, #8]	; (80006fc <displayYellow1+0x28>)
 80006f2:	f001 fa9c 	bl	8001c2e <HAL_GPIO_WritePin>
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40010800 	.word	0x40010800

08000700 <displayGreen1>:

void displayGreen1() {
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Red1_GPIO_Port, LED_Red1_Pin, SET);
 8000704:	2201      	movs	r2, #1
 8000706:	2101      	movs	r1, #1
 8000708:	4807      	ldr	r0, [pc, #28]	; (8000728 <displayGreen1+0x28>)
 800070a:	f001 fa90 	bl	8001c2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Yellow1_GPIO_Port, LED_Yellow1_Pin, SET);
 800070e:	2201      	movs	r2, #1
 8000710:	2102      	movs	r1, #2
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <displayGreen1+0x28>)
 8000714:	f001 fa8b 	bl	8001c2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Green1_GPIO_Port, LED_Green1_Pin, RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	2104      	movs	r1, #4
 800071c:	4802      	ldr	r0, [pc, #8]	; (8000728 <displayGreen1+0x28>)
 800071e:	f001 fa86 	bl	8001c2e <HAL_GPIO_WritePin>
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40010800 	.word	0x40010800

0800072c <displayRed2>:

void displayRed2() {
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Red2_GPIO_Port, LED_Red2_Pin, RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	2108      	movs	r1, #8
 8000734:	4807      	ldr	r0, [pc, #28]	; (8000754 <displayRed2+0x28>)
 8000736:	f001 fa7a 	bl	8001c2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Yellow2_GPIO_Port, LED_Yellow2_Pin, SET);
 800073a:	2201      	movs	r2, #1
 800073c:	2110      	movs	r1, #16
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <displayRed2+0x28>)
 8000740:	f001 fa75 	bl	8001c2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Green2_GPIO_Port, LED_Green2_Pin, SET);
 8000744:	2201      	movs	r2, #1
 8000746:	2120      	movs	r1, #32
 8000748:	4802      	ldr	r0, [pc, #8]	; (8000754 <displayRed2+0x28>)
 800074a:	f001 fa70 	bl	8001c2e <HAL_GPIO_WritePin>
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40010800 	.word	0x40010800

08000758 <displayYellow2>:


void displayYellow2() {
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Red2_GPIO_Port, LED_Red2_Pin, SET);
 800075c:	2201      	movs	r2, #1
 800075e:	2108      	movs	r1, #8
 8000760:	4807      	ldr	r0, [pc, #28]	; (8000780 <displayYellow2+0x28>)
 8000762:	f001 fa64 	bl	8001c2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Yellow2_GPIO_Port, LED_Yellow2_Pin, RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	2110      	movs	r1, #16
 800076a:	4805      	ldr	r0, [pc, #20]	; (8000780 <displayYellow2+0x28>)
 800076c:	f001 fa5f 	bl	8001c2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Green2_GPIO_Port, LED_Green2_Pin, SET);
 8000770:	2201      	movs	r2, #1
 8000772:	2120      	movs	r1, #32
 8000774:	4802      	ldr	r0, [pc, #8]	; (8000780 <displayYellow2+0x28>)
 8000776:	f001 fa5a 	bl	8001c2e <HAL_GPIO_WritePin>
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40010800 	.word	0x40010800

08000784 <displayGreen2>:

void displayGreen2() {
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Red2_GPIO_Port, LED_Red2_Pin, SET);
 8000788:	2201      	movs	r2, #1
 800078a:	2108      	movs	r1, #8
 800078c:	4807      	ldr	r0, [pc, #28]	; (80007ac <displayGreen2+0x28>)
 800078e:	f001 fa4e 	bl	8001c2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Yellow2_GPIO_Port, LED_Yellow2_Pin, SET);
 8000792:	2201      	movs	r2, #1
 8000794:	2110      	movs	r1, #16
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <displayGreen2+0x28>)
 8000798:	f001 fa49 	bl	8001c2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Green2_GPIO_Port, LED_Green2_Pin, RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	2120      	movs	r1, #32
 80007a0:	4802      	ldr	r0, [pc, #8]	; (80007ac <displayGreen2+0x28>)
 80007a2:	f001 fa44 	bl	8001c2e <HAL_GPIO_WritePin>
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40010800 	.word	0x40010800

080007b0 <toggleRed>:

void toggleRed() {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_Red1_GPIO_Port, LED_Red1_Pin);
 80007b4:	2101      	movs	r1, #1
 80007b6:	4804      	ldr	r0, [pc, #16]	; (80007c8 <toggleRed+0x18>)
 80007b8:	f001 fa51 	bl	8001c5e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_Red2_GPIO_Port, LED_Red2_Pin);
 80007bc:	2108      	movs	r1, #8
 80007be:	4802      	ldr	r0, [pc, #8]	; (80007c8 <toggleRed+0x18>)
 80007c0:	f001 fa4d 	bl	8001c5e <HAL_GPIO_TogglePin>
}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40010800 	.word	0x40010800

080007cc <toggleYellow>:

void toggleYellow() {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_Yellow1_GPIO_Port, LED_Yellow1_Pin);
 80007d0:	2102      	movs	r1, #2
 80007d2:	4804      	ldr	r0, [pc, #16]	; (80007e4 <toggleYellow+0x18>)
 80007d4:	f001 fa43 	bl	8001c5e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_Yellow2_GPIO_Port, LED_Yellow2_Pin);
 80007d8:	2110      	movs	r1, #16
 80007da:	4802      	ldr	r0, [pc, #8]	; (80007e4 <toggleYellow+0x18>)
 80007dc:	f001 fa3f 	bl	8001c5e <HAL_GPIO_TogglePin>
}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40010800 	.word	0x40010800

080007e8 <toggleGreen>:

void toggleGreen() {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_Green1_GPIO_Port, LED_Green1_Pin);
 80007ec:	2104      	movs	r1, #4
 80007ee:	4804      	ldr	r0, [pc, #16]	; (8000800 <toggleGreen+0x18>)
 80007f0:	f001 fa35 	bl	8001c5e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_Green2_GPIO_Port, LED_Green2_Pin);
 80007f4:	2120      	movs	r1, #32
 80007f6:	4802      	ldr	r0, [pc, #8]	; (8000800 <toggleGreen+0x18>)
 80007f8:	f001 fa31 	bl	8001c5e <HAL_GPIO_TogglePin>
}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40010800 	.word	0x40010800

08000804 <increase>:
 *      Author: OS
 */

#include "global.h"

void increase() {
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
	time1++;
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <increase+0x24>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	3301      	adds	r3, #1
 800080e:	4a06      	ldr	r2, [pc, #24]	; (8000828 <increase+0x24>)
 8000810:	6013      	str	r3, [r2, #0]
	if(time1>99) time1=1;
 8000812:	4b05      	ldr	r3, [pc, #20]	; (8000828 <increase+0x24>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2b63      	cmp	r3, #99	; 0x63
 8000818:	dd02      	ble.n	8000820 <increase+0x1c>
 800081a:	4b03      	ldr	r3, [pc, #12]	; (8000828 <increase+0x24>)
 800081c:	2201      	movs	r2, #1
 800081e:	601a      	str	r2, [r3, #0]
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	200000bc 	.word	0x200000bc

0800082c <normalState>:

void normalState(void) {
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
	switch(status) {
 8000830:	4ba9      	ldr	r3, [pc, #676]	; (8000ad8 <normalState+0x2ac>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b0c      	cmp	r3, #12
 8000836:	f200 8221 	bhi.w	8000c7c <normalState+0x450>
 800083a:	a201      	add	r2, pc, #4	; (adr r2, 8000840 <normalState+0x14>)
 800083c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000840:	08000875 	.word	0x08000875
 8000844:	080008a7 	.word	0x080008a7
 8000848:	08000933 	.word	0x08000933
 800084c:	080009bf 	.word	0x080009bf
 8000850:	08000a4b 	.word	0x08000a4b
 8000854:	08000c7d 	.word	0x08000c7d
 8000858:	08000c7d 	.word	0x08000c7d
 800085c:	08000c7d 	.word	0x08000c7d
 8000860:	08000c7d 	.word	0x08000c7d
 8000864:	08000c7d 	.word	0x08000c7d
 8000868:	08000af9 	.word	0x08000af9
 800086c:	08000b6b 	.word	0x08000b6b
 8000870:	08000bed 	.word	0x08000bed
	case INIT:
		clearAllLed();
 8000874:	f7ff fef4 	bl	8000660 <clearAllLed>
		status=RedGreen;
 8000878:	4b97      	ldr	r3, [pc, #604]	; (8000ad8 <normalState+0x2ac>)
 800087a:	2201      	movs	r2, #1
 800087c:	601a      	str	r2, [r3, #0]
		setTimer1(timeGreen*100);
 800087e:	4b97      	ldr	r3, [pc, #604]	; (8000adc <normalState+0x2b0>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2264      	movs	r2, #100	; 0x64
 8000884:	fb02 f303 	mul.w	r3, r2, r3
 8000888:	4618      	mov	r0, r3
 800088a:	f000 fd17 	bl	80012bc <setTimer1>
		setTimer2(1);
 800088e:	2001      	movs	r0, #1
 8000890:	f000 fd28 	bl	80012e4 <setTimer2>
		time1=timeRed;
 8000894:	4b92      	ldr	r3, [pc, #584]	; (8000ae0 <normalState+0x2b4>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a92      	ldr	r2, [pc, #584]	; (8000ae4 <normalState+0x2b8>)
 800089a:	6013      	str	r3, [r2, #0]
		time2=timeGreen;
 800089c:	4b8f      	ldr	r3, [pc, #572]	; (8000adc <normalState+0x2b0>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a91      	ldr	r2, [pc, #580]	; (8000ae8 <normalState+0x2bc>)
 80008a2:	6013      	str	r3, [r2, #0]
		break;
 80008a4:	e1f9      	b.n	8000c9a <normalState+0x46e>
	case RedGreen:
		displayRed1();
 80008a6:	f7ff feff 	bl	80006a8 <displayRed1>
		displayGreen2();
 80008aa:	f7ff ff6b 	bl	8000784 <displayGreen2>
		if(timer2_flag==1) {// update time
 80008ae:	4b8f      	ldr	r3, [pc, #572]	; (8000aec <normalState+0x2c0>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d10c      	bne.n	80008d0 <normalState+0xa4>
			setTimer2(100);
 80008b6:	2064      	movs	r0, #100	; 0x64
 80008b8:	f000 fd14 	bl	80012e4 <setTimer2>
			time1--;
 80008bc:	4b89      	ldr	r3, [pc, #548]	; (8000ae4 <normalState+0x2b8>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	3b01      	subs	r3, #1
 80008c2:	4a88      	ldr	r2, [pc, #544]	; (8000ae4 <normalState+0x2b8>)
 80008c4:	6013      	str	r3, [r2, #0]
			time2--;
 80008c6:	4b88      	ldr	r3, [pc, #544]	; (8000ae8 <normalState+0x2bc>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	4a86      	ldr	r2, [pc, #536]	; (8000ae8 <normalState+0x2bc>)
 80008ce:	6013      	str	r3, [r2, #0]
		}
		if(timer1_flag==1) {// transit state
 80008d0:	4b87      	ldr	r3, [pc, #540]	; (8000af0 <normalState+0x2c4>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d115      	bne.n	8000904 <normalState+0xd8>
			status=RedAm;
 80008d8:	4b7f      	ldr	r3, [pc, #508]	; (8000ad8 <normalState+0x2ac>)
 80008da:	2202      	movs	r2, #2
 80008dc:	601a      	str	r2, [r3, #0]
			setTimer1(timeYellow*100);
 80008de:	4b85      	ldr	r3, [pc, #532]	; (8000af4 <normalState+0x2c8>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2264      	movs	r2, #100	; 0x64
 80008e4:	fb02 f303 	mul.w	r3, r2, r3
 80008e8:	4618      	mov	r0, r3
 80008ea:	f000 fce7 	bl	80012bc <setTimer1>
			setTimer2(1);
 80008ee:	2001      	movs	r0, #1
 80008f0:	f000 fcf8 	bl	80012e4 <setTimer2>
			time1=timeYellow;
 80008f4:	4b7f      	ldr	r3, [pc, #508]	; (8000af4 <normalState+0x2c8>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a7a      	ldr	r2, [pc, #488]	; (8000ae4 <normalState+0x2b8>)
 80008fa:	6013      	str	r3, [r2, #0]
			time2=timeYellow;
 80008fc:	4b7d      	ldr	r3, [pc, #500]	; (8000af4 <normalState+0x2c8>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a79      	ldr	r2, [pc, #484]	; (8000ae8 <normalState+0x2bc>)
 8000902:	6013      	str	r3, [r2, #0]
		}

		if(is_button_pressed(0)) {
 8000904:	2000      	movs	r0, #0
 8000906:	f000 fa69 	bl	8000ddc <is_button_pressed>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	f000 81b7 	beq.w	8000c80 <normalState+0x454>
			status=ManRed;
 8000912:	4b71      	ldr	r3, [pc, #452]	; (8000ad8 <normalState+0x2ac>)
 8000914:	220a      	movs	r2, #10
 8000916:	601a      	str	r2, [r3, #0]
			time1=timeRed;
 8000918:	4b71      	ldr	r3, [pc, #452]	; (8000ae0 <normalState+0x2b4>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a71      	ldr	r2, [pc, #452]	; (8000ae4 <normalState+0x2b8>)
 800091e:	6013      	str	r3, [r2, #0]
			time2=2;
 8000920:	4b71      	ldr	r3, [pc, #452]	; (8000ae8 <normalState+0x2bc>)
 8000922:	2202      	movs	r2, #2
 8000924:	601a      	str	r2, [r3, #0]
			clearAllLed();
 8000926:	f7ff fe9b 	bl	8000660 <clearAllLed>
			setTimer5(25);
 800092a:	2019      	movs	r0, #25
 800092c:	f000 fd16 	bl	800135c <setTimer5>
		}

		break;
 8000930:	e1a6      	b.n	8000c80 <normalState+0x454>
	case RedAm:
		displayRed1();
 8000932:	f7ff feb9 	bl	80006a8 <displayRed1>
		displayYellow2();
 8000936:	f7ff ff0f 	bl	8000758 <displayYellow2>
		if(timer2_flag==1) {// update time
 800093a:	4b6c      	ldr	r3, [pc, #432]	; (8000aec <normalState+0x2c0>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d10c      	bne.n	800095c <normalState+0x130>
			setTimer2(100);
 8000942:	2064      	movs	r0, #100	; 0x64
 8000944:	f000 fcce 	bl	80012e4 <setTimer2>
			time1--;
 8000948:	4b66      	ldr	r3, [pc, #408]	; (8000ae4 <normalState+0x2b8>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	3b01      	subs	r3, #1
 800094e:	4a65      	ldr	r2, [pc, #404]	; (8000ae4 <normalState+0x2b8>)
 8000950:	6013      	str	r3, [r2, #0]
			time2--;
 8000952:	4b65      	ldr	r3, [pc, #404]	; (8000ae8 <normalState+0x2bc>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	3b01      	subs	r3, #1
 8000958:	4a63      	ldr	r2, [pc, #396]	; (8000ae8 <normalState+0x2bc>)
 800095a:	6013      	str	r3, [r2, #0]
		}

		if(timer1_flag==1) { //transit state
 800095c:	4b64      	ldr	r3, [pc, #400]	; (8000af0 <normalState+0x2c4>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d115      	bne.n	8000990 <normalState+0x164>
			status=GreenRed;
 8000964:	4b5c      	ldr	r3, [pc, #368]	; (8000ad8 <normalState+0x2ac>)
 8000966:	2203      	movs	r2, #3
 8000968:	601a      	str	r2, [r3, #0]
			setTimer1(timeGreen*100);
 800096a:	4b5c      	ldr	r3, [pc, #368]	; (8000adc <normalState+0x2b0>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2264      	movs	r2, #100	; 0x64
 8000970:	fb02 f303 	mul.w	r3, r2, r3
 8000974:	4618      	mov	r0, r3
 8000976:	f000 fca1 	bl	80012bc <setTimer1>
			setTimer2(1);
 800097a:	2001      	movs	r0, #1
 800097c:	f000 fcb2 	bl	80012e4 <setTimer2>
			time1=timeGreen;
 8000980:	4b56      	ldr	r3, [pc, #344]	; (8000adc <normalState+0x2b0>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a57      	ldr	r2, [pc, #348]	; (8000ae4 <normalState+0x2b8>)
 8000986:	6013      	str	r3, [r2, #0]
			time2=timeRed;
 8000988:	4b55      	ldr	r3, [pc, #340]	; (8000ae0 <normalState+0x2b4>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a56      	ldr	r2, [pc, #344]	; (8000ae8 <normalState+0x2bc>)
 800098e:	6013      	str	r3, [r2, #0]
		}

		if(is_button_pressed(0)) {
 8000990:	2000      	movs	r0, #0
 8000992:	f000 fa23 	bl	8000ddc <is_button_pressed>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	f000 8173 	beq.w	8000c84 <normalState+0x458>
			status=ManRed;
 800099e:	4b4e      	ldr	r3, [pc, #312]	; (8000ad8 <normalState+0x2ac>)
 80009a0:	220a      	movs	r2, #10
 80009a2:	601a      	str	r2, [r3, #0]
			time1=timeRed;
 80009a4:	4b4e      	ldr	r3, [pc, #312]	; (8000ae0 <normalState+0x2b4>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a4e      	ldr	r2, [pc, #312]	; (8000ae4 <normalState+0x2b8>)
 80009aa:	6013      	str	r3, [r2, #0]
			time2=2;
 80009ac:	4b4e      	ldr	r3, [pc, #312]	; (8000ae8 <normalState+0x2bc>)
 80009ae:	2202      	movs	r2, #2
 80009b0:	601a      	str	r2, [r3, #0]
			clearAllLed();
 80009b2:	f7ff fe55 	bl	8000660 <clearAllLed>
			setTimer5(25);
 80009b6:	2019      	movs	r0, #25
 80009b8:	f000 fcd0 	bl	800135c <setTimer5>
		}

		break;
 80009bc:	e162      	b.n	8000c84 <normalState+0x458>
	case GreenRed:
		displayGreen1();
 80009be:	f7ff fe9f 	bl	8000700 <displayGreen1>
		displayRed2();
 80009c2:	f7ff feb3 	bl	800072c <displayRed2>
		if(timer2_flag==1) {// update time
 80009c6:	4b49      	ldr	r3, [pc, #292]	; (8000aec <normalState+0x2c0>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d10c      	bne.n	80009e8 <normalState+0x1bc>
			setTimer2(100);
 80009ce:	2064      	movs	r0, #100	; 0x64
 80009d0:	f000 fc88 	bl	80012e4 <setTimer2>
			time1--;
 80009d4:	4b43      	ldr	r3, [pc, #268]	; (8000ae4 <normalState+0x2b8>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	3b01      	subs	r3, #1
 80009da:	4a42      	ldr	r2, [pc, #264]	; (8000ae4 <normalState+0x2b8>)
 80009dc:	6013      	str	r3, [r2, #0]
			time2--;
 80009de:	4b42      	ldr	r3, [pc, #264]	; (8000ae8 <normalState+0x2bc>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	4a40      	ldr	r2, [pc, #256]	; (8000ae8 <normalState+0x2bc>)
 80009e6:	6013      	str	r3, [r2, #0]
		}

		if(timer1_flag==1) { //transit state
 80009e8:	4b41      	ldr	r3, [pc, #260]	; (8000af0 <normalState+0x2c4>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d115      	bne.n	8000a1c <normalState+0x1f0>
			status=AmRed;
 80009f0:	4b39      	ldr	r3, [pc, #228]	; (8000ad8 <normalState+0x2ac>)
 80009f2:	2204      	movs	r2, #4
 80009f4:	601a      	str	r2, [r3, #0]
			setTimer1(timeYellow*100);
 80009f6:	4b3f      	ldr	r3, [pc, #252]	; (8000af4 <normalState+0x2c8>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2264      	movs	r2, #100	; 0x64
 80009fc:	fb02 f303 	mul.w	r3, r2, r3
 8000a00:	4618      	mov	r0, r3
 8000a02:	f000 fc5b 	bl	80012bc <setTimer1>
			setTimer2(1);
 8000a06:	2001      	movs	r0, #1
 8000a08:	f000 fc6c 	bl	80012e4 <setTimer2>
			time1=timeYellow;
 8000a0c:	4b39      	ldr	r3, [pc, #228]	; (8000af4 <normalState+0x2c8>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a34      	ldr	r2, [pc, #208]	; (8000ae4 <normalState+0x2b8>)
 8000a12:	6013      	str	r3, [r2, #0]
			time2=timeYellow;
 8000a14:	4b37      	ldr	r3, [pc, #220]	; (8000af4 <normalState+0x2c8>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a33      	ldr	r2, [pc, #204]	; (8000ae8 <normalState+0x2bc>)
 8000a1a:	6013      	str	r3, [r2, #0]
		}

		if(is_button_pressed(0)) {
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f000 f9dd 	bl	8000ddc <is_button_pressed>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	f000 812f 	beq.w	8000c88 <normalState+0x45c>
			status=ManRed;
 8000a2a:	4b2b      	ldr	r3, [pc, #172]	; (8000ad8 <normalState+0x2ac>)
 8000a2c:	220a      	movs	r2, #10
 8000a2e:	601a      	str	r2, [r3, #0]
			time1=timeRed;
 8000a30:	4b2b      	ldr	r3, [pc, #172]	; (8000ae0 <normalState+0x2b4>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a2b      	ldr	r2, [pc, #172]	; (8000ae4 <normalState+0x2b8>)
 8000a36:	6013      	str	r3, [r2, #0]
			time2=2;
 8000a38:	4b2b      	ldr	r3, [pc, #172]	; (8000ae8 <normalState+0x2bc>)
 8000a3a:	2202      	movs	r2, #2
 8000a3c:	601a      	str	r2, [r3, #0]
			clearAllLed();
 8000a3e:	f7ff fe0f 	bl	8000660 <clearAllLed>
			setTimer5(25);
 8000a42:	2019      	movs	r0, #25
 8000a44:	f000 fc8a 	bl	800135c <setTimer5>
		}
		break;
 8000a48:	e11e      	b.n	8000c88 <normalState+0x45c>
	case AmRed:
		displayYellow1();
 8000a4a:	f7ff fe43 	bl	80006d4 <displayYellow1>
		displayRed2();
 8000a4e:	f7ff fe6d 	bl	800072c <displayRed2>
		if(timer2_flag==1) {// update time
 8000a52:	4b26      	ldr	r3, [pc, #152]	; (8000aec <normalState+0x2c0>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d10c      	bne.n	8000a74 <normalState+0x248>
			setTimer2(100);
 8000a5a:	2064      	movs	r0, #100	; 0x64
 8000a5c:	f000 fc42 	bl	80012e4 <setTimer2>
			time1--;
 8000a60:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <normalState+0x2b8>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	3b01      	subs	r3, #1
 8000a66:	4a1f      	ldr	r2, [pc, #124]	; (8000ae4 <normalState+0x2b8>)
 8000a68:	6013      	str	r3, [r2, #0]
			time2--;
 8000a6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ae8 <normalState+0x2bc>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	3b01      	subs	r3, #1
 8000a70:	4a1d      	ldr	r2, [pc, #116]	; (8000ae8 <normalState+0x2bc>)
 8000a72:	6013      	str	r3, [r2, #0]
		}

		if(timer1_flag==1) { //transit state
 8000a74:	4b1e      	ldr	r3, [pc, #120]	; (8000af0 <normalState+0x2c4>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d115      	bne.n	8000aa8 <normalState+0x27c>
			status=RedGreen;
 8000a7c:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <normalState+0x2ac>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	601a      	str	r2, [r3, #0]
			setTimer1(timeGreen*100);
 8000a82:	4b16      	ldr	r3, [pc, #88]	; (8000adc <normalState+0x2b0>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	2264      	movs	r2, #100	; 0x64
 8000a88:	fb02 f303 	mul.w	r3, r2, r3
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f000 fc15 	bl	80012bc <setTimer1>
			setTimer2(1);
 8000a92:	2001      	movs	r0, #1
 8000a94:	f000 fc26 	bl	80012e4 <setTimer2>
			time1=timeRed;
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <normalState+0x2b4>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a11      	ldr	r2, [pc, #68]	; (8000ae4 <normalState+0x2b8>)
 8000a9e:	6013      	str	r3, [r2, #0]
			time2=timeGreen;
 8000aa0:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <normalState+0x2b0>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a10      	ldr	r2, [pc, #64]	; (8000ae8 <normalState+0x2bc>)
 8000aa6:	6013      	str	r3, [r2, #0]
		}

		if(is_button_pressed(0)) {
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f000 f997 	bl	8000ddc <is_button_pressed>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	f000 80eb 	beq.w	8000c8c <normalState+0x460>
			status=ManRed;
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <normalState+0x2ac>)
 8000ab8:	220a      	movs	r2, #10
 8000aba:	601a      	str	r2, [r3, #0]
			time1=timeRed;
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <normalState+0x2b4>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a08      	ldr	r2, [pc, #32]	; (8000ae4 <normalState+0x2b8>)
 8000ac2:	6013      	str	r3, [r2, #0]
			time2=2;
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <normalState+0x2bc>)
 8000ac6:	2202      	movs	r2, #2
 8000ac8:	601a      	str	r2, [r3, #0]
			clearAllLed();
 8000aca:	f7ff fdc9 	bl	8000660 <clearAllLed>
			setTimer5(25);
 8000ace:	2019      	movs	r0, #25
 8000ad0:	f000 fc44 	bl	800135c <setTimer5>
		}
		break;
 8000ad4:	e0da      	b.n	8000c8c <normalState+0x460>
 8000ad6:	bf00      	nop
 8000ad8:	200000a8 	.word	0x200000a8
 8000adc:	20000008 	.word	0x20000008
 8000ae0:	20000000 	.word	0x20000000
 8000ae4:	200000bc 	.word	0x200000bc
 8000ae8:	200000c0 	.word	0x200000c0
 8000aec:	200000f8 	.word	0x200000f8
 8000af0:	200000f0 	.word	0x200000f0
 8000af4:	20000004 	.word	0x20000004
	case ManRed:
		if(timer5_flag==1) {
 8000af8:	4b69      	ldr	r3, [pc, #420]	; (8000ca0 <normalState+0x474>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d104      	bne.n	8000b0a <normalState+0x2de>
			setTimer5(25);
 8000b00:	2019      	movs	r0, #25
 8000b02:	f000 fc2b 	bl	800135c <setTimer5>
			toggleRed();
 8000b06:	f7ff fe53 	bl	80007b0 <toggleRed>
		}
		if(is_button_pressed(1)) {
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	f000 f966 	bl	8000ddc <is_button_pressed>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <normalState+0x2ee>
			increase();
 8000b16:	f7ff fe75 	bl	8000804 <increase>
		}
		if(is_button_pressed(2)) {
 8000b1a:	2002      	movs	r0, #2
 8000b1c:	f000 f95e 	bl	8000ddc <is_button_pressed>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d00a      	beq.n	8000b3c <normalState+0x310>
			timeRed=time1;
 8000b26:	4b5f      	ldr	r3, [pc, #380]	; (8000ca4 <normalState+0x478>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a5f      	ldr	r2, [pc, #380]	; (8000ca8 <normalState+0x47c>)
 8000b2c:	6013      	str	r3, [r2, #0]
			timeGreen=timeRed-timeYellow;
 8000b2e:	4b5e      	ldr	r3, [pc, #376]	; (8000ca8 <normalState+0x47c>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	4b5e      	ldr	r3, [pc, #376]	; (8000cac <normalState+0x480>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	1ad3      	subs	r3, r2, r3
 8000b38:	4a5d      	ldr	r2, [pc, #372]	; (8000cb0 <normalState+0x484>)
 8000b3a:	6013      	str	r3, [r2, #0]

		}
		if(is_button_pressed(0)) {
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	f000 f94d 	bl	8000ddc <is_button_pressed>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	f000 80a3 	beq.w	8000c90 <normalState+0x464>
			status=ManAm;
 8000b4a:	4b5a      	ldr	r3, [pc, #360]	; (8000cb4 <normalState+0x488>)
 8000b4c:	220b      	movs	r2, #11
 8000b4e:	601a      	str	r2, [r3, #0]
			time1=timeYellow;
 8000b50:	4b56      	ldr	r3, [pc, #344]	; (8000cac <normalState+0x480>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a53      	ldr	r2, [pc, #332]	; (8000ca4 <normalState+0x478>)
 8000b56:	6013      	str	r3, [r2, #0]
			time2=3;
 8000b58:	4b57      	ldr	r3, [pc, #348]	; (8000cb8 <normalState+0x48c>)
 8000b5a:	2203      	movs	r2, #3
 8000b5c:	601a      	str	r2, [r3, #0]
			clearAllLed();
 8000b5e:	f7ff fd7f 	bl	8000660 <clearAllLed>
			setTimer5(25);
 8000b62:	2019      	movs	r0, #25
 8000b64:	f000 fbfa 	bl	800135c <setTimer5>
		}
		break;
 8000b68:	e092      	b.n	8000c90 <normalState+0x464>
	case ManAm:
		if(timer5_flag==1) {
 8000b6a:	4b4d      	ldr	r3, [pc, #308]	; (8000ca0 <normalState+0x474>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d104      	bne.n	8000b7c <normalState+0x350>
			setTimer5(25);
 8000b72:	2019      	movs	r0, #25
 8000b74:	f000 fbf2 	bl	800135c <setTimer5>
			toggleYellow();
 8000b78:	f7ff fe28 	bl	80007cc <toggleYellow>
		}
		if(is_button_pressed(1)) {
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	f000 f92d 	bl	8000ddc <is_button_pressed>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <normalState+0x360>
			increase();
 8000b88:	f7ff fe3c 	bl	8000804 <increase>
		}
		if(is_button_pressed(2)) {
 8000b8c:	2002      	movs	r0, #2
 8000b8e:	f000 f925 	bl	8000ddc <is_button_pressed>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d013      	beq.n	8000bc0 <normalState+0x394>
			timeYellow=time1;
 8000b98:	4b42      	ldr	r3, [pc, #264]	; (8000ca4 <normalState+0x478>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a43      	ldr	r2, [pc, #268]	; (8000cac <normalState+0x480>)
 8000b9e:	6013      	str	r3, [r2, #0]
			if(timeYellow >=timeRed) {
 8000ba0:	4b42      	ldr	r3, [pc, #264]	; (8000cac <normalState+0x480>)
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	4b40      	ldr	r3, [pc, #256]	; (8000ca8 <normalState+0x47c>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	db02      	blt.n	8000bb2 <normalState+0x386>
				timeRed=60;
 8000bac:	4b3e      	ldr	r3, [pc, #248]	; (8000ca8 <normalState+0x47c>)
 8000bae:	223c      	movs	r2, #60	; 0x3c
 8000bb0:	601a      	str	r2, [r3, #0]
			}
			timeGreen=timeRed-timeYellow;
 8000bb2:	4b3d      	ldr	r3, [pc, #244]	; (8000ca8 <normalState+0x47c>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	4b3d      	ldr	r3, [pc, #244]	; (8000cac <normalState+0x480>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	1ad3      	subs	r3, r2, r3
 8000bbc:	4a3c      	ldr	r2, [pc, #240]	; (8000cb0 <normalState+0x484>)
 8000bbe:	6013      	str	r3, [r2, #0]
		}
		if(is_button_pressed(0)) {
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f000 f90b 	bl	8000ddc <is_button_pressed>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d063      	beq.n	8000c94 <normalState+0x468>
			status=ManGreen;
 8000bcc:	4b39      	ldr	r3, [pc, #228]	; (8000cb4 <normalState+0x488>)
 8000bce:	220c      	movs	r2, #12
 8000bd0:	601a      	str	r2, [r3, #0]
			time1=timeGreen;
 8000bd2:	4b37      	ldr	r3, [pc, #220]	; (8000cb0 <normalState+0x484>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a33      	ldr	r2, [pc, #204]	; (8000ca4 <normalState+0x478>)
 8000bd8:	6013      	str	r3, [r2, #0]
			time2=4;
 8000bda:	4b37      	ldr	r3, [pc, #220]	; (8000cb8 <normalState+0x48c>)
 8000bdc:	2204      	movs	r2, #4
 8000bde:	601a      	str	r2, [r3, #0]
			clearAllLed();
 8000be0:	f7ff fd3e 	bl	8000660 <clearAllLed>
			setTimer5(25);
 8000be4:	2019      	movs	r0, #25
 8000be6:	f000 fbb9 	bl	800135c <setTimer5>
		}
		break;
 8000bea:	e053      	b.n	8000c94 <normalState+0x468>
	case ManGreen:
		if(timer5_flag==1) {
 8000bec:	4b2c      	ldr	r3, [pc, #176]	; (8000ca0 <normalState+0x474>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d104      	bne.n	8000bfe <normalState+0x3d2>
			setTimer5(25);
 8000bf4:	2019      	movs	r0, #25
 8000bf6:	f000 fbb1 	bl	800135c <setTimer5>
			toggleGreen();
 8000bfa:	f7ff fdf5 	bl	80007e8 <toggleGreen>
		}
		if(is_button_pressed(1)) {
 8000bfe:	2001      	movs	r0, #1
 8000c00:	f000 f8ec 	bl	8000ddc <is_button_pressed>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <normalState+0x3e2>
			increase();
 8000c0a:	f7ff fdfb 	bl	8000804 <increase>
		}
		if(is_button_pressed(2)) {
 8000c0e:	2002      	movs	r0, #2
 8000c10:	f000 f8e4 	bl	8000ddc <is_button_pressed>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d013      	beq.n	8000c42 <normalState+0x416>
			timeGreen=time1;
 8000c1a:	4b22      	ldr	r3, [pc, #136]	; (8000ca4 <normalState+0x478>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a24      	ldr	r2, [pc, #144]	; (8000cb0 <normalState+0x484>)
 8000c20:	6013      	str	r3, [r2, #0]
			if(timeGreen >=timeRed) {
 8000c22:	4b23      	ldr	r3, [pc, #140]	; (8000cb0 <normalState+0x484>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	4b20      	ldr	r3, [pc, #128]	; (8000ca8 <normalState+0x47c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	db02      	blt.n	8000c34 <normalState+0x408>
				timeRed=60;
 8000c2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ca8 <normalState+0x47c>)
 8000c30:	223c      	movs	r2, #60	; 0x3c
 8000c32:	601a      	str	r2, [r3, #0]
			}
			timeYellow=timeRed-timeGreen;
 8000c34:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <normalState+0x47c>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <normalState+0x484>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	4a1b      	ldr	r2, [pc, #108]	; (8000cac <normalState+0x480>)
 8000c40:	6013      	str	r3, [r2, #0]
		}
		if(is_button_pressed(0)) {
 8000c42:	2000      	movs	r0, #0
 8000c44:	f000 f8ca 	bl	8000ddc <is_button_pressed>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d024      	beq.n	8000c98 <normalState+0x46c>
			status=RedGreen;
 8000c4e:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <normalState+0x488>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	601a      	str	r2, [r3, #0]
			setTimer1(timeGreen*100);
 8000c54:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <normalState+0x484>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2264      	movs	r2, #100	; 0x64
 8000c5a:	fb02 f303 	mul.w	r3, r2, r3
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f000 fb2c 	bl	80012bc <setTimer1>
			setTimer2(1);
 8000c64:	2001      	movs	r0, #1
 8000c66:	f000 fb3d 	bl	80012e4 <setTimer2>
			time1=timeRed;
 8000c6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <normalState+0x47c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a0d      	ldr	r2, [pc, #52]	; (8000ca4 <normalState+0x478>)
 8000c70:	6013      	str	r3, [r2, #0]
			time2=timeGreen;
 8000c72:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <normalState+0x484>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a10      	ldr	r2, [pc, #64]	; (8000cb8 <normalState+0x48c>)
 8000c78:	6013      	str	r3, [r2, #0]
		}
		break;
 8000c7a:	e00d      	b.n	8000c98 <normalState+0x46c>
	default:
		break;
 8000c7c:	bf00      	nop
 8000c7e:	e00c      	b.n	8000c9a <normalState+0x46e>
		break;
 8000c80:	bf00      	nop
 8000c82:	e00a      	b.n	8000c9a <normalState+0x46e>
		break;
 8000c84:	bf00      	nop
 8000c86:	e008      	b.n	8000c9a <normalState+0x46e>
		break;
 8000c88:	bf00      	nop
 8000c8a:	e006      	b.n	8000c9a <normalState+0x46e>
		break;
 8000c8c:	bf00      	nop
 8000c8e:	e004      	b.n	8000c9a <normalState+0x46e>
		break;
 8000c90:	bf00      	nop
 8000c92:	e002      	b.n	8000c9a <normalState+0x46e>
		break;
 8000c94:	bf00      	nop
 8000c96:	e000      	b.n	8000c9a <normalState+0x46e>
		break;
 8000c98:	bf00      	nop
	}
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000110 	.word	0x20000110
 8000ca4:	200000bc 	.word	0x200000bc
 8000ca8:	20000000 	.word	0x20000000
 8000cac:	20000004 	.word	0x20000004
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	200000a8 	.word	0x200000a8
 8000cb8:	200000c0 	.word	0x200000c0

08000cbc <button_reading>:
static GPIO_PinState debounceButtonBuffer3[N0_OF_BUTTONS];
//we define a flag for a button pressed more than 1 second.
//we define counter for automatically increasing the value
//after the button is pressed more than 1 second.
int buttonFlag[N0_OF_BUTTONS] = {0};
void button_reading(void){
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
	for(int i = 0; i < N0_OF_BUTTONS; i ++){
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	607b      	str	r3, [r7, #4]
 8000cc6:	e070      	b.n	8000daa <button_reading+0xee>
		debounceButtonBuffer3[i] =debounceButtonBuffer2[i];
 8000cc8:	4a3c      	ldr	r2, [pc, #240]	; (8000dbc <button_reading+0x100>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	7819      	ldrb	r1, [r3, #0]
 8000cd0:	4a3b      	ldr	r2, [pc, #236]	; (8000dc0 <button_reading+0x104>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	460a      	mov	r2, r1
 8000cd8:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2[i] =debounceButtonBuffer1[i];
 8000cda:	4a3a      	ldr	r2, [pc, #232]	; (8000dc4 <button_reading+0x108>)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4413      	add	r3, r2
 8000ce0:	7819      	ldrb	r1, [r3, #0]
 8000ce2:	4a36      	ldr	r2, [pc, #216]	; (8000dbc <button_reading+0x100>)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	460a      	mov	r2, r1
 8000cea:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(GPIOB, buttonPin[i]);
 8000cec:	4a36      	ldr	r2, [pc, #216]	; (8000dc8 <button_reading+0x10c>)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4834      	ldr	r0, [pc, #208]	; (8000dcc <button_reading+0x110>)
 8000cfa:	f000 ff81 	bl	8001c00 <HAL_GPIO_ReadPin>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	4619      	mov	r1, r3
 8000d02:	4a30      	ldr	r2, [pc, #192]	; (8000dc4 <button_reading+0x108>)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4413      	add	r3, r2
 8000d08:	460a      	mov	r2, r1
 8000d0a:	701a      	strb	r2, [r3, #0]
		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i] && debounceButtonBuffer2[i] == debounceButtonBuffer3[i]) {
 8000d0c:	4a2d      	ldr	r2, [pc, #180]	; (8000dc4 <button_reading+0x108>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	781a      	ldrb	r2, [r3, #0]
 8000d14:	4929      	ldr	r1, [pc, #164]	; (8000dbc <button_reading+0x100>)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	440b      	add	r3, r1
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d141      	bne.n	8000da4 <button_reading+0xe8>
 8000d20:	4a26      	ldr	r2, [pc, #152]	; (8000dbc <button_reading+0x100>)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	781a      	ldrb	r2, [r3, #0]
 8000d28:	4925      	ldr	r1, [pc, #148]	; (8000dc0 <button_reading+0x104>)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	440b      	add	r3, r1
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d137      	bne.n	8000da4 <button_reading+0xe8>
			if(debounceButtonBuffer1[i] != buttonBuffer[i]){
 8000d34:	4a23      	ldr	r2, [pc, #140]	; (8000dc4 <button_reading+0x108>)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	781a      	ldrb	r2, [r3, #0]
 8000d3c:	4924      	ldr	r1, [pc, #144]	; (8000dd0 <button_reading+0x114>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	440b      	add	r3, r1
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d019      	beq.n	8000d7c <button_reading+0xc0>
				buttonBuffer[i] = debounceButtonBuffer1[i];
 8000d48:	4a1e      	ldr	r2, [pc, #120]	; (8000dc4 <button_reading+0x108>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	7819      	ldrb	r1, [r3, #0]
 8000d50:	4a1f      	ldr	r2, [pc, #124]	; (8000dd0 <button_reading+0x114>)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	460a      	mov	r2, r1
 8000d58:	701a      	strb	r2, [r3, #0]
						if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 8000d5a:	4a1d      	ldr	r2, [pc, #116]	; (8000dd0 <button_reading+0x114>)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4413      	add	r3, r2
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d11e      	bne.n	8000da4 <button_reading+0xe8>
							buttonFlag[i] = 1;
 8000d66:	4a1b      	ldr	r2, [pc, #108]	; (8000dd4 <button_reading+0x118>)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							buttonTimeOut[i] = DURATION_FOR_AUTO_INCREASING;
 8000d70:	4a19      	ldr	r2, [pc, #100]	; (8000dd8 <button_reading+0x11c>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2164      	movs	r1, #100	; 0x64
 8000d76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000d7a:	e013      	b.n	8000da4 <button_reading+0xe8>
							}
		}
		else {
			buttonTimeOut[i]--;
 8000d7c:	4a16      	ldr	r2, [pc, #88]	; (8000dd8 <button_reading+0x11c>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d84:	1e5a      	subs	r2, r3, #1
 8000d86:	4914      	ldr	r1, [pc, #80]	; (8000dd8 <button_reading+0x11c>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(buttonTimeOut[i] <= 0){
 8000d8e:	4a12      	ldr	r2, [pc, #72]	; (8000dd8 <button_reading+0x11c>)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	dc04      	bgt.n	8000da4 <button_reading+0xe8>
					buttonBuffer[i] = BUTTON_IS_RELEASED;
 8000d9a:	4a0d      	ldr	r2, [pc, #52]	; (8000dd0 <button_reading+0x114>)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4413      	add	r3, r2
 8000da0:	2201      	movs	r2, #1
 8000da2:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < N0_OF_BUTTONS; i ++){
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3301      	adds	r3, #1
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2b02      	cmp	r3, #2
 8000dae:	dd8b      	ble.n	8000cc8 <button_reading+0xc>
			}
		}
	}
}
}
 8000db0:	bf00      	nop
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	200000d4 	.word	0x200000d4
 8000dc0:	200000d8 	.word	0x200000d8
 8000dc4:	200000d0 	.word	0x200000d0
 8000dc8:	20000010 	.word	0x20000010
 8000dcc:	40010c00 	.word	0x40010c00
 8000dd0:	2000000c 	.word	0x2000000c
 8000dd4:	200000dc 	.word	0x200000dc
 8000dd8:	200000c4 	.word	0x200000c4

08000ddc <is_button_pressed>:

int is_button_pressed(int index){
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	if(index >= N0_OF_BUTTONS || index < 0) return 0;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	dc02      	bgt.n	8000df0 <is_button_pressed+0x14>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	da01      	bge.n	8000df4 <is_button_pressed+0x18>
 8000df0:	2300      	movs	r3, #0
 8000df2:	e00d      	b.n	8000e10 <is_button_pressed+0x34>
		if(buttonFlag[index] == 1){
 8000df4:	4a09      	ldr	r2, [pc, #36]	; (8000e1c <is_button_pressed+0x40>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d106      	bne.n	8000e0e <is_button_pressed+0x32>
			buttonFlag[index] = 0;
 8000e00:	4a06      	ldr	r2, [pc, #24]	; (8000e1c <is_button_pressed+0x40>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2100      	movs	r1, #0
 8000e06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			return 1;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e000      	b.n	8000e10 <is_button_pressed+0x34>
		}
		return 0;
 8000e0e:	2300      	movs	r3, #0
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	200000dc 	.word	0x200000dc

08000e20 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	button_reading();
 8000e28:	f7ff ff48 	bl	8000cbc <button_reading>
	SCH_Update();
 8000e2c:	f000 f9f4 	bl	8001218 <SCH_Update>
	//timerRun();
}
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e3e:	f000 fbf5 	bl	800162c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e42:	f000 f843 	bl	8000ecc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e46:	f000 f8c9 	bl	8000fdc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e4a:	f000 f87b 	bl	8000f44 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 );
 8000e4e:	481a      	ldr	r0, [pc, #104]	; (8000eb8 <main+0x80>)
 8000e50:	f001 fb66 	bl	8002520 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer3(25);
 8000e54:	2019      	movs	r0, #25
 8000e56:	f000 fa59 	bl	800130c <setTimer3>
  setTimer4(50);
 8000e5a:	2032      	movs	r0, #50	; 0x32
 8000e5c:	f000 fa6a 	bl	8001334 <setTimer4>
//  SCH_Add_Task(LED_Blink, 0, 100);
//  SCH_Add_Task(LED_Blink2, 1, 200);
  int led_idx=0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	607b      	str	r3, [r7, #4]
  SCH_Init();
 8000e64:	f000 f922 	bl	80010ac <SCH_Init>
  SCH_Add_Task(normalState,0,1);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4813      	ldr	r0, [pc, #76]	; (8000ebc <main+0x84>)
 8000e6e:	f000 f9b5 	bl	80011dc <SCH_Add_Task>
  SCH_Add_Task(timerRun,0,1);
 8000e72:	2201      	movs	r2, #1
 8000e74:	2100      	movs	r1, #0
 8000e76:	4812      	ldr	r0, [pc, #72]	; (8000ec0 <main+0x88>)
 8000e78:	f000 f9b0 	bl	80011dc <SCH_Add_Task>
  while (1)
  {
	  if(timer3_flag==1) {
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <main+0x8c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d10d      	bne.n	8000ea0 <main+0x68>
	   	 setTimer3(25);
 8000e84:	2019      	movs	r0, #25
 8000e86:	f000 fa41 	bl	800130c <setTimer3>
	   	 update7SEG(led_idx++);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	1c5a      	adds	r2, r3, #1
 8000e8e:	607a      	str	r2, [r7, #4]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff fb59 	bl	8000548 <update7SEG>
	   	 if(led_idx>=4) led_idx=0;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2b03      	cmp	r3, #3
 8000e9a:	dd01      	ble.n	8000ea0 <main+0x68>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	607b      	str	r3, [r7, #4]
	   	}
	  if(timer4_flag==1) {
 8000ea0:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <main+0x90>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d104      	bne.n	8000eb2 <main+0x7a>
		  updateBuffer();
 8000ea8:	f7ff fb0e 	bl	80004c8 <updateBuffer>
		  setTimer4(50);
 8000eac:	2032      	movs	r0, #50	; 0x32
 8000eae:	f000 fa41 	bl	8001334 <setTimer4>
	  }
//	 normalState();
	  SCH_Dispatch_Tasks();
 8000eb2:	f000 f9d7 	bl	8001264 <SCH_Dispatch_Tasks>
	  if(timer3_flag==1) {
 8000eb6:	e7e1      	b.n	8000e7c <main+0x44>
 8000eb8:	20000120 	.word	0x20000120
 8000ebc:	0800082d 	.word	0x0800082d
 8000ec0:	08001385 	.word	0x08001385
 8000ec4:	20000100 	.word	0x20000100
 8000ec8:	20000108 	.word	0x20000108

08000ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b090      	sub	sp, #64	; 0x40
 8000ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed2:	f107 0318 	add.w	r3, r7, #24
 8000ed6:	2228      	movs	r2, #40	; 0x28
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f001 fef2 	bl	8002cc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]
 8000eec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ef6:	2310      	movs	r3, #16
 8000ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000efa:	2300      	movs	r3, #0
 8000efc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000efe:	f107 0318 	add.w	r3, r7, #24
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 fee0 	bl	8001cc8 <HAL_RCC_OscConfig>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000f0e:	f000 f8c7 	bl	80010a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f12:	230f      	movs	r3, #15
 8000f14:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f16:	2300      	movs	r3, #0
 8000f18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f001 f94c 	bl	80021c8 <HAL_RCC_ClockConfig>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f36:	f000 f8b3 	bl	80010a0 <Error_Handler>
  }
}
 8000f3a:	bf00      	nop
 8000f3c:	3740      	adds	r7, #64	; 0x40
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f4a:	f107 0308 	add.w	r3, r7, #8
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f58:	463b      	mov	r3, r7
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f60:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <MX_TIM2_Init+0x94>)
 8000f62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000f68:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <MX_TIM2_Init+0x94>)
 8000f6a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f70:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <MX_TIM2_Init+0x94>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000f76:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <MX_TIM2_Init+0x94>)
 8000f78:	2209      	movs	r2, #9
 8000f7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f7c:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <MX_TIM2_Init+0x94>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f82:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <MX_TIM2_Init+0x94>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f88:	4813      	ldr	r0, [pc, #76]	; (8000fd8 <MX_TIM2_Init+0x94>)
 8000f8a:	f001 fa79 	bl	8002480 <HAL_TIM_Base_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f94:	f000 f884 	bl	80010a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f9e:	f107 0308 	add.w	r3, r7, #8
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	480c      	ldr	r0, [pc, #48]	; (8000fd8 <MX_TIM2_Init+0x94>)
 8000fa6:	f001 fc0f 	bl	80027c8 <HAL_TIM_ConfigClockSource>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fb0:	f000 f876 	bl	80010a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fbc:	463b      	mov	r3, r7
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <MX_TIM2_Init+0x94>)
 8000fc2:	f001 fddb 	bl	8002b7c <HAL_TIMEx_MasterConfigSynchronization>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000fcc:	f000 f868 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fd0:	bf00      	nop
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000120 	.word	0x20000120

08000fdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe2:	f107 0308 	add.w	r3, r7, #8
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff0:	4b28      	ldr	r3, [pc, #160]	; (8001094 <MX_GPIO_Init+0xb8>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	4a27      	ldr	r2, [pc, #156]	; (8001094 <MX_GPIO_Init+0xb8>)
 8000ff6:	f043 0304 	orr.w	r3, r3, #4
 8000ffa:	6193      	str	r3, [r2, #24]
 8000ffc:	4b25      	ldr	r3, [pc, #148]	; (8001094 <MX_GPIO_Init+0xb8>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	f003 0304 	and.w	r3, r3, #4
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001008:	4b22      	ldr	r3, [pc, #136]	; (8001094 <MX_GPIO_Init+0xb8>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	4a21      	ldr	r2, [pc, #132]	; (8001094 <MX_GPIO_Init+0xb8>)
 800100e:	f043 0308 	orr.w	r3, r3, #8
 8001012:	6193      	str	r3, [r2, #24]
 8001014:	4b1f      	ldr	r3, [pc, #124]	; (8001094 <MX_GPIO_Init+0xb8>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	f003 0308 	and.w	r3, r3, #8
 800101c:	603b      	str	r3, [r7, #0]
 800101e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Red1_Pin|LED_Yellow1_Pin|LED_Green1_Pin|LED_Red2_Pin
 8001020:	2200      	movs	r2, #0
 8001022:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8001026:	481c      	ldr	r0, [pc, #112]	; (8001098 <MX_GPIO_Init+0xbc>)
 8001028:	f000 fe01 	bl	8001c2e <HAL_GPIO_WritePin>
                          |LED_Yellow2_Pin|LED_Green2_Pin|SEG0_Pin|SEG1_Pin
                          |SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, test_Pin|EN0_Pin|EN1_Pin|EN2_Pin
 800102c:	2200      	movs	r2, #0
 800102e:	f44f 618f 	mov.w	r1, #1144	; 0x478
 8001032:	481a      	ldr	r0, [pc, #104]	; (800109c <MX_GPIO_Init+0xc0>)
 8001034:	f000 fdfb 	bl	8001c2e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Red1_Pin LED_Yellow1_Pin LED_Green1_Pin LED_Red2_Pin
                           LED_Yellow2_Pin LED_Green2_Pin SEG0_Pin SEG1_Pin
                           SEG2_Pin SEG3_Pin SEG4_Pin SEG5_Pin
                           SEG6_Pin */
  GPIO_InitStruct.Pin = LED_Red1_Pin|LED_Yellow1_Pin|LED_Green1_Pin|LED_Red2_Pin
 8001038:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800103c:	60bb      	str	r3, [r7, #8]
                          |LED_Yellow2_Pin|LED_Green2_Pin|SEG0_Pin|SEG1_Pin
                          |SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103e:	2301      	movs	r3, #1
 8001040:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2302      	movs	r3, #2
 8001048:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104a:	f107 0308 	add.w	r3, r7, #8
 800104e:	4619      	mov	r1, r3
 8001050:	4811      	ldr	r0, [pc, #68]	; (8001098 <MX_GPIO_Init+0xbc>)
 8001052:	f000 fc5b 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8001056:	2307      	movs	r3, #7
 8001058:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800105e:	2301      	movs	r3, #1
 8001060:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001062:	f107 0308 	add.w	r3, r7, #8
 8001066:	4619      	mov	r1, r3
 8001068:	480c      	ldr	r0, [pc, #48]	; (800109c <MX_GPIO_Init+0xc0>)
 800106a:	f000 fc4f 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pins : test_Pin EN0_Pin EN1_Pin EN2_Pin
                           EN3_Pin */
  GPIO_InitStruct.Pin = test_Pin|EN0_Pin|EN1_Pin|EN2_Pin
 800106e:	f44f 638f 	mov.w	r3, #1144	; 0x478
 8001072:	60bb      	str	r3, [r7, #8]
                          |EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001074:	2301      	movs	r3, #1
 8001076:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2302      	movs	r3, #2
 800107e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001080:	f107 0308 	add.w	r3, r7, #8
 8001084:	4619      	mov	r1, r3
 8001086:	4805      	ldr	r0, [pc, #20]	; (800109c <MX_GPIO_Init+0xc0>)
 8001088:	f000 fc40 	bl	800190c <HAL_GPIO_Init>

}
 800108c:	bf00      	nop
 800108e:	3718      	adds	r7, #24
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40021000 	.word	0x40021000
 8001098:	40010800 	.word	0x40010800
 800109c:	40010c00 	.word	0x40010c00

080010a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a4:	b672      	cpsid	i
}
 80010a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <Error_Handler+0x8>
	...

080010ac <SCH_Init>:


struct Node* head=NULL;


void SCH_Init(void) {
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
	head=NULL;
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <SCH_Init+0x14>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	200000e8 	.word	0x200000e8

080010c4 <addNode>:

void addNode(sTask newTask) {
 80010c4:	b590      	push	{r4, r7, lr}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	463c      	mov	r4, r7
 80010cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
 80010d0:	2014      	movs	r0, #20
 80010d2:	f001 fde7 	bl	8002ca4 <malloc>
 80010d6:	4603      	mov	r3, r0
 80010d8:	613b      	str	r3, [r7, #16]
	newNode->data.pTask = newTask.pTask;
 80010da:	683a      	ldr	r2, [r7, #0]
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	601a      	str	r2, [r3, #0]
	newNode->data.Delay = newTask.Delay;
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	605a      	str	r2, [r3, #4]
	newNode->data.Period = newTask.Period;
 80010e6:	68ba      	ldr	r2, [r7, #8]
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	609a      	str	r2, [r3, #8]
	newNode->data.RunMe = newTask.RunMe;
 80010ec:	7b3a      	ldrb	r2, [r7, #12]
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	731a      	strb	r2, [r3, #12]
	newNode->next = NULL;
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
	//list is empty just addNode
	if(head == NULL) {
 80010f8:	4b2b      	ldr	r3, [pc, #172]	; (80011a8 <addNode+0xe4>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d103      	bne.n	8001108 <addNode+0x44>
		head=newNode;
 8001100:	4a29      	ldr	r2, [pc, #164]	; (80011a8 <addNode+0xe4>)
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	6013      	str	r3, [r2, #0]
		return;
 8001106:	e04c      	b.n	80011a2 <addNode+0xde>
	}
	struct Node* tmp=head;
 8001108:	4b27      	ldr	r3, [pc, #156]	; (80011a8 <addNode+0xe4>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	617b      	str	r3, [r7, #20]
	//if the list has A5 B3 C2  we add D3 -> D3 A2 B3 C2
	if(newNode->data.Delay < tmp->data.Delay ) {
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	685a      	ldr	r2, [r3, #4]
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	429a      	cmp	r2, r3
 8001118:	d21e      	bcs.n	8001158 <addNode+0x94>
		tmp->data.Delay-= newNode->data.Delay;
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	1ad2      	subs	r2, r2, r3
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	605a      	str	r2, [r3, #4]
		newNode->next=tmp;
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	697a      	ldr	r2, [r7, #20]
 800112c:	611a      	str	r2, [r3, #16]
		head=newNode;
 800112e:	4a1e      	ldr	r2, [pc, #120]	; (80011a8 <addNode+0xe4>)
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	6013      	str	r3, [r2, #0]
		return;
 8001134:	e035      	b.n	80011a2 <addNode+0xde>
	}

	// if the list has A5 B3 C2 we add D9 -> A5 B3 D1 C1
	while(tmp->next !=NULL) {
		newNode->data.Delay -= tmp->data.Delay;
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	685a      	ldr	r2, [r3, #4]
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	1ad2      	subs	r2, r2, r3
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	605a      	str	r2, [r3, #4]
		if(newNode->data.Delay <= tmp->next->data.Delay) {
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	685a      	ldr	r2, [r3, #4]
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	691b      	ldr	r3, [r3, #16]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	429a      	cmp	r2, r3
 8001150:	d907      	bls.n	8001162 <addNode+0x9e>
			break;
		}
		tmp=tmp->next;
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	691b      	ldr	r3, [r3, #16]
 8001156:	617b      	str	r3, [r7, #20]
	while(tmp->next !=NULL) {
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	691b      	ldr	r3, [r3, #16]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d1ea      	bne.n	8001136 <addNode+0x72>
 8001160:	e000      	b.n	8001164 <addNode+0xa0>
			break;
 8001162:	bf00      	nop
	}
	// tmp dang o B3 va D tro thanh D1
	if(tmp->next ==NULL) {
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	691b      	ldr	r3, [r3, #16]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d10a      	bne.n	8001182 <addNode+0xbe>
		newNode->data.Delay-=tmp->data.Delay;
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	685a      	ldr	r2, [r3, #4]
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	1ad2      	subs	r2, r2, r3
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	605a      	str	r2, [r3, #4]
		tmp->next=newNode;
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	611a      	str	r2, [r3, #16]
 8001180:	e00f      	b.n	80011a2 <addNode+0xde>
	}
	else {
		tmp->next->data.Delay-= newNode->data.Delay; // chuyen C2 thanh C1
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	691b      	ldr	r3, [r3, #16]
 8001186:	6859      	ldr	r1, [r3, #4]
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	691b      	ldr	r3, [r3, #16]
 8001190:	1a8a      	subs	r2, r1, r2
 8001192:	605a      	str	r2, [r3, #4]
		newNode->next=tmp->next;
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	691a      	ldr	r2, [r3, #16]
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	611a      	str	r2, [r3, #16]
		tmp->next=newNode;
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	611a      	str	r2, [r3, #16]
	}
}
 80011a2:	371c      	adds	r7, #28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd90      	pop	{r4, r7, pc}
 80011a8:	200000e8 	.word	0x200000e8

080011ac <deleteBegin>:

void deleteBegin() {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
	struct Node* tmp=head;
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <deleteBegin+0x2c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	607b      	str	r3, [r7, #4]
	if(tmp==NULL) return;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d008      	beq.n	80011d0 <deleteBegin+0x24>
	head=head->next;
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <deleteBegin+0x2c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	691b      	ldr	r3, [r3, #16]
 80011c4:	4a04      	ldr	r2, [pc, #16]	; (80011d8 <deleteBegin+0x2c>)
 80011c6:	6013      	str	r3, [r2, #0]
	free(tmp);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f001 fd73 	bl	8002cb4 <free>
 80011ce:	e000      	b.n	80011d2 <deleteBegin+0x26>
	if(tmp==NULL) return;
 80011d0:	bf00      	nop
}
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	200000e8 	.word	0x200000e8

080011dc <SCH_Add_Task>:

void SCH_Add_Task(void (*p_function)(), uint32_t DELAY, uint32_t PERIOD){
 80011dc:	b580      	push	{r7, lr}
 80011de:	b088      	sub	sp, #32
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
	sTask newTask;
	newTask.pTask=p_function;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	613b      	str	r3, [r7, #16]
	newTask.Delay=DELAY;
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	617b      	str	r3, [r7, #20]
	newTask.Period=PERIOD;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	61bb      	str	r3, [r7, #24]
	if(newTask.Delay==0) {
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d102      	bne.n	8001200 <SCH_Add_Task+0x24>
		newTask.RunMe=1;
 80011fa:	2301      	movs	r3, #1
 80011fc:	773b      	strb	r3, [r7, #28]
 80011fe:	e001      	b.n	8001204 <SCH_Add_Task+0x28>
	}
	else {
		newTask.RunMe=0;
 8001200:	2300      	movs	r3, #0
 8001202:	773b      	strb	r3, [r7, #28]
	}
	addNode(newTask);
 8001204:	f107 0310 	add.w	r3, r7, #16
 8001208:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800120a:	f7ff ff5b 	bl	80010c4 <addNode>
}
 800120e:	bf00      	nop
 8001210:	3720      	adds	r7, #32
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <SCH_Update>:

void SCH_Update(void) {
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
	if(head==NULL) return;
 800121c:	4b10      	ldr	r3, [pc, #64]	; (8001260 <SCH_Update+0x48>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d018      	beq.n	8001256 <SCH_Update+0x3e>
	if(head->data.Delay <=0) {
 8001224:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <SCH_Update+0x48>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d104      	bne.n	8001238 <SCH_Update+0x20>
		head->data.RunMe=1;
 800122e:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <SCH_Update+0x48>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2201      	movs	r2, #1
 8001234:	731a      	strb	r2, [r3, #12]
 8001236:	e00f      	b.n	8001258 <SCH_Update+0x40>
	}
	else {
		head->data.Delay--;
 8001238:	4b09      	ldr	r3, [pc, #36]	; (8001260 <SCH_Update+0x48>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	685a      	ldr	r2, [r3, #4]
 800123e:	3a01      	subs	r2, #1
 8001240:	605a      	str	r2, [r3, #4]
		if(head->data.Delay <=0) head->data.RunMe=1;
 8001242:	4b07      	ldr	r3, [pc, #28]	; (8001260 <SCH_Update+0x48>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d105      	bne.n	8001258 <SCH_Update+0x40>
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <SCH_Update+0x48>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2201      	movs	r2, #1
 8001252:	731a      	strb	r2, [r3, #12]
 8001254:	e000      	b.n	8001258 <SCH_Update+0x40>
	if(head==NULL) return;
 8001256:	bf00      	nop
	}
}
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	200000e8 	.word	0x200000e8

08001264 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 8001264:	b590      	push	{r4, r7, lr}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
	if(head==NULL) return;
 800126a:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <SCH_Dispatch_Tasks+0x54>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d01e      	beq.n	80012b0 <SCH_Dispatch_Tasks+0x4c>
	if(head->data.RunMe > 0) {
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <SCH_Dispatch_Tasks+0x54>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	7b1b      	ldrb	r3, [r3, #12]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d014      	beq.n	80012a6 <SCH_Dispatch_Tasks+0x42>
		(*head->data.pTask)();
 800127c:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <SCH_Dispatch_Tasks+0x54>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4798      	blx	r3
		sTask newTask=head->data;
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <SCH_Dispatch_Tasks+0x54>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	463c      	mov	r4, r7
 800128a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800128c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		deleteBegin();
 8001290:	f7ff ff8c 	bl	80011ac <deleteBegin>
		if(newTask.Period !=0) {
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d005      	beq.n	80012a6 <SCH_Dispatch_Tasks+0x42>
			SCH_Add_Task(newTask.pTask, newTask.Period, newTask.Period);
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	68b9      	ldr	r1, [r7, #8]
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff9b 	bl	80011dc <SCH_Add_Task>
		}
	}
	 HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80012a6:	2101      	movs	r1, #1
 80012a8:	2000      	movs	r0, #0
 80012aa:	f000 fcf1 	bl	8001c90 <HAL_PWR_EnterSLEEPMode>
 80012ae:	e000      	b.n	80012b2 <SCH_Dispatch_Tasks+0x4e>
	if(head==NULL) return;
 80012b0:	bf00      	nop
}
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd90      	pop	{r4, r7, pc}
 80012b8:	200000e8 	.word	0x200000e8

080012bc <setTimer1>:
int timer3_flag = 0;
int timer4_counter=0;
int timer4_flag = 0;
int timer5_counter=0;
int timer5_flag = 0;
void setTimer1(int duration){
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 80012c4:	4a05      	ldr	r2, [pc, #20]	; (80012dc <setTimer1+0x20>)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80012ca:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <setTimer1+0x24>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	200000ec 	.word	0x200000ec
 80012e0:	200000f0 	.word	0x200000f0

080012e4 <setTimer2>:

void setTimer2(int duration){
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 80012ec:	4a05      	ldr	r2, [pc, #20]	; (8001304 <setTimer2+0x20>)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80012f2:	4b05      	ldr	r3, [pc, #20]	; (8001308 <setTimer2+0x24>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	200000f4 	.word	0x200000f4
 8001308:	200000f8 	.word	0x200000f8

0800130c <setTimer3>:

void setTimer3(int duration){
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 8001314:	4a05      	ldr	r2, [pc, #20]	; (800132c <setTimer3+0x20>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800131a:	4b05      	ldr	r3, [pc, #20]	; (8001330 <setTimer3+0x24>)
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	200000fc 	.word	0x200000fc
 8001330:	20000100 	.word	0x20000100

08001334 <setTimer4>:

void setTimer4(int duration){
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	timer4_counter = duration;
 800133c:	4a05      	ldr	r2, [pc, #20]	; (8001354 <setTimer4+0x20>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8001342:	4b05      	ldr	r3, [pc, #20]	; (8001358 <setTimer4+0x24>)
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	20000104 	.word	0x20000104
 8001358:	20000108 	.word	0x20000108

0800135c <setTimer5>:

void setTimer5(int duration){
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	timer5_counter = duration;
 8001364:	4a05      	ldr	r2, [pc, #20]	; (800137c <setTimer5+0x20>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <setTimer5+0x24>)
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	2000010c 	.word	0x2000010c
 8001380:	20000110 	.word	0x20000110

08001384 <timerRun>:
void timerRun(){
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8001388:	4b29      	ldr	r3, [pc, #164]	; (8001430 <timerRun+0xac>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	dd0b      	ble.n	80013a8 <timerRun+0x24>
		timer1_counter--;
 8001390:	4b27      	ldr	r3, [pc, #156]	; (8001430 <timerRun+0xac>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	3b01      	subs	r3, #1
 8001396:	4a26      	ldr	r2, [pc, #152]	; (8001430 <timerRun+0xac>)
 8001398:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 800139a:	4b25      	ldr	r3, [pc, #148]	; (8001430 <timerRun+0xac>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	dc02      	bgt.n	80013a8 <timerRun+0x24>
			timer1_flag = 1;
 80013a2:	4b24      	ldr	r3, [pc, #144]	; (8001434 <timerRun+0xb0>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter>0) {
 80013a8:	4b23      	ldr	r3, [pc, #140]	; (8001438 <timerRun+0xb4>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	dd0b      	ble.n	80013c8 <timerRun+0x44>
			timer2_counter--;
 80013b0:	4b21      	ldr	r3, [pc, #132]	; (8001438 <timerRun+0xb4>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	3b01      	subs	r3, #1
 80013b6:	4a20      	ldr	r2, [pc, #128]	; (8001438 <timerRun+0xb4>)
 80013b8:	6013      	str	r3, [r2, #0]
			if(timer2_counter <= 0){
 80013ba:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <timerRun+0xb4>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	dc02      	bgt.n	80013c8 <timerRun+0x44>
				timer2_flag = 1;
 80013c2:	4b1e      	ldr	r3, [pc, #120]	; (800143c <timerRun+0xb8>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	601a      	str	r2, [r3, #0]
			}
	}

	if(timer3_counter>0) {
 80013c8:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <timerRun+0xbc>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	dd0b      	ble.n	80013e8 <timerRun+0x64>
				timer3_counter--;
 80013d0:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <timerRun+0xbc>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	3b01      	subs	r3, #1
 80013d6:	4a1a      	ldr	r2, [pc, #104]	; (8001440 <timerRun+0xbc>)
 80013d8:	6013      	str	r3, [r2, #0]
				if(timer3_counter <= 0){
 80013da:	4b19      	ldr	r3, [pc, #100]	; (8001440 <timerRun+0xbc>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	dc02      	bgt.n	80013e8 <timerRun+0x64>
					timer3_flag = 1;
 80013e2:	4b18      	ldr	r3, [pc, #96]	; (8001444 <timerRun+0xc0>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	601a      	str	r2, [r3, #0]
				}
		}

	if(timer4_counter>0) {
 80013e8:	4b17      	ldr	r3, [pc, #92]	; (8001448 <timerRun+0xc4>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	dd0b      	ble.n	8001408 <timerRun+0x84>
		 	 	timer4_counter--;
 80013f0:	4b15      	ldr	r3, [pc, #84]	; (8001448 <timerRun+0xc4>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	3b01      	subs	r3, #1
 80013f6:	4a14      	ldr	r2, [pc, #80]	; (8001448 <timerRun+0xc4>)
 80013f8:	6013      	str	r3, [r2, #0]
				if(timer4_counter <= 0){
 80013fa:	4b13      	ldr	r3, [pc, #76]	; (8001448 <timerRun+0xc4>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	dc02      	bgt.n	8001408 <timerRun+0x84>
					timer4_flag = 1;
 8001402:	4b12      	ldr	r3, [pc, #72]	; (800144c <timerRun+0xc8>)
 8001404:	2201      	movs	r2, #1
 8001406:	601a      	str	r2, [r3, #0]
				}
	}
	if(timer5_counter>0) {
 8001408:	4b11      	ldr	r3, [pc, #68]	; (8001450 <timerRun+0xcc>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	dd0b      	ble.n	8001428 <timerRun+0xa4>
			 	 timer5_counter--;
 8001410:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <timerRun+0xcc>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	3b01      	subs	r3, #1
 8001416:	4a0e      	ldr	r2, [pc, #56]	; (8001450 <timerRun+0xcc>)
 8001418:	6013      	str	r3, [r2, #0]
				if(timer5_counter <= 0){
 800141a:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <timerRun+0xcc>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	dc02      	bgt.n	8001428 <timerRun+0xa4>
					timer5_flag = 1;
 8001422:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <timerRun+0xd0>)
 8001424:	2201      	movs	r2, #1
 8001426:	601a      	str	r2, [r3, #0]
					}
	}

}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	200000ec 	.word	0x200000ec
 8001434:	200000f0 	.word	0x200000f0
 8001438:	200000f4 	.word	0x200000f4
 800143c:	200000f8 	.word	0x200000f8
 8001440:	200000fc 	.word	0x200000fc
 8001444:	20000100 	.word	0x20000100
 8001448:	20000104 	.word	0x20000104
 800144c:	20000108 	.word	0x20000108
 8001450:	2000010c 	.word	0x2000010c
 8001454:	20000110 	.word	0x20000110

08001458 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <HAL_MspInit+0x5c>)
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	4a14      	ldr	r2, [pc, #80]	; (80014b4 <HAL_MspInit+0x5c>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	6193      	str	r3, [r2, #24]
 800146a:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <HAL_MspInit+0x5c>)
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001476:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <HAL_MspInit+0x5c>)
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	4a0e      	ldr	r2, [pc, #56]	; (80014b4 <HAL_MspInit+0x5c>)
 800147c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001480:	61d3      	str	r3, [r2, #28]
 8001482:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <HAL_MspInit+0x5c>)
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <HAL_MspInit+0x60>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	4a04      	ldr	r2, [pc, #16]	; (80014b8 <HAL_MspInit+0x60>)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014aa:	bf00      	nop
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr
 80014b4:	40021000 	.word	0x40021000
 80014b8:	40010000 	.word	0x40010000

080014bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014cc:	d113      	bne.n	80014f6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ce:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <HAL_TIM_Base_MspInit+0x44>)
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	4a0b      	ldr	r2, [pc, #44]	; (8001500 <HAL_TIM_Base_MspInit+0x44>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	61d3      	str	r3, [r2, #28]
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <HAL_TIM_Base_MspInit+0x44>)
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2100      	movs	r1, #0
 80014ea:	201c      	movs	r0, #28
 80014ec:	f000 f9d7 	bl	800189e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014f0:	201c      	movs	r0, #28
 80014f2:	f000 f9f0 	bl	80018d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40021000 	.word	0x40021000

08001504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001508:	e7fe      	b.n	8001508 <NMI_Handler+0x4>

0800150a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800150e:	e7fe      	b.n	800150e <HardFault_Handler+0x4>

08001510 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001514:	e7fe      	b.n	8001514 <MemManage_Handler+0x4>

08001516 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800151a:	e7fe      	b.n	800151a <BusFault_Handler+0x4>

0800151c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001520:	e7fe      	b.n	8001520 <UsageFault_Handler+0x4>

08001522 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr

0800152e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr

0800153a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr

08001546 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800154a:	f000 f8b5 	bl	80016b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001558:	4802      	ldr	r0, [pc, #8]	; (8001564 <TIM2_IRQHandler+0x10>)
 800155a:	f001 f82d 	bl	80025b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000120 	.word	0x20000120

08001568 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001570:	4a14      	ldr	r2, [pc, #80]	; (80015c4 <_sbrk+0x5c>)
 8001572:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <_sbrk+0x60>)
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800157c:	4b13      	ldr	r3, [pc, #76]	; (80015cc <_sbrk+0x64>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d102      	bne.n	800158a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001584:	4b11      	ldr	r3, [pc, #68]	; (80015cc <_sbrk+0x64>)
 8001586:	4a12      	ldr	r2, [pc, #72]	; (80015d0 <_sbrk+0x68>)
 8001588:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <_sbrk+0x64>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4413      	add	r3, r2
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	429a      	cmp	r2, r3
 8001596:	d207      	bcs.n	80015a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001598:	f001 fb5a 	bl	8002c50 <__errno>
 800159c:	4603      	mov	r3, r0
 800159e:	220c      	movs	r2, #12
 80015a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015a2:	f04f 33ff 	mov.w	r3, #4294967295
 80015a6:	e009      	b.n	80015bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015a8:	4b08      	ldr	r3, [pc, #32]	; (80015cc <_sbrk+0x64>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ae:	4b07      	ldr	r3, [pc, #28]	; (80015cc <_sbrk+0x64>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	4a05      	ldr	r2, [pc, #20]	; (80015cc <_sbrk+0x64>)
 80015b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ba:	68fb      	ldr	r3, [r7, #12]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20002800 	.word	0x20002800
 80015c8:	00000400 	.word	0x00000400
 80015cc:	20000114 	.word	0x20000114
 80015d0:	20000180 	.word	0x20000180

080015d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr

080015e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015e0:	f7ff fff8 	bl	80015d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015e4:	480b      	ldr	r0, [pc, #44]	; (8001614 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015e6:	490c      	ldr	r1, [pc, #48]	; (8001618 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015e8:	4a0c      	ldr	r2, [pc, #48]	; (800161c <LoopFillZerobss+0x16>)
  movs r3, #0
 80015ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015ec:	e002      	b.n	80015f4 <LoopCopyDataInit>

080015ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f2:	3304      	adds	r3, #4

080015f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f8:	d3f9      	bcc.n	80015ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fa:	4a09      	ldr	r2, [pc, #36]	; (8001620 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015fc:	4c09      	ldr	r4, [pc, #36]	; (8001624 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001600:	e001      	b.n	8001606 <LoopFillZerobss>

08001602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001604:	3204      	adds	r2, #4

08001606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001608:	d3fb      	bcc.n	8001602 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800160a:	f001 fb27 	bl	8002c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800160e:	f7ff fc13 	bl	8000e38 <main>
  bx lr
 8001612:	4770      	bx	lr
  ldr r0, =_sdata
 8001614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001618:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 800161c:	08002ea0 	.word	0x08002ea0
  ldr r2, =_sbss
 8001620:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001624:	2000017c 	.word	0x2000017c

08001628 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001628:	e7fe      	b.n	8001628 <ADC1_2_IRQHandler>
	...

0800162c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <HAL_Init+0x28>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a07      	ldr	r2, [pc, #28]	; (8001654 <HAL_Init+0x28>)
 8001636:	f043 0310 	orr.w	r3, r3, #16
 800163a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800163c:	2003      	movs	r0, #3
 800163e:	f000 f923 	bl	8001888 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001642:	200f      	movs	r0, #15
 8001644:	f000 f808 	bl	8001658 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001648:	f7ff ff06 	bl	8001458 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40022000 	.word	0x40022000

08001658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001660:	4b12      	ldr	r3, [pc, #72]	; (80016ac <HAL_InitTick+0x54>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <HAL_InitTick+0x58>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	4619      	mov	r1, r3
 800166a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800166e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001672:	fbb2 f3f3 	udiv	r3, r2, r3
 8001676:	4618      	mov	r0, r3
 8001678:	f000 f93b 	bl	80018f2 <HAL_SYSTICK_Config>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e00e      	b.n	80016a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b0f      	cmp	r3, #15
 800168a:	d80a      	bhi.n	80016a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800168c:	2200      	movs	r2, #0
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	f04f 30ff 	mov.w	r0, #4294967295
 8001694:	f000 f903 	bl	800189e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001698:	4a06      	ldr	r2, [pc, #24]	; (80016b4 <HAL_InitTick+0x5c>)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800169e:	2300      	movs	r3, #0
 80016a0:	e000      	b.n	80016a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	2000001c 	.word	0x2000001c
 80016b0:	20000024 	.word	0x20000024
 80016b4:	20000020 	.word	0x20000020

080016b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016bc:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <HAL_IncTick+0x1c>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	461a      	mov	r2, r3
 80016c2:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <HAL_IncTick+0x20>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4413      	add	r3, r2
 80016c8:	4a03      	ldr	r2, [pc, #12]	; (80016d8 <HAL_IncTick+0x20>)
 80016ca:	6013      	str	r3, [r2, #0]
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr
 80016d4:	20000024 	.word	0x20000024
 80016d8:	20000168 	.word	0x20000168

080016dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return uwTick;
 80016e0:	4b02      	ldr	r3, [pc, #8]	; (80016ec <HAL_GetTick+0x10>)
 80016e2:	681b      	ldr	r3, [r3, #0]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr
 80016ec:	20000168 	.word	0x20000168

080016f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <__NVIC_SetPriorityGrouping+0x44>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800170c:	4013      	ands	r3, r2
 800170e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001718:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800171c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001722:	4a04      	ldr	r2, [pc, #16]	; (8001734 <__NVIC_SetPriorityGrouping+0x44>)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	60d3      	str	r3, [r2, #12]
}
 8001728:	bf00      	nop
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800173c:	4b04      	ldr	r3, [pc, #16]	; (8001750 <__NVIC_GetPriorityGrouping+0x18>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	0a1b      	lsrs	r3, r3, #8
 8001742:	f003 0307 	and.w	r3, r3, #7
}
 8001746:	4618      	mov	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	2b00      	cmp	r3, #0
 8001764:	db0b      	blt.n	800177e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	f003 021f 	and.w	r2, r3, #31
 800176c:	4906      	ldr	r1, [pc, #24]	; (8001788 <__NVIC_EnableIRQ+0x34>)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	095b      	lsrs	r3, r3, #5
 8001774:	2001      	movs	r0, #1
 8001776:	fa00 f202 	lsl.w	r2, r0, r2
 800177a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr
 8001788:	e000e100 	.word	0xe000e100

0800178c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	6039      	str	r1, [r7, #0]
 8001796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179c:	2b00      	cmp	r3, #0
 800179e:	db0a      	blt.n	80017b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	490c      	ldr	r1, [pc, #48]	; (80017d8 <__NVIC_SetPriority+0x4c>)
 80017a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017aa:	0112      	lsls	r2, r2, #4
 80017ac:	b2d2      	uxtb	r2, r2
 80017ae:	440b      	add	r3, r1
 80017b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b4:	e00a      	b.n	80017cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	4908      	ldr	r1, [pc, #32]	; (80017dc <__NVIC_SetPriority+0x50>)
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	f003 030f 	and.w	r3, r3, #15
 80017c2:	3b04      	subs	r3, #4
 80017c4:	0112      	lsls	r2, r2, #4
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	440b      	add	r3, r1
 80017ca:	761a      	strb	r2, [r3, #24]
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	e000e100 	.word	0xe000e100
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b089      	sub	sp, #36	; 0x24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	f1c3 0307 	rsb	r3, r3, #7
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	bf28      	it	cs
 80017fe:	2304      	movcs	r3, #4
 8001800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3304      	adds	r3, #4
 8001806:	2b06      	cmp	r3, #6
 8001808:	d902      	bls.n	8001810 <NVIC_EncodePriority+0x30>
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3b03      	subs	r3, #3
 800180e:	e000      	b.n	8001812 <NVIC_EncodePriority+0x32>
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001814:	f04f 32ff 	mov.w	r2, #4294967295
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43da      	mvns	r2, r3
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	401a      	ands	r2, r3
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001828:	f04f 31ff 	mov.w	r1, #4294967295
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	fa01 f303 	lsl.w	r3, r1, r3
 8001832:	43d9      	mvns	r1, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001838:	4313      	orrs	r3, r2
         );
}
 800183a:	4618      	mov	r0, r3
 800183c:	3724      	adds	r7, #36	; 0x24
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr

08001844 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3b01      	subs	r3, #1
 8001850:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001854:	d301      	bcc.n	800185a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001856:	2301      	movs	r3, #1
 8001858:	e00f      	b.n	800187a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800185a:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <SysTick_Config+0x40>)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3b01      	subs	r3, #1
 8001860:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001862:	210f      	movs	r1, #15
 8001864:	f04f 30ff 	mov.w	r0, #4294967295
 8001868:	f7ff ff90 	bl	800178c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800186c:	4b05      	ldr	r3, [pc, #20]	; (8001884 <SysTick_Config+0x40>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001872:	4b04      	ldr	r3, [pc, #16]	; (8001884 <SysTick_Config+0x40>)
 8001874:	2207      	movs	r2, #7
 8001876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	e000e010 	.word	0xe000e010

08001888 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff ff2d 	bl	80016f0 <__NVIC_SetPriorityGrouping>
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800189e:	b580      	push	{r7, lr}
 80018a0:	b086      	sub	sp, #24
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	4603      	mov	r3, r0
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
 80018aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018b0:	f7ff ff42 	bl	8001738 <__NVIC_GetPriorityGrouping>
 80018b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	68b9      	ldr	r1, [r7, #8]
 80018ba:	6978      	ldr	r0, [r7, #20]
 80018bc:	f7ff ff90 	bl	80017e0 <NVIC_EncodePriority>
 80018c0:	4602      	mov	r2, r0
 80018c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c6:	4611      	mov	r1, r2
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff5f 	bl	800178c <__NVIC_SetPriority>
}
 80018ce:	bf00      	nop
 80018d0:	3718      	adds	r7, #24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	4603      	mov	r3, r0
 80018de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ff35 	bl	8001754 <__NVIC_EnableIRQ>
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff ffa2 	bl	8001844 <SysTick_Config>
 8001900:	4603      	mov	r3, r0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800190c:	b480      	push	{r7}
 800190e:	b08b      	sub	sp, #44	; 0x2c
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001916:	2300      	movs	r3, #0
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800191a:	2300      	movs	r3, #0
 800191c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800191e:	e148      	b.n	8001bb2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001920:	2201      	movs	r2, #1
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	69fa      	ldr	r2, [r7, #28]
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	429a      	cmp	r2, r3
 800193a:	f040 8137 	bne.w	8001bac <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	4aa3      	ldr	r2, [pc, #652]	; (8001bd0 <HAL_GPIO_Init+0x2c4>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d05e      	beq.n	8001a06 <HAL_GPIO_Init+0xfa>
 8001948:	4aa1      	ldr	r2, [pc, #644]	; (8001bd0 <HAL_GPIO_Init+0x2c4>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d875      	bhi.n	8001a3a <HAL_GPIO_Init+0x12e>
 800194e:	4aa1      	ldr	r2, [pc, #644]	; (8001bd4 <HAL_GPIO_Init+0x2c8>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d058      	beq.n	8001a06 <HAL_GPIO_Init+0xfa>
 8001954:	4a9f      	ldr	r2, [pc, #636]	; (8001bd4 <HAL_GPIO_Init+0x2c8>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d86f      	bhi.n	8001a3a <HAL_GPIO_Init+0x12e>
 800195a:	4a9f      	ldr	r2, [pc, #636]	; (8001bd8 <HAL_GPIO_Init+0x2cc>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d052      	beq.n	8001a06 <HAL_GPIO_Init+0xfa>
 8001960:	4a9d      	ldr	r2, [pc, #628]	; (8001bd8 <HAL_GPIO_Init+0x2cc>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d869      	bhi.n	8001a3a <HAL_GPIO_Init+0x12e>
 8001966:	4a9d      	ldr	r2, [pc, #628]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d04c      	beq.n	8001a06 <HAL_GPIO_Init+0xfa>
 800196c:	4a9b      	ldr	r2, [pc, #620]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d863      	bhi.n	8001a3a <HAL_GPIO_Init+0x12e>
 8001972:	4a9b      	ldr	r2, [pc, #620]	; (8001be0 <HAL_GPIO_Init+0x2d4>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d046      	beq.n	8001a06 <HAL_GPIO_Init+0xfa>
 8001978:	4a99      	ldr	r2, [pc, #612]	; (8001be0 <HAL_GPIO_Init+0x2d4>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d85d      	bhi.n	8001a3a <HAL_GPIO_Init+0x12e>
 800197e:	2b12      	cmp	r3, #18
 8001980:	d82a      	bhi.n	80019d8 <HAL_GPIO_Init+0xcc>
 8001982:	2b12      	cmp	r3, #18
 8001984:	d859      	bhi.n	8001a3a <HAL_GPIO_Init+0x12e>
 8001986:	a201      	add	r2, pc, #4	; (adr r2, 800198c <HAL_GPIO_Init+0x80>)
 8001988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800198c:	08001a07 	.word	0x08001a07
 8001990:	080019e1 	.word	0x080019e1
 8001994:	080019f3 	.word	0x080019f3
 8001998:	08001a35 	.word	0x08001a35
 800199c:	08001a3b 	.word	0x08001a3b
 80019a0:	08001a3b 	.word	0x08001a3b
 80019a4:	08001a3b 	.word	0x08001a3b
 80019a8:	08001a3b 	.word	0x08001a3b
 80019ac:	08001a3b 	.word	0x08001a3b
 80019b0:	08001a3b 	.word	0x08001a3b
 80019b4:	08001a3b 	.word	0x08001a3b
 80019b8:	08001a3b 	.word	0x08001a3b
 80019bc:	08001a3b 	.word	0x08001a3b
 80019c0:	08001a3b 	.word	0x08001a3b
 80019c4:	08001a3b 	.word	0x08001a3b
 80019c8:	08001a3b 	.word	0x08001a3b
 80019cc:	08001a3b 	.word	0x08001a3b
 80019d0:	080019e9 	.word	0x080019e9
 80019d4:	080019fd 	.word	0x080019fd
 80019d8:	4a82      	ldr	r2, [pc, #520]	; (8001be4 <HAL_GPIO_Init+0x2d8>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d013      	beq.n	8001a06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019de:	e02c      	b.n	8001a3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	623b      	str	r3, [r7, #32]
          break;
 80019e6:	e029      	b.n	8001a3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	3304      	adds	r3, #4
 80019ee:	623b      	str	r3, [r7, #32]
          break;
 80019f0:	e024      	b.n	8001a3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	3308      	adds	r3, #8
 80019f8:	623b      	str	r3, [r7, #32]
          break;
 80019fa:	e01f      	b.n	8001a3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	330c      	adds	r3, #12
 8001a02:	623b      	str	r3, [r7, #32]
          break;
 8001a04:	e01a      	b.n	8001a3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d102      	bne.n	8001a14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a0e:	2304      	movs	r3, #4
 8001a10:	623b      	str	r3, [r7, #32]
          break;
 8001a12:	e013      	b.n	8001a3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d105      	bne.n	8001a28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a1c:	2308      	movs	r3, #8
 8001a1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	69fa      	ldr	r2, [r7, #28]
 8001a24:	611a      	str	r2, [r3, #16]
          break;
 8001a26:	e009      	b.n	8001a3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a28:	2308      	movs	r3, #8
 8001a2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69fa      	ldr	r2, [r7, #28]
 8001a30:	615a      	str	r2, [r3, #20]
          break;
 8001a32:	e003      	b.n	8001a3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a34:	2300      	movs	r3, #0
 8001a36:	623b      	str	r3, [r7, #32]
          break;
 8001a38:	e000      	b.n	8001a3c <HAL_GPIO_Init+0x130>
          break;
 8001a3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	2bff      	cmp	r3, #255	; 0xff
 8001a40:	d801      	bhi.n	8001a46 <HAL_GPIO_Init+0x13a>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	e001      	b.n	8001a4a <HAL_GPIO_Init+0x13e>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3304      	adds	r3, #4
 8001a4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	2bff      	cmp	r3, #255	; 0xff
 8001a50:	d802      	bhi.n	8001a58 <HAL_GPIO_Init+0x14c>
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	e002      	b.n	8001a5e <HAL_GPIO_Init+0x152>
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	3b08      	subs	r3, #8
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	210f      	movs	r1, #15
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	401a      	ands	r2, r3
 8001a70:	6a39      	ldr	r1, [r7, #32]
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	fa01 f303 	lsl.w	r3, r1, r3
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 8090 	beq.w	8001bac <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a8c:	4b56      	ldr	r3, [pc, #344]	; (8001be8 <HAL_GPIO_Init+0x2dc>)
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	4a55      	ldr	r2, [pc, #340]	; (8001be8 <HAL_GPIO_Init+0x2dc>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	6193      	str	r3, [r2, #24]
 8001a98:	4b53      	ldr	r3, [pc, #332]	; (8001be8 <HAL_GPIO_Init+0x2dc>)
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	60bb      	str	r3, [r7, #8]
 8001aa2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001aa4:	4a51      	ldr	r2, [pc, #324]	; (8001bec <HAL_GPIO_Init+0x2e0>)
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	089b      	lsrs	r3, r3, #2
 8001aaa:	3302      	adds	r3, #2
 8001aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	f003 0303 	and.w	r3, r3, #3
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	220f      	movs	r2, #15
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a49      	ldr	r2, [pc, #292]	; (8001bf0 <HAL_GPIO_Init+0x2e4>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d00d      	beq.n	8001aec <HAL_GPIO_Init+0x1e0>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a48      	ldr	r2, [pc, #288]	; (8001bf4 <HAL_GPIO_Init+0x2e8>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d007      	beq.n	8001ae8 <HAL_GPIO_Init+0x1dc>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a47      	ldr	r2, [pc, #284]	; (8001bf8 <HAL_GPIO_Init+0x2ec>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d101      	bne.n	8001ae4 <HAL_GPIO_Init+0x1d8>
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	e004      	b.n	8001aee <HAL_GPIO_Init+0x1e2>
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e002      	b.n	8001aee <HAL_GPIO_Init+0x1e2>
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e000      	b.n	8001aee <HAL_GPIO_Init+0x1e2>
 8001aec:	2300      	movs	r3, #0
 8001aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001af0:	f002 0203 	and.w	r2, r2, #3
 8001af4:	0092      	lsls	r2, r2, #2
 8001af6:	4093      	lsls	r3, r2
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001afe:	493b      	ldr	r1, [pc, #236]	; (8001bec <HAL_GPIO_Init+0x2e0>)
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	089b      	lsrs	r3, r3, #2
 8001b04:	3302      	adds	r3, #2
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d006      	beq.n	8001b26 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b18:	4b38      	ldr	r3, [pc, #224]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	4937      	ldr	r1, [pc, #220]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	608b      	str	r3, [r1, #8]
 8001b24:	e006      	b.n	8001b34 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b26:	4b35      	ldr	r3, [pc, #212]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	4933      	ldr	r1, [pc, #204]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001b30:	4013      	ands	r3, r2
 8001b32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d006      	beq.n	8001b4e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b40:	4b2e      	ldr	r3, [pc, #184]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001b42:	68da      	ldr	r2, [r3, #12]
 8001b44:	492d      	ldr	r1, [pc, #180]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	60cb      	str	r3, [r1, #12]
 8001b4c:	e006      	b.n	8001b5c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b4e:	4b2b      	ldr	r3, [pc, #172]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001b50:	68da      	ldr	r2, [r3, #12]
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	4929      	ldr	r1, [pc, #164]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d006      	beq.n	8001b76 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b68:	4b24      	ldr	r3, [pc, #144]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	4923      	ldr	r1, [pc, #140]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	604b      	str	r3, [r1, #4]
 8001b74:	e006      	b.n	8001b84 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b76:	4b21      	ldr	r3, [pc, #132]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	491f      	ldr	r1, [pc, #124]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001b80:	4013      	ands	r3, r2
 8001b82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d006      	beq.n	8001b9e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b90:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4919      	ldr	r1, [pc, #100]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	600b      	str	r3, [r1, #0]
 8001b9c:	e006      	b.n	8001bac <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b9e:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	4915      	ldr	r1, [pc, #84]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001ba8:	4013      	ands	r3, r2
 8001baa:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bae:	3301      	adds	r3, #1
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f47f aeaf 	bne.w	8001920 <HAL_GPIO_Init+0x14>
  }
}
 8001bc2:	bf00      	nop
 8001bc4:	bf00      	nop
 8001bc6:	372c      	adds	r7, #44	; 0x2c
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	10320000 	.word	0x10320000
 8001bd4:	10310000 	.word	0x10310000
 8001bd8:	10220000 	.word	0x10220000
 8001bdc:	10210000 	.word	0x10210000
 8001be0:	10120000 	.word	0x10120000
 8001be4:	10110000 	.word	0x10110000
 8001be8:	40021000 	.word	0x40021000
 8001bec:	40010000 	.word	0x40010000
 8001bf0:	40010800 	.word	0x40010800
 8001bf4:	40010c00 	.word	0x40010c00
 8001bf8:	40011000 	.word	0x40011000
 8001bfc:	40010400 	.word	0x40010400

08001c00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	887b      	ldrh	r3, [r7, #2]
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d002      	beq.n	8001c1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	73fb      	strb	r3, [r7, #15]
 8001c1c:	e001      	b.n	8001c22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bc80      	pop	{r7}
 8001c2c:	4770      	bx	lr

08001c2e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
 8001c36:	460b      	mov	r3, r1
 8001c38:	807b      	strh	r3, [r7, #2]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c3e:	787b      	ldrb	r3, [r7, #1]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c44:	887a      	ldrh	r2, [r7, #2]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c4a:	e003      	b.n	8001c54 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c4c:	887b      	ldrh	r3, [r7, #2]
 8001c4e:	041a      	lsls	r2, r3, #16
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	611a      	str	r2, [r3, #16]
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc80      	pop	{r7}
 8001c5c:	4770      	bx	lr

08001c5e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b085      	sub	sp, #20
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	460b      	mov	r3, r1
 8001c68:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c70:	887a      	ldrh	r2, [r7, #2]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	4013      	ands	r3, r2
 8001c76:	041a      	lsls	r2, r3, #16
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	43d9      	mvns	r1, r3
 8001c7c:	887b      	ldrh	r3, [r7, #2]
 8001c7e:	400b      	ands	r3, r1
 8001c80:	431a      	orrs	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	611a      	str	r2, [r3, #16]
}
 8001c86:	bf00      	nop
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr

08001c90 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001c9c:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <HAL_PWR_EnterSLEEPMode+0x34>)
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	4a08      	ldr	r2, [pc, #32]	; (8001cc4 <HAL_PWR_EnterSLEEPMode+0x34>)
 8001ca2:	f023 0304 	bic.w	r3, r3, #4
 8001ca6:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001ca8:	78fb      	ldrb	r3, [r7, #3]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d101      	bne.n	8001cb2 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001cae:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8001cb0:	e002      	b.n	8001cb8 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8001cb2:	bf40      	sev
    __WFE();
 8001cb4:	bf20      	wfe
    __WFE();
 8001cb6:	bf20      	wfe
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e26c      	b.n	80021b4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f000 8087 	beq.w	8001df6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ce8:	4b92      	ldr	r3, [pc, #584]	; (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 030c 	and.w	r3, r3, #12
 8001cf0:	2b04      	cmp	r3, #4
 8001cf2:	d00c      	beq.n	8001d0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cf4:	4b8f      	ldr	r3, [pc, #572]	; (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 030c 	and.w	r3, r3, #12
 8001cfc:	2b08      	cmp	r3, #8
 8001cfe:	d112      	bne.n	8001d26 <HAL_RCC_OscConfig+0x5e>
 8001d00:	4b8c      	ldr	r3, [pc, #560]	; (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d0c:	d10b      	bne.n	8001d26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d0e:	4b89      	ldr	r3, [pc, #548]	; (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d06c      	beq.n	8001df4 <HAL_RCC_OscConfig+0x12c>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d168      	bne.n	8001df4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e246      	b.n	80021b4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d2e:	d106      	bne.n	8001d3e <HAL_RCC_OscConfig+0x76>
 8001d30:	4b80      	ldr	r3, [pc, #512]	; (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a7f      	ldr	r2, [pc, #508]	; (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d3a:	6013      	str	r3, [r2, #0]
 8001d3c:	e02e      	b.n	8001d9c <HAL_RCC_OscConfig+0xd4>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10c      	bne.n	8001d60 <HAL_RCC_OscConfig+0x98>
 8001d46:	4b7b      	ldr	r3, [pc, #492]	; (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a7a      	ldr	r2, [pc, #488]	; (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	4b78      	ldr	r3, [pc, #480]	; (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a77      	ldr	r2, [pc, #476]	; (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	e01d      	b.n	8001d9c <HAL_RCC_OscConfig+0xd4>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d68:	d10c      	bne.n	8001d84 <HAL_RCC_OscConfig+0xbc>
 8001d6a:	4b72      	ldr	r3, [pc, #456]	; (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a71      	ldr	r2, [pc, #452]	; (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	4b6f      	ldr	r3, [pc, #444]	; (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a6e      	ldr	r2, [pc, #440]	; (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	e00b      	b.n	8001d9c <HAL_RCC_OscConfig+0xd4>
 8001d84:	4b6b      	ldr	r3, [pc, #428]	; (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a6a      	ldr	r2, [pc, #424]	; (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d8e:	6013      	str	r3, [r2, #0]
 8001d90:	4b68      	ldr	r3, [pc, #416]	; (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a67      	ldr	r2, [pc, #412]	; (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d013      	beq.n	8001dcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da4:	f7ff fc9a 	bl	80016dc <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dac:	f7ff fc96 	bl	80016dc <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b64      	cmp	r3, #100	; 0x64
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e1fa      	b.n	80021b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dbe:	4b5d      	ldr	r3, [pc, #372]	; (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0f0      	beq.n	8001dac <HAL_RCC_OscConfig+0xe4>
 8001dca:	e014      	b.n	8001df6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dcc:	f7ff fc86 	bl	80016dc <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd4:	f7ff fc82 	bl	80016dc <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b64      	cmp	r3, #100	; 0x64
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e1e6      	b.n	80021b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001de6:	4b53      	ldr	r3, [pc, #332]	; (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1f0      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x10c>
 8001df2:	e000      	b.n	8001df6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d063      	beq.n	8001eca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e02:	4b4c      	ldr	r3, [pc, #304]	; (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f003 030c 	and.w	r3, r3, #12
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00b      	beq.n	8001e26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e0e:	4b49      	ldr	r3, [pc, #292]	; (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 030c 	and.w	r3, r3, #12
 8001e16:	2b08      	cmp	r3, #8
 8001e18:	d11c      	bne.n	8001e54 <HAL_RCC_OscConfig+0x18c>
 8001e1a:	4b46      	ldr	r3, [pc, #280]	; (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d116      	bne.n	8001e54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e26:	4b43      	ldr	r3, [pc, #268]	; (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d005      	beq.n	8001e3e <HAL_RCC_OscConfig+0x176>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d001      	beq.n	8001e3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e1ba      	b.n	80021b4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3e:	4b3d      	ldr	r3, [pc, #244]	; (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4939      	ldr	r1, [pc, #228]	; (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e52:	e03a      	b.n	8001eca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d020      	beq.n	8001e9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e5c:	4b36      	ldr	r3, [pc, #216]	; (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e62:	f7ff fc3b 	bl	80016dc <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e6a:	f7ff fc37 	bl	80016dc <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e19b      	b.n	80021b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e7c:	4b2d      	ldr	r3, [pc, #180]	; (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0f0      	beq.n	8001e6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e88:	4b2a      	ldr	r3, [pc, #168]	; (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	4927      	ldr	r1, [pc, #156]	; (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	600b      	str	r3, [r1, #0]
 8001e9c:	e015      	b.n	8001eca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e9e:	4b26      	ldr	r3, [pc, #152]	; (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea4:	f7ff fc1a 	bl	80016dc <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eac:	f7ff fc16 	bl	80016dc <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e17a      	b.n	80021b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ebe:	4b1d      	ldr	r3, [pc, #116]	; (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f0      	bne.n	8001eac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0308 	and.w	r3, r3, #8
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d03a      	beq.n	8001f4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d019      	beq.n	8001f12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ede:	4b17      	ldr	r3, [pc, #92]	; (8001f3c <HAL_RCC_OscConfig+0x274>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee4:	f7ff fbfa 	bl	80016dc <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eec:	f7ff fbf6 	bl	80016dc <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e15a      	b.n	80021b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001efe:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0f0      	beq.n	8001eec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f0a:	2001      	movs	r0, #1
 8001f0c:	f000 fa9a 	bl	8002444 <RCC_Delay>
 8001f10:	e01c      	b.n	8001f4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f12:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <HAL_RCC_OscConfig+0x274>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f18:	f7ff fbe0 	bl	80016dc <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f1e:	e00f      	b.n	8001f40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f20:	f7ff fbdc 	bl	80016dc <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d908      	bls.n	8001f40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e140      	b.n	80021b4 <HAL_RCC_OscConfig+0x4ec>
 8001f32:	bf00      	nop
 8001f34:	40021000 	.word	0x40021000
 8001f38:	42420000 	.word	0x42420000
 8001f3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f40:	4b9e      	ldr	r3, [pc, #632]	; (80021bc <HAL_RCC_OscConfig+0x4f4>)
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1e9      	bne.n	8001f20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 80a6 	beq.w	80020a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f5e:	4b97      	ldr	r3, [pc, #604]	; (80021bc <HAL_RCC_OscConfig+0x4f4>)
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10d      	bne.n	8001f86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f6a:	4b94      	ldr	r3, [pc, #592]	; (80021bc <HAL_RCC_OscConfig+0x4f4>)
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	4a93      	ldr	r2, [pc, #588]	; (80021bc <HAL_RCC_OscConfig+0x4f4>)
 8001f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f74:	61d3      	str	r3, [r2, #28]
 8001f76:	4b91      	ldr	r3, [pc, #580]	; (80021bc <HAL_RCC_OscConfig+0x4f4>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f82:	2301      	movs	r3, #1
 8001f84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f86:	4b8e      	ldr	r3, [pc, #568]	; (80021c0 <HAL_RCC_OscConfig+0x4f8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d118      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f92:	4b8b      	ldr	r3, [pc, #556]	; (80021c0 <HAL_RCC_OscConfig+0x4f8>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a8a      	ldr	r2, [pc, #552]	; (80021c0 <HAL_RCC_OscConfig+0x4f8>)
 8001f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f9e:	f7ff fb9d 	bl	80016dc <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa6:	f7ff fb99 	bl	80016dc <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b64      	cmp	r3, #100	; 0x64
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e0fd      	b.n	80021b4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb8:	4b81      	ldr	r3, [pc, #516]	; (80021c0 <HAL_RCC_OscConfig+0x4f8>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0f0      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d106      	bne.n	8001fda <HAL_RCC_OscConfig+0x312>
 8001fcc:	4b7b      	ldr	r3, [pc, #492]	; (80021bc <HAL_RCC_OscConfig+0x4f4>)
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	4a7a      	ldr	r2, [pc, #488]	; (80021bc <HAL_RCC_OscConfig+0x4f4>)
 8001fd2:	f043 0301 	orr.w	r3, r3, #1
 8001fd6:	6213      	str	r3, [r2, #32]
 8001fd8:	e02d      	b.n	8002036 <HAL_RCC_OscConfig+0x36e>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10c      	bne.n	8001ffc <HAL_RCC_OscConfig+0x334>
 8001fe2:	4b76      	ldr	r3, [pc, #472]	; (80021bc <HAL_RCC_OscConfig+0x4f4>)
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	4a75      	ldr	r2, [pc, #468]	; (80021bc <HAL_RCC_OscConfig+0x4f4>)
 8001fe8:	f023 0301 	bic.w	r3, r3, #1
 8001fec:	6213      	str	r3, [r2, #32]
 8001fee:	4b73      	ldr	r3, [pc, #460]	; (80021bc <HAL_RCC_OscConfig+0x4f4>)
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	4a72      	ldr	r2, [pc, #456]	; (80021bc <HAL_RCC_OscConfig+0x4f4>)
 8001ff4:	f023 0304 	bic.w	r3, r3, #4
 8001ff8:	6213      	str	r3, [r2, #32]
 8001ffa:	e01c      	b.n	8002036 <HAL_RCC_OscConfig+0x36e>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	2b05      	cmp	r3, #5
 8002002:	d10c      	bne.n	800201e <HAL_RCC_OscConfig+0x356>
 8002004:	4b6d      	ldr	r3, [pc, #436]	; (80021bc <HAL_RCC_OscConfig+0x4f4>)
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	4a6c      	ldr	r2, [pc, #432]	; (80021bc <HAL_RCC_OscConfig+0x4f4>)
 800200a:	f043 0304 	orr.w	r3, r3, #4
 800200e:	6213      	str	r3, [r2, #32]
 8002010:	4b6a      	ldr	r3, [pc, #424]	; (80021bc <HAL_RCC_OscConfig+0x4f4>)
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	4a69      	ldr	r2, [pc, #420]	; (80021bc <HAL_RCC_OscConfig+0x4f4>)
 8002016:	f043 0301 	orr.w	r3, r3, #1
 800201a:	6213      	str	r3, [r2, #32]
 800201c:	e00b      	b.n	8002036 <HAL_RCC_OscConfig+0x36e>
 800201e:	4b67      	ldr	r3, [pc, #412]	; (80021bc <HAL_RCC_OscConfig+0x4f4>)
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	4a66      	ldr	r2, [pc, #408]	; (80021bc <HAL_RCC_OscConfig+0x4f4>)
 8002024:	f023 0301 	bic.w	r3, r3, #1
 8002028:	6213      	str	r3, [r2, #32]
 800202a:	4b64      	ldr	r3, [pc, #400]	; (80021bc <HAL_RCC_OscConfig+0x4f4>)
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	4a63      	ldr	r2, [pc, #396]	; (80021bc <HAL_RCC_OscConfig+0x4f4>)
 8002030:	f023 0304 	bic.w	r3, r3, #4
 8002034:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d015      	beq.n	800206a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800203e:	f7ff fb4d 	bl	80016dc <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002044:	e00a      	b.n	800205c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002046:	f7ff fb49 	bl	80016dc <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	f241 3288 	movw	r2, #5000	; 0x1388
 8002054:	4293      	cmp	r3, r2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e0ab      	b.n	80021b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800205c:	4b57      	ldr	r3, [pc, #348]	; (80021bc <HAL_RCC_OscConfig+0x4f4>)
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d0ee      	beq.n	8002046 <HAL_RCC_OscConfig+0x37e>
 8002068:	e014      	b.n	8002094 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206a:	f7ff fb37 	bl	80016dc <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002070:	e00a      	b.n	8002088 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002072:	f7ff fb33 	bl	80016dc <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002080:	4293      	cmp	r3, r2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e095      	b.n	80021b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002088:	4b4c      	ldr	r3, [pc, #304]	; (80021bc <HAL_RCC_OscConfig+0x4f4>)
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1ee      	bne.n	8002072 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002094:	7dfb      	ldrb	r3, [r7, #23]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d105      	bne.n	80020a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800209a:	4b48      	ldr	r3, [pc, #288]	; (80021bc <HAL_RCC_OscConfig+0x4f4>)
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	4a47      	ldr	r2, [pc, #284]	; (80021bc <HAL_RCC_OscConfig+0x4f4>)
 80020a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f000 8081 	beq.w	80021b2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020b0:	4b42      	ldr	r3, [pc, #264]	; (80021bc <HAL_RCC_OscConfig+0x4f4>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 030c 	and.w	r3, r3, #12
 80020b8:	2b08      	cmp	r3, #8
 80020ba:	d061      	beq.n	8002180 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d146      	bne.n	8002152 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c4:	4b3f      	ldr	r3, [pc, #252]	; (80021c4 <HAL_RCC_OscConfig+0x4fc>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ca:	f7ff fb07 	bl	80016dc <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d2:	f7ff fb03 	bl	80016dc <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e067      	b.n	80021b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020e4:	4b35      	ldr	r3, [pc, #212]	; (80021bc <HAL_RCC_OscConfig+0x4f4>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1f0      	bne.n	80020d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f8:	d108      	bne.n	800210c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020fa:	4b30      	ldr	r3, [pc, #192]	; (80021bc <HAL_RCC_OscConfig+0x4f4>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	492d      	ldr	r1, [pc, #180]	; (80021bc <HAL_RCC_OscConfig+0x4f4>)
 8002108:	4313      	orrs	r3, r2
 800210a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800210c:	4b2b      	ldr	r3, [pc, #172]	; (80021bc <HAL_RCC_OscConfig+0x4f4>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a19      	ldr	r1, [r3, #32]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211c:	430b      	orrs	r3, r1
 800211e:	4927      	ldr	r1, [pc, #156]	; (80021bc <HAL_RCC_OscConfig+0x4f4>)
 8002120:	4313      	orrs	r3, r2
 8002122:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002124:	4b27      	ldr	r3, [pc, #156]	; (80021c4 <HAL_RCC_OscConfig+0x4fc>)
 8002126:	2201      	movs	r2, #1
 8002128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212a:	f7ff fad7 	bl	80016dc <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002132:	f7ff fad3 	bl	80016dc <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e037      	b.n	80021b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002144:	4b1d      	ldr	r3, [pc, #116]	; (80021bc <HAL_RCC_OscConfig+0x4f4>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0f0      	beq.n	8002132 <HAL_RCC_OscConfig+0x46a>
 8002150:	e02f      	b.n	80021b2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002152:	4b1c      	ldr	r3, [pc, #112]	; (80021c4 <HAL_RCC_OscConfig+0x4fc>)
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002158:	f7ff fac0 	bl	80016dc <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002160:	f7ff fabc 	bl	80016dc <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e020      	b.n	80021b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002172:	4b12      	ldr	r3, [pc, #72]	; (80021bc <HAL_RCC_OscConfig+0x4f4>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1f0      	bne.n	8002160 <HAL_RCC_OscConfig+0x498>
 800217e:	e018      	b.n	80021b2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d101      	bne.n	800218c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e013      	b.n	80021b4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800218c:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <HAL_RCC_OscConfig+0x4f4>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	429a      	cmp	r2, r3
 800219e:	d106      	bne.n	80021ae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d001      	beq.n	80021b2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e000      	b.n	80021b4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40007000 	.word	0x40007000
 80021c4:	42420060 	.word	0x42420060

080021c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e0d0      	b.n	800237e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021dc:	4b6a      	ldr	r3, [pc, #424]	; (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d910      	bls.n	800220c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ea:	4b67      	ldr	r3, [pc, #412]	; (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f023 0207 	bic.w	r2, r3, #7
 80021f2:	4965      	ldr	r1, [pc, #404]	; (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021fa:	4b63      	ldr	r3, [pc, #396]	; (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	429a      	cmp	r2, r3
 8002206:	d001      	beq.n	800220c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e0b8      	b.n	800237e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d020      	beq.n	800225a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	2b00      	cmp	r3, #0
 8002222:	d005      	beq.n	8002230 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002224:	4b59      	ldr	r3, [pc, #356]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	4a58      	ldr	r2, [pc, #352]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 800222a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800222e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0308 	and.w	r3, r3, #8
 8002238:	2b00      	cmp	r3, #0
 800223a:	d005      	beq.n	8002248 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800223c:	4b53      	ldr	r3, [pc, #332]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	4a52      	ldr	r2, [pc, #328]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002246:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002248:	4b50      	ldr	r3, [pc, #320]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	494d      	ldr	r1, [pc, #308]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002256:	4313      	orrs	r3, r2
 8002258:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d040      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d107      	bne.n	800227e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226e:	4b47      	ldr	r3, [pc, #284]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d115      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e07f      	b.n	800237e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b02      	cmp	r3, #2
 8002284:	d107      	bne.n	8002296 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002286:	4b41      	ldr	r3, [pc, #260]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d109      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e073      	b.n	800237e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002296:	4b3d      	ldr	r3, [pc, #244]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e06b      	b.n	800237e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022a6:	4b39      	ldr	r3, [pc, #228]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f023 0203 	bic.w	r2, r3, #3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	4936      	ldr	r1, [pc, #216]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022b8:	f7ff fa10 	bl	80016dc <HAL_GetTick>
 80022bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022be:	e00a      	b.n	80022d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c0:	f7ff fa0c 	bl	80016dc <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e053      	b.n	800237e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022d6:	4b2d      	ldr	r3, [pc, #180]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 020c 	and.w	r2, r3, #12
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d1eb      	bne.n	80022c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022e8:	4b27      	ldr	r3, [pc, #156]	; (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d210      	bcs.n	8002318 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f6:	4b24      	ldr	r3, [pc, #144]	; (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f023 0207 	bic.w	r2, r3, #7
 80022fe:	4922      	ldr	r1, [pc, #136]	; (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	4313      	orrs	r3, r2
 8002304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002306:	4b20      	ldr	r3, [pc, #128]	; (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	429a      	cmp	r2, r3
 8002312:	d001      	beq.n	8002318 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e032      	b.n	800237e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	2b00      	cmp	r3, #0
 8002322:	d008      	beq.n	8002336 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002324:	4b19      	ldr	r3, [pc, #100]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	4916      	ldr	r1, [pc, #88]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002332:	4313      	orrs	r3, r2
 8002334:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b00      	cmp	r3, #0
 8002340:	d009      	beq.n	8002356 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002342:	4b12      	ldr	r3, [pc, #72]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	490e      	ldr	r1, [pc, #56]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002352:	4313      	orrs	r3, r2
 8002354:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002356:	f000 f821 	bl	800239c <HAL_RCC_GetSysClockFreq>
 800235a:	4602      	mov	r2, r0
 800235c:	4b0b      	ldr	r3, [pc, #44]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	091b      	lsrs	r3, r3, #4
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	490a      	ldr	r1, [pc, #40]	; (8002390 <HAL_RCC_ClockConfig+0x1c8>)
 8002368:	5ccb      	ldrb	r3, [r1, r3]
 800236a:	fa22 f303 	lsr.w	r3, r2, r3
 800236e:	4a09      	ldr	r2, [pc, #36]	; (8002394 <HAL_RCC_ClockConfig+0x1cc>)
 8002370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002372:	4b09      	ldr	r3, [pc, #36]	; (8002398 <HAL_RCC_ClockConfig+0x1d0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff f96e 	bl	8001658 <HAL_InitTick>

  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40022000 	.word	0x40022000
 800238c:	40021000 	.word	0x40021000
 8002390:	08002e74 	.word	0x08002e74
 8002394:	2000001c 	.word	0x2000001c
 8002398:	20000020 	.word	0x20000020

0800239c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800239c:	b480      	push	{r7}
 800239e:	b087      	sub	sp, #28
 80023a0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023a2:	2300      	movs	r3, #0
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	2300      	movs	r3, #0
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	2300      	movs	r3, #0
 80023ac:	617b      	str	r3, [r7, #20]
 80023ae:	2300      	movs	r3, #0
 80023b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023b6:	4b1e      	ldr	r3, [pc, #120]	; (8002430 <HAL_RCC_GetSysClockFreq+0x94>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f003 030c 	and.w	r3, r3, #12
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d002      	beq.n	80023cc <HAL_RCC_GetSysClockFreq+0x30>
 80023c6:	2b08      	cmp	r3, #8
 80023c8:	d003      	beq.n	80023d2 <HAL_RCC_GetSysClockFreq+0x36>
 80023ca:	e027      	b.n	800241c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023cc:	4b19      	ldr	r3, [pc, #100]	; (8002434 <HAL_RCC_GetSysClockFreq+0x98>)
 80023ce:	613b      	str	r3, [r7, #16]
      break;
 80023d0:	e027      	b.n	8002422 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	0c9b      	lsrs	r3, r3, #18
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	4a17      	ldr	r2, [pc, #92]	; (8002438 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023dc:	5cd3      	ldrb	r3, [r2, r3]
 80023de:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d010      	beq.n	800240c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023ea:	4b11      	ldr	r3, [pc, #68]	; (8002430 <HAL_RCC_GetSysClockFreq+0x94>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	0c5b      	lsrs	r3, r3, #17
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	4a11      	ldr	r2, [pc, #68]	; (800243c <HAL_RCC_GetSysClockFreq+0xa0>)
 80023f6:	5cd3      	ldrb	r3, [r2, r3]
 80023f8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a0d      	ldr	r2, [pc, #52]	; (8002434 <HAL_RCC_GetSysClockFreq+0x98>)
 80023fe:	fb02 f203 	mul.w	r2, r2, r3
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	fbb2 f3f3 	udiv	r3, r2, r3
 8002408:	617b      	str	r3, [r7, #20]
 800240a:	e004      	b.n	8002416 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a0c      	ldr	r2, [pc, #48]	; (8002440 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002410:	fb02 f303 	mul.w	r3, r2, r3
 8002414:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	613b      	str	r3, [r7, #16]
      break;
 800241a:	e002      	b.n	8002422 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800241c:	4b05      	ldr	r3, [pc, #20]	; (8002434 <HAL_RCC_GetSysClockFreq+0x98>)
 800241e:	613b      	str	r3, [r7, #16]
      break;
 8002420:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002422:	693b      	ldr	r3, [r7, #16]
}
 8002424:	4618      	mov	r0, r3
 8002426:	371c      	adds	r7, #28
 8002428:	46bd      	mov	sp, r7
 800242a:	bc80      	pop	{r7}
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	40021000 	.word	0x40021000
 8002434:	007a1200 	.word	0x007a1200
 8002438:	08002e84 	.word	0x08002e84
 800243c:	08002e94 	.word	0x08002e94
 8002440:	003d0900 	.word	0x003d0900

08002444 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800244c:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <RCC_Delay+0x34>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a0a      	ldr	r2, [pc, #40]	; (800247c <RCC_Delay+0x38>)
 8002452:	fba2 2303 	umull	r2, r3, r2, r3
 8002456:	0a5b      	lsrs	r3, r3, #9
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	fb02 f303 	mul.w	r3, r2, r3
 800245e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002460:	bf00      	nop
  }
  while (Delay --);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	1e5a      	subs	r2, r3, #1
 8002466:	60fa      	str	r2, [r7, #12]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1f9      	bne.n	8002460 <RCC_Delay+0x1c>
}
 800246c:	bf00      	nop
 800246e:	bf00      	nop
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr
 8002478:	2000001c 	.word	0x2000001c
 800247c:	10624dd3 	.word	0x10624dd3

08002480 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e041      	b.n	8002516 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d106      	bne.n	80024ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff f808 	bl	80014bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2202      	movs	r2, #2
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3304      	adds	r3, #4
 80024bc:	4619      	mov	r1, r3
 80024be:	4610      	mov	r0, r2
 80024c0:	f000 fa6e 	bl	80029a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
	...

08002520 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b01      	cmp	r3, #1
 8002532:	d001      	beq.n	8002538 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e035      	b.n	80025a4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2202      	movs	r2, #2
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68da      	ldr	r2, [r3, #12]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0201 	orr.w	r2, r2, #1
 800254e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a16      	ldr	r2, [pc, #88]	; (80025b0 <HAL_TIM_Base_Start_IT+0x90>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d009      	beq.n	800256e <HAL_TIM_Base_Start_IT+0x4e>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002562:	d004      	beq.n	800256e <HAL_TIM_Base_Start_IT+0x4e>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a12      	ldr	r2, [pc, #72]	; (80025b4 <HAL_TIM_Base_Start_IT+0x94>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d111      	bne.n	8002592 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2b06      	cmp	r3, #6
 800257e:	d010      	beq.n	80025a2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 0201 	orr.w	r2, r2, #1
 800258e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002590:	e007      	b.n	80025a2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f042 0201 	orr.w	r2, r2, #1
 80025a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3714      	adds	r7, #20
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bc80      	pop	{r7}
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	40012c00 	.word	0x40012c00
 80025b4:	40000400 	.word	0x40000400

080025b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d122      	bne.n	8002614 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d11b      	bne.n	8002614 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f06f 0202 	mvn.w	r2, #2
 80025e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f9b4 	bl	8002968 <HAL_TIM_IC_CaptureCallback>
 8002600:	e005      	b.n	800260e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f9a7 	bl	8002956 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f9b6 	bl	800297a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	f003 0304 	and.w	r3, r3, #4
 800261e:	2b04      	cmp	r3, #4
 8002620:	d122      	bne.n	8002668 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b04      	cmp	r3, #4
 800262e:	d11b      	bne.n	8002668 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f06f 0204 	mvn.w	r2, #4
 8002638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2202      	movs	r2, #2
 800263e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f98a 	bl	8002968 <HAL_TIM_IC_CaptureCallback>
 8002654:	e005      	b.n	8002662 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f97d 	bl	8002956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f98c 	bl	800297a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b08      	cmp	r3, #8
 8002674:	d122      	bne.n	80026bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	f003 0308 	and.w	r3, r3, #8
 8002680:	2b08      	cmp	r3, #8
 8002682:	d11b      	bne.n	80026bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f06f 0208 	mvn.w	r2, #8
 800268c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2204      	movs	r2, #4
 8002692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f960 	bl	8002968 <HAL_TIM_IC_CaptureCallback>
 80026a8:	e005      	b.n	80026b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f953 	bl	8002956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 f962 	bl	800297a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	f003 0310 	and.w	r3, r3, #16
 80026c6:	2b10      	cmp	r3, #16
 80026c8:	d122      	bne.n	8002710 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	f003 0310 	and.w	r3, r3, #16
 80026d4:	2b10      	cmp	r3, #16
 80026d6:	d11b      	bne.n	8002710 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f06f 0210 	mvn.w	r2, #16
 80026e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2208      	movs	r2, #8
 80026e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f936 	bl	8002968 <HAL_TIM_IC_CaptureCallback>
 80026fc:	e005      	b.n	800270a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f929 	bl	8002956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 f938 	bl	800297a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b01      	cmp	r3, #1
 800271c:	d10e      	bne.n	800273c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b01      	cmp	r3, #1
 800272a:	d107      	bne.n	800273c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f06f 0201 	mvn.w	r2, #1
 8002734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7fe fb72 	bl	8000e20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002746:	2b80      	cmp	r3, #128	; 0x80
 8002748:	d10e      	bne.n	8002768 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002754:	2b80      	cmp	r3, #128	; 0x80
 8002756:	d107      	bne.n	8002768 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 fa6b 	bl	8002c3e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002772:	2b40      	cmp	r3, #64	; 0x40
 8002774:	d10e      	bne.n	8002794 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002780:	2b40      	cmp	r3, #64	; 0x40
 8002782:	d107      	bne.n	8002794 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800278c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f8fc 	bl	800298c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	f003 0320 	and.w	r3, r3, #32
 800279e:	2b20      	cmp	r3, #32
 80027a0:	d10e      	bne.n	80027c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	f003 0320 	and.w	r3, r3, #32
 80027ac:	2b20      	cmp	r3, #32
 80027ae:	d107      	bne.n	80027c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f06f 0220 	mvn.w	r2, #32
 80027b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 fa36 	bl	8002c2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027c0:	bf00      	nop
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027d2:	2300      	movs	r3, #0
 80027d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d101      	bne.n	80027e4 <HAL_TIM_ConfigClockSource+0x1c>
 80027e0:	2302      	movs	r3, #2
 80027e2:	e0b4      	b.n	800294e <HAL_TIM_ConfigClockSource+0x186>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2202      	movs	r2, #2
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002802:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800280a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800281c:	d03e      	beq.n	800289c <HAL_TIM_ConfigClockSource+0xd4>
 800281e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002822:	f200 8087 	bhi.w	8002934 <HAL_TIM_ConfigClockSource+0x16c>
 8002826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800282a:	f000 8086 	beq.w	800293a <HAL_TIM_ConfigClockSource+0x172>
 800282e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002832:	d87f      	bhi.n	8002934 <HAL_TIM_ConfigClockSource+0x16c>
 8002834:	2b70      	cmp	r3, #112	; 0x70
 8002836:	d01a      	beq.n	800286e <HAL_TIM_ConfigClockSource+0xa6>
 8002838:	2b70      	cmp	r3, #112	; 0x70
 800283a:	d87b      	bhi.n	8002934 <HAL_TIM_ConfigClockSource+0x16c>
 800283c:	2b60      	cmp	r3, #96	; 0x60
 800283e:	d050      	beq.n	80028e2 <HAL_TIM_ConfigClockSource+0x11a>
 8002840:	2b60      	cmp	r3, #96	; 0x60
 8002842:	d877      	bhi.n	8002934 <HAL_TIM_ConfigClockSource+0x16c>
 8002844:	2b50      	cmp	r3, #80	; 0x50
 8002846:	d03c      	beq.n	80028c2 <HAL_TIM_ConfigClockSource+0xfa>
 8002848:	2b50      	cmp	r3, #80	; 0x50
 800284a:	d873      	bhi.n	8002934 <HAL_TIM_ConfigClockSource+0x16c>
 800284c:	2b40      	cmp	r3, #64	; 0x40
 800284e:	d058      	beq.n	8002902 <HAL_TIM_ConfigClockSource+0x13a>
 8002850:	2b40      	cmp	r3, #64	; 0x40
 8002852:	d86f      	bhi.n	8002934 <HAL_TIM_ConfigClockSource+0x16c>
 8002854:	2b30      	cmp	r3, #48	; 0x30
 8002856:	d064      	beq.n	8002922 <HAL_TIM_ConfigClockSource+0x15a>
 8002858:	2b30      	cmp	r3, #48	; 0x30
 800285a:	d86b      	bhi.n	8002934 <HAL_TIM_ConfigClockSource+0x16c>
 800285c:	2b20      	cmp	r3, #32
 800285e:	d060      	beq.n	8002922 <HAL_TIM_ConfigClockSource+0x15a>
 8002860:	2b20      	cmp	r3, #32
 8002862:	d867      	bhi.n	8002934 <HAL_TIM_ConfigClockSource+0x16c>
 8002864:	2b00      	cmp	r3, #0
 8002866:	d05c      	beq.n	8002922 <HAL_TIM_ConfigClockSource+0x15a>
 8002868:	2b10      	cmp	r3, #16
 800286a:	d05a      	beq.n	8002922 <HAL_TIM_ConfigClockSource+0x15a>
 800286c:	e062      	b.n	8002934 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6818      	ldr	r0, [r3, #0]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	6899      	ldr	r1, [r3, #8]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	f000 f95e 	bl	8002b3e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002890:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	609a      	str	r2, [r3, #8]
      break;
 800289a:	e04f      	b.n	800293c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6818      	ldr	r0, [r3, #0]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	6899      	ldr	r1, [r3, #8]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	f000 f947 	bl	8002b3e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689a      	ldr	r2, [r3, #8]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028be:	609a      	str	r2, [r3, #8]
      break;
 80028c0:	e03c      	b.n	800293c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6818      	ldr	r0, [r3, #0]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	6859      	ldr	r1, [r3, #4]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	461a      	mov	r2, r3
 80028d0:	f000 f8be 	bl	8002a50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2150      	movs	r1, #80	; 0x50
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 f915 	bl	8002b0a <TIM_ITRx_SetConfig>
      break;
 80028e0:	e02c      	b.n	800293c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6818      	ldr	r0, [r3, #0]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	6859      	ldr	r1, [r3, #4]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	461a      	mov	r2, r3
 80028f0:	f000 f8dc 	bl	8002aac <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2160      	movs	r1, #96	; 0x60
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 f905 	bl	8002b0a <TIM_ITRx_SetConfig>
      break;
 8002900:	e01c      	b.n	800293c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6818      	ldr	r0, [r3, #0]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	6859      	ldr	r1, [r3, #4]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	461a      	mov	r2, r3
 8002910:	f000 f89e 	bl	8002a50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2140      	movs	r1, #64	; 0x40
 800291a:	4618      	mov	r0, r3
 800291c:	f000 f8f5 	bl	8002b0a <TIM_ITRx_SetConfig>
      break;
 8002920:	e00c      	b.n	800293c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4619      	mov	r1, r3
 800292c:	4610      	mov	r0, r2
 800292e:	f000 f8ec 	bl	8002b0a <TIM_ITRx_SetConfig>
      break;
 8002932:	e003      	b.n	800293c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	73fb      	strb	r3, [r7, #15]
      break;
 8002938:	e000      	b.n	800293c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800293a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800294c:	7bfb      	ldrb	r3, [r7, #15]
}
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr

0800297a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr

0800298c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	4770      	bx	lr
	...

080029a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a25      	ldr	r2, [pc, #148]	; (8002a48 <TIM_Base_SetConfig+0xa8>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d007      	beq.n	80029c8 <TIM_Base_SetConfig+0x28>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029be:	d003      	beq.n	80029c8 <TIM_Base_SetConfig+0x28>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a22      	ldr	r2, [pc, #136]	; (8002a4c <TIM_Base_SetConfig+0xac>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d108      	bne.n	80029da <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a1a      	ldr	r2, [pc, #104]	; (8002a48 <TIM_Base_SetConfig+0xa8>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d007      	beq.n	80029f2 <TIM_Base_SetConfig+0x52>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e8:	d003      	beq.n	80029f2 <TIM_Base_SetConfig+0x52>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a17      	ldr	r2, [pc, #92]	; (8002a4c <TIM_Base_SetConfig+0xac>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d108      	bne.n	8002a04 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a07      	ldr	r2, [pc, #28]	; (8002a48 <TIM_Base_SetConfig+0xa8>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d103      	bne.n	8002a38 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	691a      	ldr	r2, [r3, #16]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	615a      	str	r2, [r3, #20]
}
 8002a3e:	bf00      	nop
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr
 8002a48:	40012c00 	.word	0x40012c00
 8002a4c:	40000400 	.word	0x40000400

08002a50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b087      	sub	sp, #28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	f023 0201 	bic.w	r2, r3, #1
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	f023 030a 	bic.w	r3, r3, #10
 8002a8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	621a      	str	r2, [r3, #32]
}
 8002aa2:	bf00      	nop
 8002aa4:	371c      	adds	r7, #28
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr

08002aac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b087      	sub	sp, #28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	f023 0210 	bic.w	r2, r3, #16
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ad6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	031b      	lsls	r3, r3, #12
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ae8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	011b      	lsls	r3, r3, #4
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	621a      	str	r2, [r3, #32]
}
 8002b00:	bf00      	nop
 8002b02:	371c      	adds	r7, #28
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr

08002b0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b085      	sub	sp, #20
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
 8002b12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f043 0307 	orr.w	r3, r3, #7
 8002b2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	609a      	str	r2, [r3, #8]
}
 8002b34:	bf00      	nop
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr

08002b3e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b087      	sub	sp, #28
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	60f8      	str	r0, [r7, #12]
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	607a      	str	r2, [r7, #4]
 8002b4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b58:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	021a      	lsls	r2, r3, #8
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	431a      	orrs	r2, r3
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	609a      	str	r2, [r3, #8]
}
 8002b72:	bf00      	nop
 8002b74:	371c      	adds	r7, #28
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr

08002b7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d101      	bne.n	8002b94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b90:	2302      	movs	r3, #2
 8002b92:	e041      	b.n	8002c18 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a14      	ldr	r2, [pc, #80]	; (8002c24 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d009      	beq.n	8002bec <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be0:	d004      	beq.n	8002bec <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a10      	ldr	r2, [pc, #64]	; (8002c28 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d10c      	bne.n	8002c06 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bf2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	68ba      	ldr	r2, [r7, #8]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bc80      	pop	{r7}
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	40012c00 	.word	0x40012c00
 8002c28:	40000400 	.word	0x40000400

08002c2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr

08002c3e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr

08002c50 <__errno>:
 8002c50:	4b01      	ldr	r3, [pc, #4]	; (8002c58 <__errno+0x8>)
 8002c52:	6818      	ldr	r0, [r3, #0]
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	20000028 	.word	0x20000028

08002c5c <__libc_init_array>:
 8002c5c:	b570      	push	{r4, r5, r6, lr}
 8002c5e:	2600      	movs	r6, #0
 8002c60:	4d0c      	ldr	r5, [pc, #48]	; (8002c94 <__libc_init_array+0x38>)
 8002c62:	4c0d      	ldr	r4, [pc, #52]	; (8002c98 <__libc_init_array+0x3c>)
 8002c64:	1b64      	subs	r4, r4, r5
 8002c66:	10a4      	asrs	r4, r4, #2
 8002c68:	42a6      	cmp	r6, r4
 8002c6a:	d109      	bne.n	8002c80 <__libc_init_array+0x24>
 8002c6c:	f000 f8f6 	bl	8002e5c <_init>
 8002c70:	2600      	movs	r6, #0
 8002c72:	4d0a      	ldr	r5, [pc, #40]	; (8002c9c <__libc_init_array+0x40>)
 8002c74:	4c0a      	ldr	r4, [pc, #40]	; (8002ca0 <__libc_init_array+0x44>)
 8002c76:	1b64      	subs	r4, r4, r5
 8002c78:	10a4      	asrs	r4, r4, #2
 8002c7a:	42a6      	cmp	r6, r4
 8002c7c:	d105      	bne.n	8002c8a <__libc_init_array+0x2e>
 8002c7e:	bd70      	pop	{r4, r5, r6, pc}
 8002c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c84:	4798      	blx	r3
 8002c86:	3601      	adds	r6, #1
 8002c88:	e7ee      	b.n	8002c68 <__libc_init_array+0xc>
 8002c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c8e:	4798      	blx	r3
 8002c90:	3601      	adds	r6, #1
 8002c92:	e7f2      	b.n	8002c7a <__libc_init_array+0x1e>
 8002c94:	08002e98 	.word	0x08002e98
 8002c98:	08002e98 	.word	0x08002e98
 8002c9c:	08002e98 	.word	0x08002e98
 8002ca0:	08002e9c 	.word	0x08002e9c

08002ca4 <malloc>:
 8002ca4:	4b02      	ldr	r3, [pc, #8]	; (8002cb0 <malloc+0xc>)
 8002ca6:	4601      	mov	r1, r0
 8002ca8:	6818      	ldr	r0, [r3, #0]
 8002caa:	f000 b85f 	b.w	8002d6c <_malloc_r>
 8002cae:	bf00      	nop
 8002cb0:	20000028 	.word	0x20000028

08002cb4 <free>:
 8002cb4:	4b02      	ldr	r3, [pc, #8]	; (8002cc0 <free+0xc>)
 8002cb6:	4601      	mov	r1, r0
 8002cb8:	6818      	ldr	r0, [r3, #0]
 8002cba:	f000 b80b 	b.w	8002cd4 <_free_r>
 8002cbe:	bf00      	nop
 8002cc0:	20000028 	.word	0x20000028

08002cc4 <memset>:
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	4402      	add	r2, r0
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d100      	bne.n	8002cce <memset+0xa>
 8002ccc:	4770      	bx	lr
 8002cce:	f803 1b01 	strb.w	r1, [r3], #1
 8002cd2:	e7f9      	b.n	8002cc8 <memset+0x4>

08002cd4 <_free_r>:
 8002cd4:	b538      	push	{r3, r4, r5, lr}
 8002cd6:	4605      	mov	r5, r0
 8002cd8:	2900      	cmp	r1, #0
 8002cda:	d043      	beq.n	8002d64 <_free_r+0x90>
 8002cdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ce0:	1f0c      	subs	r4, r1, #4
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	bfb8      	it	lt
 8002ce6:	18e4      	addlt	r4, r4, r3
 8002ce8:	f000 f8aa 	bl	8002e40 <__malloc_lock>
 8002cec:	4a1e      	ldr	r2, [pc, #120]	; (8002d68 <_free_r+0x94>)
 8002cee:	6813      	ldr	r3, [r2, #0]
 8002cf0:	4610      	mov	r0, r2
 8002cf2:	b933      	cbnz	r3, 8002d02 <_free_r+0x2e>
 8002cf4:	6063      	str	r3, [r4, #4]
 8002cf6:	6014      	str	r4, [r2, #0]
 8002cf8:	4628      	mov	r0, r5
 8002cfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002cfe:	f000 b8a5 	b.w	8002e4c <__malloc_unlock>
 8002d02:	42a3      	cmp	r3, r4
 8002d04:	d90a      	bls.n	8002d1c <_free_r+0x48>
 8002d06:	6821      	ldr	r1, [r4, #0]
 8002d08:	1862      	adds	r2, r4, r1
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	bf01      	itttt	eq
 8002d0e:	681a      	ldreq	r2, [r3, #0]
 8002d10:	685b      	ldreq	r3, [r3, #4]
 8002d12:	1852      	addeq	r2, r2, r1
 8002d14:	6022      	streq	r2, [r4, #0]
 8002d16:	6063      	str	r3, [r4, #4]
 8002d18:	6004      	str	r4, [r0, #0]
 8002d1a:	e7ed      	b.n	8002cf8 <_free_r+0x24>
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	b10b      	cbz	r3, 8002d26 <_free_r+0x52>
 8002d22:	42a3      	cmp	r3, r4
 8002d24:	d9fa      	bls.n	8002d1c <_free_r+0x48>
 8002d26:	6811      	ldr	r1, [r2, #0]
 8002d28:	1850      	adds	r0, r2, r1
 8002d2a:	42a0      	cmp	r0, r4
 8002d2c:	d10b      	bne.n	8002d46 <_free_r+0x72>
 8002d2e:	6820      	ldr	r0, [r4, #0]
 8002d30:	4401      	add	r1, r0
 8002d32:	1850      	adds	r0, r2, r1
 8002d34:	4283      	cmp	r3, r0
 8002d36:	6011      	str	r1, [r2, #0]
 8002d38:	d1de      	bne.n	8002cf8 <_free_r+0x24>
 8002d3a:	6818      	ldr	r0, [r3, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	4401      	add	r1, r0
 8002d40:	6011      	str	r1, [r2, #0]
 8002d42:	6053      	str	r3, [r2, #4]
 8002d44:	e7d8      	b.n	8002cf8 <_free_r+0x24>
 8002d46:	d902      	bls.n	8002d4e <_free_r+0x7a>
 8002d48:	230c      	movs	r3, #12
 8002d4a:	602b      	str	r3, [r5, #0]
 8002d4c:	e7d4      	b.n	8002cf8 <_free_r+0x24>
 8002d4e:	6820      	ldr	r0, [r4, #0]
 8002d50:	1821      	adds	r1, r4, r0
 8002d52:	428b      	cmp	r3, r1
 8002d54:	bf01      	itttt	eq
 8002d56:	6819      	ldreq	r1, [r3, #0]
 8002d58:	685b      	ldreq	r3, [r3, #4]
 8002d5a:	1809      	addeq	r1, r1, r0
 8002d5c:	6021      	streq	r1, [r4, #0]
 8002d5e:	6063      	str	r3, [r4, #4]
 8002d60:	6054      	str	r4, [r2, #4]
 8002d62:	e7c9      	b.n	8002cf8 <_free_r+0x24>
 8002d64:	bd38      	pop	{r3, r4, r5, pc}
 8002d66:	bf00      	nop
 8002d68:	20000118 	.word	0x20000118

08002d6c <_malloc_r>:
 8002d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d6e:	1ccd      	adds	r5, r1, #3
 8002d70:	f025 0503 	bic.w	r5, r5, #3
 8002d74:	3508      	adds	r5, #8
 8002d76:	2d0c      	cmp	r5, #12
 8002d78:	bf38      	it	cc
 8002d7a:	250c      	movcc	r5, #12
 8002d7c:	2d00      	cmp	r5, #0
 8002d7e:	4606      	mov	r6, r0
 8002d80:	db01      	blt.n	8002d86 <_malloc_r+0x1a>
 8002d82:	42a9      	cmp	r1, r5
 8002d84:	d903      	bls.n	8002d8e <_malloc_r+0x22>
 8002d86:	230c      	movs	r3, #12
 8002d88:	6033      	str	r3, [r6, #0]
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d8e:	f000 f857 	bl	8002e40 <__malloc_lock>
 8002d92:	4921      	ldr	r1, [pc, #132]	; (8002e18 <_malloc_r+0xac>)
 8002d94:	680a      	ldr	r2, [r1, #0]
 8002d96:	4614      	mov	r4, r2
 8002d98:	b99c      	cbnz	r4, 8002dc2 <_malloc_r+0x56>
 8002d9a:	4f20      	ldr	r7, [pc, #128]	; (8002e1c <_malloc_r+0xb0>)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	b923      	cbnz	r3, 8002daa <_malloc_r+0x3e>
 8002da0:	4621      	mov	r1, r4
 8002da2:	4630      	mov	r0, r6
 8002da4:	f000 f83c 	bl	8002e20 <_sbrk_r>
 8002da8:	6038      	str	r0, [r7, #0]
 8002daa:	4629      	mov	r1, r5
 8002dac:	4630      	mov	r0, r6
 8002dae:	f000 f837 	bl	8002e20 <_sbrk_r>
 8002db2:	1c43      	adds	r3, r0, #1
 8002db4:	d123      	bne.n	8002dfe <_malloc_r+0x92>
 8002db6:	230c      	movs	r3, #12
 8002db8:	4630      	mov	r0, r6
 8002dba:	6033      	str	r3, [r6, #0]
 8002dbc:	f000 f846 	bl	8002e4c <__malloc_unlock>
 8002dc0:	e7e3      	b.n	8002d8a <_malloc_r+0x1e>
 8002dc2:	6823      	ldr	r3, [r4, #0]
 8002dc4:	1b5b      	subs	r3, r3, r5
 8002dc6:	d417      	bmi.n	8002df8 <_malloc_r+0x8c>
 8002dc8:	2b0b      	cmp	r3, #11
 8002dca:	d903      	bls.n	8002dd4 <_malloc_r+0x68>
 8002dcc:	6023      	str	r3, [r4, #0]
 8002dce:	441c      	add	r4, r3
 8002dd0:	6025      	str	r5, [r4, #0]
 8002dd2:	e004      	b.n	8002dde <_malloc_r+0x72>
 8002dd4:	6863      	ldr	r3, [r4, #4]
 8002dd6:	42a2      	cmp	r2, r4
 8002dd8:	bf0c      	ite	eq
 8002dda:	600b      	streq	r3, [r1, #0]
 8002ddc:	6053      	strne	r3, [r2, #4]
 8002dde:	4630      	mov	r0, r6
 8002de0:	f000 f834 	bl	8002e4c <__malloc_unlock>
 8002de4:	f104 000b 	add.w	r0, r4, #11
 8002de8:	1d23      	adds	r3, r4, #4
 8002dea:	f020 0007 	bic.w	r0, r0, #7
 8002dee:	1ac2      	subs	r2, r0, r3
 8002df0:	d0cc      	beq.n	8002d8c <_malloc_r+0x20>
 8002df2:	1a1b      	subs	r3, r3, r0
 8002df4:	50a3      	str	r3, [r4, r2]
 8002df6:	e7c9      	b.n	8002d8c <_malloc_r+0x20>
 8002df8:	4622      	mov	r2, r4
 8002dfa:	6864      	ldr	r4, [r4, #4]
 8002dfc:	e7cc      	b.n	8002d98 <_malloc_r+0x2c>
 8002dfe:	1cc4      	adds	r4, r0, #3
 8002e00:	f024 0403 	bic.w	r4, r4, #3
 8002e04:	42a0      	cmp	r0, r4
 8002e06:	d0e3      	beq.n	8002dd0 <_malloc_r+0x64>
 8002e08:	1a21      	subs	r1, r4, r0
 8002e0a:	4630      	mov	r0, r6
 8002e0c:	f000 f808 	bl	8002e20 <_sbrk_r>
 8002e10:	3001      	adds	r0, #1
 8002e12:	d1dd      	bne.n	8002dd0 <_malloc_r+0x64>
 8002e14:	e7cf      	b.n	8002db6 <_malloc_r+0x4a>
 8002e16:	bf00      	nop
 8002e18:	20000118 	.word	0x20000118
 8002e1c:	2000011c 	.word	0x2000011c

08002e20 <_sbrk_r>:
 8002e20:	b538      	push	{r3, r4, r5, lr}
 8002e22:	2300      	movs	r3, #0
 8002e24:	4d05      	ldr	r5, [pc, #20]	; (8002e3c <_sbrk_r+0x1c>)
 8002e26:	4604      	mov	r4, r0
 8002e28:	4608      	mov	r0, r1
 8002e2a:	602b      	str	r3, [r5, #0]
 8002e2c:	f7fe fb9c 	bl	8001568 <_sbrk>
 8002e30:	1c43      	adds	r3, r0, #1
 8002e32:	d102      	bne.n	8002e3a <_sbrk_r+0x1a>
 8002e34:	682b      	ldr	r3, [r5, #0]
 8002e36:	b103      	cbz	r3, 8002e3a <_sbrk_r+0x1a>
 8002e38:	6023      	str	r3, [r4, #0]
 8002e3a:	bd38      	pop	{r3, r4, r5, pc}
 8002e3c:	2000016c 	.word	0x2000016c

08002e40 <__malloc_lock>:
 8002e40:	4801      	ldr	r0, [pc, #4]	; (8002e48 <__malloc_lock+0x8>)
 8002e42:	f000 b809 	b.w	8002e58 <__retarget_lock_acquire_recursive>
 8002e46:	bf00      	nop
 8002e48:	20000174 	.word	0x20000174

08002e4c <__malloc_unlock>:
 8002e4c:	4801      	ldr	r0, [pc, #4]	; (8002e54 <__malloc_unlock+0x8>)
 8002e4e:	f000 b804 	b.w	8002e5a <__retarget_lock_release_recursive>
 8002e52:	bf00      	nop
 8002e54:	20000174 	.word	0x20000174

08002e58 <__retarget_lock_acquire_recursive>:
 8002e58:	4770      	bx	lr

08002e5a <__retarget_lock_release_recursive>:
 8002e5a:	4770      	bx	lr

08002e5c <_init>:
 8002e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e5e:	bf00      	nop
 8002e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e62:	bc08      	pop	{r3}
 8002e64:	469e      	mov	lr, r3
 8002e66:	4770      	bx	lr

08002e68 <_fini>:
 8002e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e6a:	bf00      	nop
 8002e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e6e:	bc08      	pop	{r3}
 8002e70:	469e      	mov	lr, r3
 8002e72:	4770      	bx	lr
