
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028ec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080029f8  080029f8  000129f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a1c  08002a1c  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08002a1c  08002a1c  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a1c  08002a1c  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a1c  08002a1c  00012a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a20  08002a20  00012a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08002a24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000028  08002a4c  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002a4c  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000963a  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ae5  00000000  00000000  0002968b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  0002b170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000968  00000000  00000000  0002bbe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ca8  00000000  00000000  0002c550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b9ef  00000000  00000000  000431f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082465  00000000  00000000  0004ebe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d104c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002918  00000000  00000000  000d10a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000028 	.word	0x20000028
 8000128:	00000000 	.word	0x00000000
 800012c:	080029e0 	.word	0x080029e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000002c 	.word	0x2000002c
 8000148:	080029e0 	.word	0x080029e0

0800014c <display7SEG>:
 */

#include "display7Seg.h"
#include "global.h"

void display7SEG(int num) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b08      	cmp	r3, #8
 8000158:	f200 8187 	bhi.w	800046a <display7SEG+0x31e>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <display7SEG+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	08000189 	.word	0x08000189
 8000168:	080001db 	.word	0x080001db
 800016c:	0800022d 	.word	0x0800022d
 8000170:	0800027f 	.word	0x0800027f
 8000174:	080002d1 	.word	0x080002d1
 8000178:	08000323 	.word	0x08000323
 800017c:	08000375 	.word	0x08000375
 8000180:	080003c7 	.word	0x080003c7
 8000184:	08000419 	.word	0x08000419
	switch (num) {
			case 0:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000188:	2200      	movs	r2, #0
 800018a:	2140      	movs	r1, #64	; 0x40
 800018c:	48cd      	ldr	r0, [pc, #820]	; (80004c4 <display7SEG+0x378>)
 800018e:	f001 fc06 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000192:	2200      	movs	r2, #0
 8000194:	2180      	movs	r1, #128	; 0x80
 8000196:	48cb      	ldr	r0, [pc, #812]	; (80004c4 <display7SEG+0x378>)
 8000198:	f001 fc01 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 800019c:	2200      	movs	r2, #0
 800019e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001a2:	48c8      	ldr	r0, [pc, #800]	; (80004c4 <display7SEG+0x378>)
 80001a4:	f001 fbfb 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 80001a8:	2200      	movs	r2, #0
 80001aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001ae:	48c5      	ldr	r0, [pc, #788]	; (80004c4 <display7SEG+0x378>)
 80001b0:	f001 fbf5 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 80001b4:	2200      	movs	r2, #0
 80001b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001ba:	48c2      	ldr	r0, [pc, #776]	; (80004c4 <display7SEG+0x378>)
 80001bc:	f001 fbef 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001c6:	48bf      	ldr	r0, [pc, #764]	; (80004c4 <display7SEG+0x378>)
 80001c8:	f001 fbe9 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 80001cc:	2201      	movs	r2, #1
 80001ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001d2:	48bc      	ldr	r0, [pc, #752]	; (80004c4 <display7SEG+0x378>)
 80001d4:	f001 fbe3 	bl	800199e <HAL_GPIO_WritePin>
				break;
 80001d8:	e170      	b.n	80004bc <display7SEG+0x370>
			case 1:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 80001da:	2201      	movs	r2, #1
 80001dc:	2140      	movs	r1, #64	; 0x40
 80001de:	48b9      	ldr	r0, [pc, #740]	; (80004c4 <display7SEG+0x378>)
 80001e0:	f001 fbdd 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80001e4:	2200      	movs	r2, #0
 80001e6:	2180      	movs	r1, #128	; 0x80
 80001e8:	48b6      	ldr	r0, [pc, #728]	; (80004c4 <display7SEG+0x378>)
 80001ea:	f001 fbd8 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80001ee:	2200      	movs	r2, #0
 80001f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001f4:	48b3      	ldr	r0, [pc, #716]	; (80004c4 <display7SEG+0x378>)
 80001f6:	f001 fbd2 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 80001fa:	2201      	movs	r2, #1
 80001fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000200:	48b0      	ldr	r0, [pc, #704]	; (80004c4 <display7SEG+0x378>)
 8000202:	f001 fbcc 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000206:	2201      	movs	r2, #1
 8000208:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800020c:	48ad      	ldr	r0, [pc, #692]	; (80004c4 <display7SEG+0x378>)
 800020e:	f001 fbc6 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000212:	2201      	movs	r2, #1
 8000214:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000218:	48aa      	ldr	r0, [pc, #680]	; (80004c4 <display7SEG+0x378>)
 800021a:	f001 fbc0 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 800021e:	2201      	movs	r2, #1
 8000220:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000224:	48a7      	ldr	r0, [pc, #668]	; (80004c4 <display7SEG+0x378>)
 8000226:	f001 fbba 	bl	800199e <HAL_GPIO_WritePin>
				break;
 800022a:	e147      	b.n	80004bc <display7SEG+0x370>
			case 2:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 800022c:	2200      	movs	r2, #0
 800022e:	2140      	movs	r1, #64	; 0x40
 8000230:	48a4      	ldr	r0, [pc, #656]	; (80004c4 <display7SEG+0x378>)
 8000232:	f001 fbb4 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000236:	2200      	movs	r2, #0
 8000238:	2180      	movs	r1, #128	; 0x80
 800023a:	48a2      	ldr	r0, [pc, #648]	; (80004c4 <display7SEG+0x378>)
 800023c:	f001 fbaf 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET);
 8000240:	2201      	movs	r2, #1
 8000242:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000246:	489f      	ldr	r0, [pc, #636]	; (80004c4 <display7SEG+0x378>)
 8000248:	f001 fba9 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 800024c:	2200      	movs	r2, #0
 800024e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000252:	489c      	ldr	r0, [pc, #624]	; (80004c4 <display7SEG+0x378>)
 8000254:	f001 fba3 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000258:	2200      	movs	r2, #0
 800025a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800025e:	4899      	ldr	r0, [pc, #612]	; (80004c4 <display7SEG+0x378>)
 8000260:	f001 fb9d 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000264:	2201      	movs	r2, #1
 8000266:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800026a:	4896      	ldr	r0, [pc, #600]	; (80004c4 <display7SEG+0x378>)
 800026c:	f001 fb97 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000270:	2200      	movs	r2, #0
 8000272:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000276:	4893      	ldr	r0, [pc, #588]	; (80004c4 <display7SEG+0x378>)
 8000278:	f001 fb91 	bl	800199e <HAL_GPIO_WritePin>
				break;
 800027c:	e11e      	b.n	80004bc <display7SEG+0x370>
			case 3:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 800027e:	2200      	movs	r2, #0
 8000280:	2140      	movs	r1, #64	; 0x40
 8000282:	4890      	ldr	r0, [pc, #576]	; (80004c4 <display7SEG+0x378>)
 8000284:	f001 fb8b 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000288:	2200      	movs	r2, #0
 800028a:	2180      	movs	r1, #128	; 0x80
 800028c:	488d      	ldr	r0, [pc, #564]	; (80004c4 <display7SEG+0x378>)
 800028e:	f001 fb86 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000292:	2200      	movs	r2, #0
 8000294:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000298:	488a      	ldr	r0, [pc, #552]	; (80004c4 <display7SEG+0x378>)
 800029a:	f001 fb80 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 800029e:	2200      	movs	r2, #0
 80002a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002a4:	4887      	ldr	r0, [pc, #540]	; (80004c4 <display7SEG+0x378>)
 80002a6:	f001 fb7a 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80002aa:	2201      	movs	r2, #1
 80002ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002b0:	4884      	ldr	r0, [pc, #528]	; (80004c4 <display7SEG+0x378>)
 80002b2:	f001 fb74 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 80002b6:	2201      	movs	r2, #1
 80002b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002bc:	4881      	ldr	r0, [pc, #516]	; (80004c4 <display7SEG+0x378>)
 80002be:	f001 fb6e 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 80002c2:	2200      	movs	r2, #0
 80002c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002c8:	487e      	ldr	r0, [pc, #504]	; (80004c4 <display7SEG+0x378>)
 80002ca:	f001 fb68 	bl	800199e <HAL_GPIO_WritePin>
				break;
 80002ce:	e0f5      	b.n	80004bc <display7SEG+0x370>
			case 4:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 80002d0:	2201      	movs	r2, #1
 80002d2:	2140      	movs	r1, #64	; 0x40
 80002d4:	487b      	ldr	r0, [pc, #492]	; (80004c4 <display7SEG+0x378>)
 80002d6:	f001 fb62 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80002da:	2200      	movs	r2, #0
 80002dc:	2180      	movs	r1, #128	; 0x80
 80002de:	4879      	ldr	r0, [pc, #484]	; (80004c4 <display7SEG+0x378>)
 80002e0:	f001 fb5d 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80002e4:	2200      	movs	r2, #0
 80002e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ea:	4876      	ldr	r0, [pc, #472]	; (80004c4 <display7SEG+0x378>)
 80002ec:	f001 fb57 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 80002f0:	2201      	movs	r2, #1
 80002f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002f6:	4873      	ldr	r0, [pc, #460]	; (80004c4 <display7SEG+0x378>)
 80002f8:	f001 fb51 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80002fc:	2201      	movs	r2, #1
 80002fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000302:	4870      	ldr	r0, [pc, #448]	; (80004c4 <display7SEG+0x378>)
 8000304:	f001 fb4b 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800030e:	486d      	ldr	r0, [pc, #436]	; (80004c4 <display7SEG+0x378>)
 8000310:	f001 fb45 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000314:	2200      	movs	r2, #0
 8000316:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800031a:	486a      	ldr	r0, [pc, #424]	; (80004c4 <display7SEG+0x378>)
 800031c:	f001 fb3f 	bl	800199e <HAL_GPIO_WritePin>
				break;
 8000320:	e0cc      	b.n	80004bc <display7SEG+0x370>
			case 5:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000322:	2200      	movs	r2, #0
 8000324:	2140      	movs	r1, #64	; 0x40
 8000326:	4867      	ldr	r0, [pc, #412]	; (80004c4 <display7SEG+0x378>)
 8000328:	f001 fb39 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 800032c:	2201      	movs	r2, #1
 800032e:	2180      	movs	r1, #128	; 0x80
 8000330:	4864      	ldr	r0, [pc, #400]	; (80004c4 <display7SEG+0x378>)
 8000332:	f001 fb34 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000336:	2200      	movs	r2, #0
 8000338:	f44f 7180 	mov.w	r1, #256	; 0x100
 800033c:	4861      	ldr	r0, [pc, #388]	; (80004c4 <display7SEG+0x378>)
 800033e:	f001 fb2e 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000342:	2200      	movs	r2, #0
 8000344:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000348:	485e      	ldr	r0, [pc, #376]	; (80004c4 <display7SEG+0x378>)
 800034a:	f001 fb28 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 800034e:	2201      	movs	r2, #1
 8000350:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000354:	485b      	ldr	r0, [pc, #364]	; (80004c4 <display7SEG+0x378>)
 8000356:	f001 fb22 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000360:	4858      	ldr	r0, [pc, #352]	; (80004c4 <display7SEG+0x378>)
 8000362:	f001 fb1c 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000366:	2200      	movs	r2, #0
 8000368:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800036c:	4855      	ldr	r0, [pc, #340]	; (80004c4 <display7SEG+0x378>)
 800036e:	f001 fb16 	bl	800199e <HAL_GPIO_WritePin>
				break;
 8000372:	e0a3      	b.n	80004bc <display7SEG+0x370>
			case 6:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000374:	2200      	movs	r2, #0
 8000376:	2140      	movs	r1, #64	; 0x40
 8000378:	4852      	ldr	r0, [pc, #328]	; (80004c4 <display7SEG+0x378>)
 800037a:	f001 fb10 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 800037e:	2201      	movs	r2, #1
 8000380:	2180      	movs	r1, #128	; 0x80
 8000382:	4850      	ldr	r0, [pc, #320]	; (80004c4 <display7SEG+0x378>)
 8000384:	f001 fb0b 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000388:	2200      	movs	r2, #0
 800038a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800038e:	484d      	ldr	r0, [pc, #308]	; (80004c4 <display7SEG+0x378>)
 8000390:	f001 fb05 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000394:	2200      	movs	r2, #0
 8000396:	f44f 7100 	mov.w	r1, #512	; 0x200
 800039a:	484a      	ldr	r0, [pc, #296]	; (80004c4 <display7SEG+0x378>)
 800039c:	f001 faff 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 80003a0:	2200      	movs	r2, #0
 80003a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003a6:	4847      	ldr	r0, [pc, #284]	; (80004c4 <display7SEG+0x378>)
 80003a8:	f001 faf9 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 80003ac:	2200      	movs	r2, #0
 80003ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003b2:	4844      	ldr	r0, [pc, #272]	; (80004c4 <display7SEG+0x378>)
 80003b4:	f001 faf3 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 80003b8:	2200      	movs	r2, #0
 80003ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003be:	4841      	ldr	r0, [pc, #260]	; (80004c4 <display7SEG+0x378>)
 80003c0:	f001 faed 	bl	800199e <HAL_GPIO_WritePin>
				break;
 80003c4:	e07a      	b.n	80004bc <display7SEG+0x370>
			case 7:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80003c6:	2200      	movs	r2, #0
 80003c8:	2140      	movs	r1, #64	; 0x40
 80003ca:	483e      	ldr	r0, [pc, #248]	; (80004c4 <display7SEG+0x378>)
 80003cc:	f001 fae7 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80003d0:	2200      	movs	r2, #0
 80003d2:	2180      	movs	r1, #128	; 0x80
 80003d4:	483b      	ldr	r0, [pc, #236]	; (80004c4 <display7SEG+0x378>)
 80003d6:	f001 fae2 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80003da:	2200      	movs	r2, #0
 80003dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003e0:	4838      	ldr	r0, [pc, #224]	; (80004c4 <display7SEG+0x378>)
 80003e2:	f001 fadc 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 80003e6:	2201      	movs	r2, #1
 80003e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003ec:	4835      	ldr	r0, [pc, #212]	; (80004c4 <display7SEG+0x378>)
 80003ee:	f001 fad6 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80003f2:	2201      	movs	r2, #1
 80003f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003f8:	4832      	ldr	r0, [pc, #200]	; (80004c4 <display7SEG+0x378>)
 80003fa:	f001 fad0 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 80003fe:	2201      	movs	r2, #1
 8000400:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000404:	482f      	ldr	r0, [pc, #188]	; (80004c4 <display7SEG+0x378>)
 8000406:	f001 faca 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 800040a:	2201      	movs	r2, #1
 800040c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000410:	482c      	ldr	r0, [pc, #176]	; (80004c4 <display7SEG+0x378>)
 8000412:	f001 fac4 	bl	800199e <HAL_GPIO_WritePin>
				break;
 8000416:	e051      	b.n	80004bc <display7SEG+0x370>
			case 8:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000418:	2200      	movs	r2, #0
 800041a:	2140      	movs	r1, #64	; 0x40
 800041c:	4829      	ldr	r0, [pc, #164]	; (80004c4 <display7SEG+0x378>)
 800041e:	f001 fabe 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000422:	2200      	movs	r2, #0
 8000424:	2180      	movs	r1, #128	; 0x80
 8000426:	4827      	ldr	r0, [pc, #156]	; (80004c4 <display7SEG+0x378>)
 8000428:	f001 fab9 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 800042c:	2200      	movs	r2, #0
 800042e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000432:	4824      	ldr	r0, [pc, #144]	; (80004c4 <display7SEG+0x378>)
 8000434:	f001 fab3 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000438:	2200      	movs	r2, #0
 800043a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800043e:	4821      	ldr	r0, [pc, #132]	; (80004c4 <display7SEG+0x378>)
 8000440:	f001 faad 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000444:	2200      	movs	r2, #0
 8000446:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800044a:	481e      	ldr	r0, [pc, #120]	; (80004c4 <display7SEG+0x378>)
 800044c:	f001 faa7 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000450:	2200      	movs	r2, #0
 8000452:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000456:	481b      	ldr	r0, [pc, #108]	; (80004c4 <display7SEG+0x378>)
 8000458:	f001 faa1 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 800045c:	2200      	movs	r2, #0
 800045e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000462:	4818      	ldr	r0, [pc, #96]	; (80004c4 <display7SEG+0x378>)
 8000464:	f001 fa9b 	bl	800199e <HAL_GPIO_WritePin>
				break;
 8000468:	e028      	b.n	80004bc <display7SEG+0x370>
			default:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 800046a:	2200      	movs	r2, #0
 800046c:	2140      	movs	r1, #64	; 0x40
 800046e:	4815      	ldr	r0, [pc, #84]	; (80004c4 <display7SEG+0x378>)
 8000470:	f001 fa95 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000474:	2200      	movs	r2, #0
 8000476:	2180      	movs	r1, #128	; 0x80
 8000478:	4812      	ldr	r0, [pc, #72]	; (80004c4 <display7SEG+0x378>)
 800047a:	f001 fa90 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 800047e:	2200      	movs	r2, #0
 8000480:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000484:	480f      	ldr	r0, [pc, #60]	; (80004c4 <display7SEG+0x378>)
 8000486:	f001 fa8a 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 800048a:	2200      	movs	r2, #0
 800048c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000490:	480c      	ldr	r0, [pc, #48]	; (80004c4 <display7SEG+0x378>)
 8000492:	f001 fa84 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000496:	2201      	movs	r2, #1
 8000498:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800049c:	4809      	ldr	r0, [pc, #36]	; (80004c4 <display7SEG+0x378>)
 800049e:	f001 fa7e 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 80004a2:	2200      	movs	r2, #0
 80004a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004a8:	4806      	ldr	r0, [pc, #24]	; (80004c4 <display7SEG+0x378>)
 80004aa:	f001 fa78 	bl	800199e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 80004ae:	2200      	movs	r2, #0
 80004b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004b4:	4803      	ldr	r0, [pc, #12]	; (80004c4 <display7SEG+0x378>)
 80004b6:	f001 fa72 	bl	800199e <HAL_GPIO_WritePin>
				break;
 80004ba:	bf00      	nop
		}
}
 80004bc:	bf00      	nop
 80004be:	3708      	adds	r7, #8
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	40010800 	.word	0x40010800

080004c8 <updateBuffer>:

void updateBuffer(int num1,int num2) {
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	6039      	str	r1, [r7, #0]
	led_buffer[0]= num1 /10;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	4a18      	ldr	r2, [pc, #96]	; (8000538 <updateBuffer+0x70>)
 80004d6:	fb82 1203 	smull	r1, r2, r2, r3
 80004da:	1092      	asrs	r2, r2, #2
 80004dc:	17db      	asrs	r3, r3, #31
 80004de:	1ad3      	subs	r3, r2, r3
 80004e0:	4a16      	ldr	r2, [pc, #88]	; (800053c <updateBuffer+0x74>)
 80004e2:	6013      	str	r3, [r2, #0]
	led_buffer[1]= num1 %10;
 80004e4:	6879      	ldr	r1, [r7, #4]
 80004e6:	4b14      	ldr	r3, [pc, #80]	; (8000538 <updateBuffer+0x70>)
 80004e8:	fb83 2301 	smull	r2, r3, r3, r1
 80004ec:	109a      	asrs	r2, r3, #2
 80004ee:	17cb      	asrs	r3, r1, #31
 80004f0:	1ad2      	subs	r2, r2, r3
 80004f2:	4613      	mov	r3, r2
 80004f4:	009b      	lsls	r3, r3, #2
 80004f6:	4413      	add	r3, r2
 80004f8:	005b      	lsls	r3, r3, #1
 80004fa:	1aca      	subs	r2, r1, r3
 80004fc:	4b0f      	ldr	r3, [pc, #60]	; (800053c <updateBuffer+0x74>)
 80004fe:	605a      	str	r2, [r3, #4]
	led_buffer[2]= num2 /10;
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	4a0d      	ldr	r2, [pc, #52]	; (8000538 <updateBuffer+0x70>)
 8000504:	fb82 1203 	smull	r1, r2, r2, r3
 8000508:	1092      	asrs	r2, r2, #2
 800050a:	17db      	asrs	r3, r3, #31
 800050c:	1ad3      	subs	r3, r2, r3
 800050e:	4a0b      	ldr	r2, [pc, #44]	; (800053c <updateBuffer+0x74>)
 8000510:	6093      	str	r3, [r2, #8]
	led_buffer[3]= num2 %10;
 8000512:	6839      	ldr	r1, [r7, #0]
 8000514:	4b08      	ldr	r3, [pc, #32]	; (8000538 <updateBuffer+0x70>)
 8000516:	fb83 2301 	smull	r2, r3, r3, r1
 800051a:	109a      	asrs	r2, r3, #2
 800051c:	17cb      	asrs	r3, r1, #31
 800051e:	1ad2      	subs	r2, r2, r3
 8000520:	4613      	mov	r3, r2
 8000522:	009b      	lsls	r3, r3, #2
 8000524:	4413      	add	r3, r2
 8000526:	005b      	lsls	r3, r3, #1
 8000528:	1aca      	subs	r2, r1, r3
 800052a:	4b04      	ldr	r3, [pc, #16]	; (800053c <updateBuffer+0x74>)
 800052c:	60da      	str	r2, [r3, #12]
}
 800052e:	bf00      	nop
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr
 8000538:	66666667 	.word	0x66666667
 800053c:	20000048 	.word	0x20000048

08000540 <update7SEG>:
void update7SEG(int index){
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2b03      	cmp	r3, #3
 800054c:	d87a      	bhi.n	8000644 <update7SEG+0x104>
 800054e:	a201      	add	r2, pc, #4	; (adr r2, 8000554 <update7SEG+0x14>)
 8000550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000554:	08000565 	.word	0x08000565
 8000558:	0800059d 	.word	0x0800059d
 800055c:	080005d5 	.word	0x080005d5
 8000560:	0800060d 	.word	0x0800060d
    switch (index){
        case 0:
            //Display the first 7SEG with led_buffer[0]
        	 HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,RESET);
 8000564:	2200      	movs	r2, #0
 8000566:	2108      	movs	r1, #8
 8000568:	4839      	ldr	r0, [pc, #228]	; (8000650 <update7SEG+0x110>)
 800056a:	f001 fa18 	bl	800199e <HAL_GPIO_WritePin>
        	 HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,SET);
 800056e:	2201      	movs	r2, #1
 8000570:	2110      	movs	r1, #16
 8000572:	4837      	ldr	r0, [pc, #220]	; (8000650 <update7SEG+0x110>)
 8000574:	f001 fa13 	bl	800199e <HAL_GPIO_WritePin>
        	 HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,SET);
 8000578:	2201      	movs	r2, #1
 800057a:	2120      	movs	r1, #32
 800057c:	4834      	ldr	r0, [pc, #208]	; (8000650 <update7SEG+0x110>)
 800057e:	f001 fa0e 	bl	800199e <HAL_GPIO_WritePin>
        	 HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,SET);
 8000582:	2201      	movs	r2, #1
 8000584:	2140      	movs	r1, #64	; 0x40
 8000586:	4832      	ldr	r0, [pc, #200]	; (8000650 <update7SEG+0x110>)
 8000588:	f001 fa09 	bl	800199e <HAL_GPIO_WritePin>
        	 display7SEG(led_buffer[index]);
 800058c:	4a31      	ldr	r2, [pc, #196]	; (8000654 <update7SEG+0x114>)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000594:	4618      	mov	r0, r3
 8000596:	f7ff fdd9 	bl	800014c <display7SEG>
            break;
 800059a:	e054      	b.n	8000646 <update7SEG+0x106>
        case 1:
            //Display the second 7SEG with led_buffer[1]
        	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,SET);
 800059c:	2201      	movs	r2, #1
 800059e:	2108      	movs	r1, #8
 80005a0:	482b      	ldr	r0, [pc, #172]	; (8000650 <update7SEG+0x110>)
 80005a2:	f001 f9fc 	bl	800199e <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2110      	movs	r1, #16
 80005aa:	4829      	ldr	r0, [pc, #164]	; (8000650 <update7SEG+0x110>)
 80005ac:	f001 f9f7 	bl	800199e <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,SET);
 80005b0:	2201      	movs	r2, #1
 80005b2:	2120      	movs	r1, #32
 80005b4:	4826      	ldr	r0, [pc, #152]	; (8000650 <update7SEG+0x110>)
 80005b6:	f001 f9f2 	bl	800199e <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,SET);
 80005ba:	2201      	movs	r2, #1
 80005bc:	2140      	movs	r1, #64	; 0x40
 80005be:	4824      	ldr	r0, [pc, #144]	; (8000650 <update7SEG+0x110>)
 80005c0:	f001 f9ed 	bl	800199e <HAL_GPIO_WritePin>
        	display7SEG(led_buffer[index]);
 80005c4:	4a23      	ldr	r2, [pc, #140]	; (8000654 <update7SEG+0x114>)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f7ff fdbd 	bl	800014c <display7SEG>
            break;
 80005d2:	e038      	b.n	8000646 <update7SEG+0x106>
        case 2:
            //Display the third 7SEG with led_buffer[2]
        	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	2108      	movs	r1, #8
 80005d8:	481d      	ldr	r0, [pc, #116]	; (8000650 <update7SEG+0x110>)
 80005da:	f001 f9e0 	bl	800199e <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,SET);
 80005de:	2201      	movs	r2, #1
 80005e0:	2110      	movs	r1, #16
 80005e2:	481b      	ldr	r0, [pc, #108]	; (8000650 <update7SEG+0x110>)
 80005e4:	f001 f9db 	bl	800199e <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2120      	movs	r1, #32
 80005ec:	4818      	ldr	r0, [pc, #96]	; (8000650 <update7SEG+0x110>)
 80005ee:	f001 f9d6 	bl	800199e <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,SET);
 80005f2:	2201      	movs	r2, #1
 80005f4:	2140      	movs	r1, #64	; 0x40
 80005f6:	4816      	ldr	r0, [pc, #88]	; (8000650 <update7SEG+0x110>)
 80005f8:	f001 f9d1 	bl	800199e <HAL_GPIO_WritePin>
        	display7SEG(led_buffer[index]);
 80005fc:	4a15      	ldr	r2, [pc, #84]	; (8000654 <update7SEG+0x114>)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff fda1 	bl	800014c <display7SEG>
            break;
 800060a:	e01c      	b.n	8000646 <update7SEG+0x106>
        case 3:
            //Display the forth 7SEG with led_buffer[3]
        	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,SET);
 800060c:	2201      	movs	r2, #1
 800060e:	2108      	movs	r1, #8
 8000610:	480f      	ldr	r0, [pc, #60]	; (8000650 <update7SEG+0x110>)
 8000612:	f001 f9c4 	bl	800199e <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,SET);
 8000616:	2201      	movs	r2, #1
 8000618:	2110      	movs	r1, #16
 800061a:	480d      	ldr	r0, [pc, #52]	; (8000650 <update7SEG+0x110>)
 800061c:	f001 f9bf 	bl	800199e <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,SET);
 8000620:	2201      	movs	r2, #1
 8000622:	2120      	movs	r1, #32
 8000624:	480a      	ldr	r0, [pc, #40]	; (8000650 <update7SEG+0x110>)
 8000626:	f001 f9ba 	bl	800199e <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	2140      	movs	r1, #64	; 0x40
 800062e:	4808      	ldr	r0, [pc, #32]	; (8000650 <update7SEG+0x110>)
 8000630:	f001 f9b5 	bl	800199e <HAL_GPIO_WritePin>
        	display7SEG(led_buffer[index]);
 8000634:	4a07      	ldr	r2, [pc, #28]	; (8000654 <update7SEG+0x114>)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800063c:	4618      	mov	r0, r3
 800063e:	f7ff fd85 	bl	800014c <display7SEG>
            break;
 8000642:	e000      	b.n	8000646 <update7SEG+0x106>
        default:
            break;
 8000644:	bf00      	nop
    }
}
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40010c00 	.word	0x40010c00
 8000654:	20000048 	.word	0x20000048

08000658 <clearAllLed>:
 *      Author: OS
 */
#include "main.h"
#include "displayLed.h"

void clearAllLed() {
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Red1_GPIO_Port, LED_Red1_Pin, SET);
 800065c:	2201      	movs	r2, #1
 800065e:	2101      	movs	r1, #1
 8000660:	480e      	ldr	r0, [pc, #56]	; (800069c <clearAllLed+0x44>)
 8000662:	f001 f99c 	bl	800199e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Yellow1_GPIO_Port, LED_Yellow1_Pin, SET);
 8000666:	2201      	movs	r2, #1
 8000668:	2102      	movs	r1, #2
 800066a:	480c      	ldr	r0, [pc, #48]	; (800069c <clearAllLed+0x44>)
 800066c:	f001 f997 	bl	800199e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Green1_GPIO_Port, LED_Green1_Pin, SET);
 8000670:	2201      	movs	r2, #1
 8000672:	2104      	movs	r1, #4
 8000674:	4809      	ldr	r0, [pc, #36]	; (800069c <clearAllLed+0x44>)
 8000676:	f001 f992 	bl	800199e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Red2_GPIO_Port, LED_Red2_Pin, SET);
 800067a:	2201      	movs	r2, #1
 800067c:	2108      	movs	r1, #8
 800067e:	4807      	ldr	r0, [pc, #28]	; (800069c <clearAllLed+0x44>)
 8000680:	f001 f98d 	bl	800199e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Yellow2_GPIO_Port, LED_Yellow2_Pin, SET);
 8000684:	2201      	movs	r2, #1
 8000686:	2110      	movs	r1, #16
 8000688:	4804      	ldr	r0, [pc, #16]	; (800069c <clearAllLed+0x44>)
 800068a:	f001 f988 	bl	800199e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Green2_GPIO_Port, LED_Green2_Pin, SET);
 800068e:	2201      	movs	r2, #1
 8000690:	2120      	movs	r1, #32
 8000692:	4802      	ldr	r0, [pc, #8]	; (800069c <clearAllLed+0x44>)
 8000694:	f001 f983 	bl	800199e <HAL_GPIO_WritePin>
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40010800 	.word	0x40010800

080006a0 <displayRed1>:

void displayRed1() {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Red1_GPIO_Port, LED_Red1_Pin, RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2101      	movs	r1, #1
 80006a8:	4807      	ldr	r0, [pc, #28]	; (80006c8 <displayRed1+0x28>)
 80006aa:	f001 f978 	bl	800199e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Yellow1_GPIO_Port, LED_Yellow1_Pin, SET);
 80006ae:	2201      	movs	r2, #1
 80006b0:	2102      	movs	r1, #2
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <displayRed1+0x28>)
 80006b4:	f001 f973 	bl	800199e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Green1_GPIO_Port, LED_Green1_Pin, SET);
 80006b8:	2201      	movs	r2, #1
 80006ba:	2104      	movs	r1, #4
 80006bc:	4802      	ldr	r0, [pc, #8]	; (80006c8 <displayRed1+0x28>)
 80006be:	f001 f96e 	bl	800199e <HAL_GPIO_WritePin>
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40010800 	.word	0x40010800

080006cc <displayYellow1>:

void displayYellow1() {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Red1_GPIO_Port, LED_Red1_Pin, SET);
 80006d0:	2201      	movs	r2, #1
 80006d2:	2101      	movs	r1, #1
 80006d4:	4807      	ldr	r0, [pc, #28]	; (80006f4 <displayYellow1+0x28>)
 80006d6:	f001 f962 	bl	800199e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Yellow1_GPIO_Port, LED_Yellow1_Pin, RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	2102      	movs	r1, #2
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <displayYellow1+0x28>)
 80006e0:	f001 f95d 	bl	800199e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Green1_GPIO_Port, LED_Green1_Pin, SET);
 80006e4:	2201      	movs	r2, #1
 80006e6:	2104      	movs	r1, #4
 80006e8:	4802      	ldr	r0, [pc, #8]	; (80006f4 <displayYellow1+0x28>)
 80006ea:	f001 f958 	bl	800199e <HAL_GPIO_WritePin>
}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40010800 	.word	0x40010800

080006f8 <displayGreen1>:

void displayGreen1() {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Red1_GPIO_Port, LED_Red1_Pin, SET);
 80006fc:	2201      	movs	r2, #1
 80006fe:	2101      	movs	r1, #1
 8000700:	4807      	ldr	r0, [pc, #28]	; (8000720 <displayGreen1+0x28>)
 8000702:	f001 f94c 	bl	800199e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Yellow1_GPIO_Port, LED_Yellow1_Pin, SET);
 8000706:	2201      	movs	r2, #1
 8000708:	2102      	movs	r1, #2
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <displayGreen1+0x28>)
 800070c:	f001 f947 	bl	800199e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Green1_GPIO_Port, LED_Green1_Pin, RESET);
 8000710:	2200      	movs	r2, #0
 8000712:	2104      	movs	r1, #4
 8000714:	4802      	ldr	r0, [pc, #8]	; (8000720 <displayGreen1+0x28>)
 8000716:	f001 f942 	bl	800199e <HAL_GPIO_WritePin>
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40010800 	.word	0x40010800

08000724 <displayRed2>:

void displayRed2() {
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Red2_GPIO_Port, LED_Red2_Pin, RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	2108      	movs	r1, #8
 800072c:	4807      	ldr	r0, [pc, #28]	; (800074c <displayRed2+0x28>)
 800072e:	f001 f936 	bl	800199e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Yellow2_GPIO_Port, LED_Yellow2_Pin, SET);
 8000732:	2201      	movs	r2, #1
 8000734:	2110      	movs	r1, #16
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <displayRed2+0x28>)
 8000738:	f001 f931 	bl	800199e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Green2_GPIO_Port, LED_Green2_Pin, SET);
 800073c:	2201      	movs	r2, #1
 800073e:	2120      	movs	r1, #32
 8000740:	4802      	ldr	r0, [pc, #8]	; (800074c <displayRed2+0x28>)
 8000742:	f001 f92c 	bl	800199e <HAL_GPIO_WritePin>
}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40010800 	.word	0x40010800

08000750 <displayYellow2>:


void displayYellow2() {
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Red2_GPIO_Port, LED_Red2_Pin, SET);
 8000754:	2201      	movs	r2, #1
 8000756:	2108      	movs	r1, #8
 8000758:	4807      	ldr	r0, [pc, #28]	; (8000778 <displayYellow2+0x28>)
 800075a:	f001 f920 	bl	800199e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Yellow2_GPIO_Port, LED_Yellow2_Pin, RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	2110      	movs	r1, #16
 8000762:	4805      	ldr	r0, [pc, #20]	; (8000778 <displayYellow2+0x28>)
 8000764:	f001 f91b 	bl	800199e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Green2_GPIO_Port, LED_Green2_Pin, SET);
 8000768:	2201      	movs	r2, #1
 800076a:	2120      	movs	r1, #32
 800076c:	4802      	ldr	r0, [pc, #8]	; (8000778 <displayYellow2+0x28>)
 800076e:	f001 f916 	bl	800199e <HAL_GPIO_WritePin>
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40010800 	.word	0x40010800

0800077c <displayGreen2>:

void displayGreen2() {
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_Red2_GPIO_Port, LED_Red2_Pin, SET);
 8000780:	2201      	movs	r2, #1
 8000782:	2108      	movs	r1, #8
 8000784:	4807      	ldr	r0, [pc, #28]	; (80007a4 <displayGreen2+0x28>)
 8000786:	f001 f90a 	bl	800199e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Yellow2_GPIO_Port, LED_Yellow2_Pin, SET);
 800078a:	2201      	movs	r2, #1
 800078c:	2110      	movs	r1, #16
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <displayGreen2+0x28>)
 8000790:	f001 f905 	bl	800199e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Green2_GPIO_Port, LED_Green2_Pin, RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	2120      	movs	r1, #32
 8000798:	4802      	ldr	r0, [pc, #8]	; (80007a4 <displayGreen2+0x28>)
 800079a:	f001 f900 	bl	800199e <HAL_GPIO_WritePin>
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40010800 	.word	0x40010800

080007a8 <toggleRed>:

void toggleRed() {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_Red1_GPIO_Port, LED_Red1_Pin);
 80007ac:	2101      	movs	r1, #1
 80007ae:	4804      	ldr	r0, [pc, #16]	; (80007c0 <toggleRed+0x18>)
 80007b0:	f001 f90d 	bl	80019ce <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_Red2_GPIO_Port, LED_Red2_Pin);
 80007b4:	2108      	movs	r1, #8
 80007b6:	4802      	ldr	r0, [pc, #8]	; (80007c0 <toggleRed+0x18>)
 80007b8:	f001 f909 	bl	80019ce <HAL_GPIO_TogglePin>
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40010800 	.word	0x40010800

080007c4 <toggleYellow>:

void toggleYellow() {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_Yellow1_GPIO_Port, LED_Yellow1_Pin);
 80007c8:	2102      	movs	r1, #2
 80007ca:	4804      	ldr	r0, [pc, #16]	; (80007dc <toggleYellow+0x18>)
 80007cc:	f001 f8ff 	bl	80019ce <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_Yellow2_GPIO_Port, LED_Yellow2_Pin);
 80007d0:	2110      	movs	r1, #16
 80007d2:	4802      	ldr	r0, [pc, #8]	; (80007dc <toggleYellow+0x18>)
 80007d4:	f001 f8fb 	bl	80019ce <HAL_GPIO_TogglePin>
}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40010800 	.word	0x40010800

080007e0 <toggleGreen>:

void toggleGreen() {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_Green1_GPIO_Port, LED_Green1_Pin);
 80007e4:	2104      	movs	r1, #4
 80007e6:	4804      	ldr	r0, [pc, #16]	; (80007f8 <toggleGreen+0x18>)
 80007e8:	f001 f8f1 	bl	80019ce <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_Green2_GPIO_Port, LED_Green2_Pin);
 80007ec:	2120      	movs	r1, #32
 80007ee:	4802      	ldr	r0, [pc, #8]	; (80007f8 <toggleGreen+0x18>)
 80007f0:	f001 f8ed 	bl	80019ce <HAL_GPIO_TogglePin>
}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40010800 	.word	0x40010800

080007fc <increase>:
 *      Author: OS
 */

#include "global.h"

void increase() {
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
	time1++;
 8000800:	4b07      	ldr	r3, [pc, #28]	; (8000820 <increase+0x24>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	3301      	adds	r3, #1
 8000806:	4a06      	ldr	r2, [pc, #24]	; (8000820 <increase+0x24>)
 8000808:	6013      	str	r3, [r2, #0]
	if(time1>99) time1=1;
 800080a:	4b05      	ldr	r3, [pc, #20]	; (8000820 <increase+0x24>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2b63      	cmp	r3, #99	; 0x63
 8000810:	dd02      	ble.n	8000818 <increase+0x1c>
 8000812:	4b03      	ldr	r3, [pc, #12]	; (8000820 <increase+0x24>)
 8000814:	2201      	movs	r2, #1
 8000816:	601a      	str	r2, [r3, #0]
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	20000058 	.word	0x20000058

08000824 <normalState>:

void normalState(void) {
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	switch(status) {
 8000828:	4ba9      	ldr	r3, [pc, #676]	; (8000ad0 <normalState+0x2ac>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b0c      	cmp	r3, #12
 800082e:	f200 8221 	bhi.w	8000c74 <normalState+0x450>
 8000832:	a201      	add	r2, pc, #4	; (adr r2, 8000838 <normalState+0x14>)
 8000834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000838:	0800086d 	.word	0x0800086d
 800083c:	0800089f 	.word	0x0800089f
 8000840:	0800092b 	.word	0x0800092b
 8000844:	080009b7 	.word	0x080009b7
 8000848:	08000a43 	.word	0x08000a43
 800084c:	08000c75 	.word	0x08000c75
 8000850:	08000c75 	.word	0x08000c75
 8000854:	08000c75 	.word	0x08000c75
 8000858:	08000c75 	.word	0x08000c75
 800085c:	08000c75 	.word	0x08000c75
 8000860:	08000af1 	.word	0x08000af1
 8000864:	08000b63 	.word	0x08000b63
 8000868:	08000be5 	.word	0x08000be5
	case INIT:
		clearAllLed();
 800086c:	f7ff fef4 	bl	8000658 <clearAllLed>
		status=RedGreen;
 8000870:	4b97      	ldr	r3, [pc, #604]	; (8000ad0 <normalState+0x2ac>)
 8000872:	2201      	movs	r2, #1
 8000874:	601a      	str	r2, [r3, #0]
		setTimer1(timeGreen*100);
 8000876:	4b97      	ldr	r3, [pc, #604]	; (8000ad4 <normalState+0x2b0>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	2264      	movs	r2, #100	; 0x64
 800087c:	fb02 f303 	mul.w	r3, r2, r3
 8000880:	4618      	mov	r0, r3
 8000882:	f000 fc09 	bl	8001098 <setTimer1>
		setTimer2(100);
 8000886:	2064      	movs	r0, #100	; 0x64
 8000888:	f000 fc1a 	bl	80010c0 <setTimer2>
		time1=timeRed;
 800088c:	4b92      	ldr	r3, [pc, #584]	; (8000ad8 <normalState+0x2b4>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a92      	ldr	r2, [pc, #584]	; (8000adc <normalState+0x2b8>)
 8000892:	6013      	str	r3, [r2, #0]
		time2=timeGreen;
 8000894:	4b8f      	ldr	r3, [pc, #572]	; (8000ad4 <normalState+0x2b0>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a91      	ldr	r2, [pc, #580]	; (8000ae0 <normalState+0x2bc>)
 800089a:	6013      	str	r3, [r2, #0]
		break;
 800089c:	e1f9      	b.n	8000c92 <normalState+0x46e>
	case RedGreen:
		displayRed1();
 800089e:	f7ff feff 	bl	80006a0 <displayRed1>
		displayGreen2();
 80008a2:	f7ff ff6b 	bl	800077c <displayGreen2>
		if(timer1_flag==1) {// transit state
 80008a6:	4b8f      	ldr	r3, [pc, #572]	; (8000ae4 <normalState+0x2c0>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d115      	bne.n	80008da <normalState+0xb6>
			status=RedAm;
 80008ae:	4b88      	ldr	r3, [pc, #544]	; (8000ad0 <normalState+0x2ac>)
 80008b0:	2202      	movs	r2, #2
 80008b2:	601a      	str	r2, [r3, #0]
			setTimer1(timeYellow*100);
 80008b4:	4b8c      	ldr	r3, [pc, #560]	; (8000ae8 <normalState+0x2c4>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2264      	movs	r2, #100	; 0x64
 80008ba:	fb02 f303 	mul.w	r3, r2, r3
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 fbea 	bl	8001098 <setTimer1>
			setTimer2(100);
 80008c4:	2064      	movs	r0, #100	; 0x64
 80008c6:	f000 fbfb 	bl	80010c0 <setTimer2>
			time1=timeYellow;
 80008ca:	4b87      	ldr	r3, [pc, #540]	; (8000ae8 <normalState+0x2c4>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a83      	ldr	r2, [pc, #524]	; (8000adc <normalState+0x2b8>)
 80008d0:	6013      	str	r3, [r2, #0]
			time2=timeYellow;
 80008d2:	4b85      	ldr	r3, [pc, #532]	; (8000ae8 <normalState+0x2c4>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a82      	ldr	r2, [pc, #520]	; (8000ae0 <normalState+0x2bc>)
 80008d8:	6013      	str	r3, [r2, #0]
		}

		if(timer2_flag==1) {// update time
 80008da:	4b84      	ldr	r3, [pc, #528]	; (8000aec <normalState+0x2c8>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d10c      	bne.n	80008fc <normalState+0xd8>
			setTimer2(100);
 80008e2:	2064      	movs	r0, #100	; 0x64
 80008e4:	f000 fbec 	bl	80010c0 <setTimer2>
			time1--;
 80008e8:	4b7c      	ldr	r3, [pc, #496]	; (8000adc <normalState+0x2b8>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	3b01      	subs	r3, #1
 80008ee:	4a7b      	ldr	r2, [pc, #492]	; (8000adc <normalState+0x2b8>)
 80008f0:	6013      	str	r3, [r2, #0]
			time2--;
 80008f2:	4b7b      	ldr	r3, [pc, #492]	; (8000ae0 <normalState+0x2bc>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	3b01      	subs	r3, #1
 80008f8:	4a79      	ldr	r2, [pc, #484]	; (8000ae0 <normalState+0x2bc>)
 80008fa:	6013      	str	r3, [r2, #0]
		}

		if(is_button_pressed(0)) {
 80008fc:	2000      	movs	r0, #0
 80008fe:	f000 fa69 	bl	8000dd4 <is_button_pressed>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	f000 81b7 	beq.w	8000c78 <normalState+0x454>
			status=ManRed;
 800090a:	4b71      	ldr	r3, [pc, #452]	; (8000ad0 <normalState+0x2ac>)
 800090c:	220a      	movs	r2, #10
 800090e:	601a      	str	r2, [r3, #0]
			time1=timeRed;
 8000910:	4b71      	ldr	r3, [pc, #452]	; (8000ad8 <normalState+0x2b4>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a71      	ldr	r2, [pc, #452]	; (8000adc <normalState+0x2b8>)
 8000916:	6013      	str	r3, [r2, #0]
			time2=2;
 8000918:	4b71      	ldr	r3, [pc, #452]	; (8000ae0 <normalState+0x2bc>)
 800091a:	2202      	movs	r2, #2
 800091c:	601a      	str	r2, [r3, #0]
			clearAllLed();
 800091e:	f7ff fe9b 	bl	8000658 <clearAllLed>
			setTimer5(25);
 8000922:	2019      	movs	r0, #25
 8000924:	f000 fc08 	bl	8001138 <setTimer5>
		}

		break;
 8000928:	e1a6      	b.n	8000c78 <normalState+0x454>
	case RedAm:
		displayRed1();
 800092a:	f7ff feb9 	bl	80006a0 <displayRed1>
		displayYellow2();
 800092e:	f7ff ff0f 	bl	8000750 <displayYellow2>
		if(timer1_flag==1) { //transit state
 8000932:	4b6c      	ldr	r3, [pc, #432]	; (8000ae4 <normalState+0x2c0>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	2b01      	cmp	r3, #1
 8000938:	d115      	bne.n	8000966 <normalState+0x142>
			status=GreenRed;
 800093a:	4b65      	ldr	r3, [pc, #404]	; (8000ad0 <normalState+0x2ac>)
 800093c:	2203      	movs	r2, #3
 800093e:	601a      	str	r2, [r3, #0]
			setTimer1(timeGreen*100);
 8000940:	4b64      	ldr	r3, [pc, #400]	; (8000ad4 <normalState+0x2b0>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2264      	movs	r2, #100	; 0x64
 8000946:	fb02 f303 	mul.w	r3, r2, r3
 800094a:	4618      	mov	r0, r3
 800094c:	f000 fba4 	bl	8001098 <setTimer1>
			setTimer2(100);
 8000950:	2064      	movs	r0, #100	; 0x64
 8000952:	f000 fbb5 	bl	80010c0 <setTimer2>
			time1=timeGreen;
 8000956:	4b5f      	ldr	r3, [pc, #380]	; (8000ad4 <normalState+0x2b0>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a60      	ldr	r2, [pc, #384]	; (8000adc <normalState+0x2b8>)
 800095c:	6013      	str	r3, [r2, #0]
			time2=timeRed;
 800095e:	4b5e      	ldr	r3, [pc, #376]	; (8000ad8 <normalState+0x2b4>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a5f      	ldr	r2, [pc, #380]	; (8000ae0 <normalState+0x2bc>)
 8000964:	6013      	str	r3, [r2, #0]
		}

		if(timer2_flag==1) { //update time
 8000966:	4b61      	ldr	r3, [pc, #388]	; (8000aec <normalState+0x2c8>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2b01      	cmp	r3, #1
 800096c:	d10c      	bne.n	8000988 <normalState+0x164>
			time1--;
 800096e:	4b5b      	ldr	r3, [pc, #364]	; (8000adc <normalState+0x2b8>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	3b01      	subs	r3, #1
 8000974:	4a59      	ldr	r2, [pc, #356]	; (8000adc <normalState+0x2b8>)
 8000976:	6013      	str	r3, [r2, #0]
			time2--;
 8000978:	4b59      	ldr	r3, [pc, #356]	; (8000ae0 <normalState+0x2bc>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	3b01      	subs	r3, #1
 800097e:	4a58      	ldr	r2, [pc, #352]	; (8000ae0 <normalState+0x2bc>)
 8000980:	6013      	str	r3, [r2, #0]
			setTimer2(100);
 8000982:	2064      	movs	r0, #100	; 0x64
 8000984:	f000 fb9c 	bl	80010c0 <setTimer2>
		}

		if(is_button_pressed(0)) {
 8000988:	2000      	movs	r0, #0
 800098a:	f000 fa23 	bl	8000dd4 <is_button_pressed>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	f000 8173 	beq.w	8000c7c <normalState+0x458>
			status=ManRed;
 8000996:	4b4e      	ldr	r3, [pc, #312]	; (8000ad0 <normalState+0x2ac>)
 8000998:	220a      	movs	r2, #10
 800099a:	601a      	str	r2, [r3, #0]
			time1=timeRed;
 800099c:	4b4e      	ldr	r3, [pc, #312]	; (8000ad8 <normalState+0x2b4>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a4e      	ldr	r2, [pc, #312]	; (8000adc <normalState+0x2b8>)
 80009a2:	6013      	str	r3, [r2, #0]
			time2=2;
 80009a4:	4b4e      	ldr	r3, [pc, #312]	; (8000ae0 <normalState+0x2bc>)
 80009a6:	2202      	movs	r2, #2
 80009a8:	601a      	str	r2, [r3, #0]
			clearAllLed();
 80009aa:	f7ff fe55 	bl	8000658 <clearAllLed>
			setTimer5(25);
 80009ae:	2019      	movs	r0, #25
 80009b0:	f000 fbc2 	bl	8001138 <setTimer5>
		}

		break;
 80009b4:	e162      	b.n	8000c7c <normalState+0x458>
	case GreenRed:
		displayGreen1();
 80009b6:	f7ff fe9f 	bl	80006f8 <displayGreen1>
		displayRed2();
 80009ba:	f7ff feb3 	bl	8000724 <displayRed2>
		if(timer1_flag==1) { //transit state
 80009be:	4b49      	ldr	r3, [pc, #292]	; (8000ae4 <normalState+0x2c0>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d115      	bne.n	80009f2 <normalState+0x1ce>
			status=AmRed;
 80009c6:	4b42      	ldr	r3, [pc, #264]	; (8000ad0 <normalState+0x2ac>)
 80009c8:	2204      	movs	r2, #4
 80009ca:	601a      	str	r2, [r3, #0]
			setTimer1(timeYellow*100);
 80009cc:	4b46      	ldr	r3, [pc, #280]	; (8000ae8 <normalState+0x2c4>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2264      	movs	r2, #100	; 0x64
 80009d2:	fb02 f303 	mul.w	r3, r2, r3
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 fb5e 	bl	8001098 <setTimer1>
			setTimer2(100);
 80009dc:	2064      	movs	r0, #100	; 0x64
 80009de:	f000 fb6f 	bl	80010c0 <setTimer2>
			time1=timeYellow;
 80009e2:	4b41      	ldr	r3, [pc, #260]	; (8000ae8 <normalState+0x2c4>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a3d      	ldr	r2, [pc, #244]	; (8000adc <normalState+0x2b8>)
 80009e8:	6013      	str	r3, [r2, #0]
			time2=timeYellow;
 80009ea:	4b3f      	ldr	r3, [pc, #252]	; (8000ae8 <normalState+0x2c4>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a3c      	ldr	r2, [pc, #240]	; (8000ae0 <normalState+0x2bc>)
 80009f0:	6013      	str	r3, [r2, #0]
		}

		if(timer2_flag==1) {//update time
 80009f2:	4b3e      	ldr	r3, [pc, #248]	; (8000aec <normalState+0x2c8>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d10c      	bne.n	8000a14 <normalState+0x1f0>
			setTimer2(100);
 80009fa:	2064      	movs	r0, #100	; 0x64
 80009fc:	f000 fb60 	bl	80010c0 <setTimer2>
			time1--;
 8000a00:	4b36      	ldr	r3, [pc, #216]	; (8000adc <normalState+0x2b8>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	3b01      	subs	r3, #1
 8000a06:	4a35      	ldr	r2, [pc, #212]	; (8000adc <normalState+0x2b8>)
 8000a08:	6013      	str	r3, [r2, #0]
			time2--;
 8000a0a:	4b35      	ldr	r3, [pc, #212]	; (8000ae0 <normalState+0x2bc>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	4a33      	ldr	r2, [pc, #204]	; (8000ae0 <normalState+0x2bc>)
 8000a12:	6013      	str	r3, [r2, #0]
		}

		if(is_button_pressed(0)) {
 8000a14:	2000      	movs	r0, #0
 8000a16:	f000 f9dd 	bl	8000dd4 <is_button_pressed>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	f000 812f 	beq.w	8000c80 <normalState+0x45c>
			status=ManRed;
 8000a22:	4b2b      	ldr	r3, [pc, #172]	; (8000ad0 <normalState+0x2ac>)
 8000a24:	220a      	movs	r2, #10
 8000a26:	601a      	str	r2, [r3, #0]
			time1=timeRed;
 8000a28:	4b2b      	ldr	r3, [pc, #172]	; (8000ad8 <normalState+0x2b4>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a2b      	ldr	r2, [pc, #172]	; (8000adc <normalState+0x2b8>)
 8000a2e:	6013      	str	r3, [r2, #0]
			time2=2;
 8000a30:	4b2b      	ldr	r3, [pc, #172]	; (8000ae0 <normalState+0x2bc>)
 8000a32:	2202      	movs	r2, #2
 8000a34:	601a      	str	r2, [r3, #0]
			clearAllLed();
 8000a36:	f7ff fe0f 	bl	8000658 <clearAllLed>
			setTimer5(25);
 8000a3a:	2019      	movs	r0, #25
 8000a3c:	f000 fb7c 	bl	8001138 <setTimer5>
		}
		break;
 8000a40:	e11e      	b.n	8000c80 <normalState+0x45c>
	case AmRed:
		displayYellow1();
 8000a42:	f7ff fe43 	bl	80006cc <displayYellow1>
		displayRed2();
 8000a46:	f7ff fe6d 	bl	8000724 <displayRed2>
		if(timer1_flag==1) { //transit state
 8000a4a:	4b26      	ldr	r3, [pc, #152]	; (8000ae4 <normalState+0x2c0>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d115      	bne.n	8000a7e <normalState+0x25a>
			status=RedGreen;
 8000a52:	4b1f      	ldr	r3, [pc, #124]	; (8000ad0 <normalState+0x2ac>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	601a      	str	r2, [r3, #0]
			setTimer1(timeGreen*100);
 8000a58:	4b1e      	ldr	r3, [pc, #120]	; (8000ad4 <normalState+0x2b0>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2264      	movs	r2, #100	; 0x64
 8000a5e:	fb02 f303 	mul.w	r3, r2, r3
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 fb18 	bl	8001098 <setTimer1>
			setTimer2(100);
 8000a68:	2064      	movs	r0, #100	; 0x64
 8000a6a:	f000 fb29 	bl	80010c0 <setTimer2>
			time1=timeRed;
 8000a6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ad8 <normalState+0x2b4>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a1a      	ldr	r2, [pc, #104]	; (8000adc <normalState+0x2b8>)
 8000a74:	6013      	str	r3, [r2, #0]
			time2=timeGreen;
 8000a76:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <normalState+0x2b0>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a19      	ldr	r2, [pc, #100]	; (8000ae0 <normalState+0x2bc>)
 8000a7c:	6013      	str	r3, [r2, #0]
		}

		if(timer2_flag==1) {//update time
 8000a7e:	4b1b      	ldr	r3, [pc, #108]	; (8000aec <normalState+0x2c8>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d10c      	bne.n	8000aa0 <normalState+0x27c>
			time1--;
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <normalState+0x2b8>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	4a13      	ldr	r2, [pc, #76]	; (8000adc <normalState+0x2b8>)
 8000a8e:	6013      	str	r3, [r2, #0]
			time2--;
 8000a90:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <normalState+0x2bc>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	3b01      	subs	r3, #1
 8000a96:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <normalState+0x2bc>)
 8000a98:	6013      	str	r3, [r2, #0]
			setTimer2(100);
 8000a9a:	2064      	movs	r0, #100	; 0x64
 8000a9c:	f000 fb10 	bl	80010c0 <setTimer2>
		}

		if(is_button_pressed(0)) {
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	f000 f997 	bl	8000dd4 <is_button_pressed>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	f000 80eb 	beq.w	8000c84 <normalState+0x460>
			status=ManRed;
 8000aae:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <normalState+0x2ac>)
 8000ab0:	220a      	movs	r2, #10
 8000ab2:	601a      	str	r2, [r3, #0]
			time1=timeRed;
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <normalState+0x2b4>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a08      	ldr	r2, [pc, #32]	; (8000adc <normalState+0x2b8>)
 8000aba:	6013      	str	r3, [r2, #0]
			time2=2;
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <normalState+0x2bc>)
 8000abe:	2202      	movs	r2, #2
 8000ac0:	601a      	str	r2, [r3, #0]
			clearAllLed();
 8000ac2:	f7ff fdc9 	bl	8000658 <clearAllLed>
			setTimer5(25);
 8000ac6:	2019      	movs	r0, #25
 8000ac8:	f000 fb36 	bl	8001138 <setTimer5>
		}
		break;
 8000acc:	e0da      	b.n	8000c84 <normalState+0x460>
 8000ace:	bf00      	nop
 8000ad0:	20000044 	.word	0x20000044
 8000ad4:	20000008 	.word	0x20000008
 8000ad8:	20000000 	.word	0x20000000
 8000adc:	20000058 	.word	0x20000058
 8000ae0:	2000005c 	.word	0x2000005c
 8000ae4:	20000088 	.word	0x20000088
 8000ae8:	20000004 	.word	0x20000004
 8000aec:	20000090 	.word	0x20000090
	case ManRed:
		if(timer5_flag==1) {
 8000af0:	4b69      	ldr	r3, [pc, #420]	; (8000c98 <normalState+0x474>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d104      	bne.n	8000b02 <normalState+0x2de>
			setTimer5(25);
 8000af8:	2019      	movs	r0, #25
 8000afa:	f000 fb1d 	bl	8001138 <setTimer5>
			toggleRed();
 8000afe:	f7ff fe53 	bl	80007a8 <toggleRed>
		}
		if(is_button_pressed(1)) {
 8000b02:	2001      	movs	r0, #1
 8000b04:	f000 f966 	bl	8000dd4 <is_button_pressed>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <normalState+0x2ee>
			increase();
 8000b0e:	f7ff fe75 	bl	80007fc <increase>
		}
		if(is_button_pressed(2)) {
 8000b12:	2002      	movs	r0, #2
 8000b14:	f000 f95e 	bl	8000dd4 <is_button_pressed>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d00a      	beq.n	8000b34 <normalState+0x310>
			timeRed=time1;
 8000b1e:	4b5f      	ldr	r3, [pc, #380]	; (8000c9c <normalState+0x478>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a5f      	ldr	r2, [pc, #380]	; (8000ca0 <normalState+0x47c>)
 8000b24:	6013      	str	r3, [r2, #0]
			timeGreen=timeRed-timeYellow;
 8000b26:	4b5e      	ldr	r3, [pc, #376]	; (8000ca0 <normalState+0x47c>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	4b5e      	ldr	r3, [pc, #376]	; (8000ca4 <normalState+0x480>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	1ad3      	subs	r3, r2, r3
 8000b30:	4a5d      	ldr	r2, [pc, #372]	; (8000ca8 <normalState+0x484>)
 8000b32:	6013      	str	r3, [r2, #0]

		}
		if(is_button_pressed(0)) {
 8000b34:	2000      	movs	r0, #0
 8000b36:	f000 f94d 	bl	8000dd4 <is_button_pressed>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	f000 80a3 	beq.w	8000c88 <normalState+0x464>
			status=ManAm;
 8000b42:	4b5a      	ldr	r3, [pc, #360]	; (8000cac <normalState+0x488>)
 8000b44:	220b      	movs	r2, #11
 8000b46:	601a      	str	r2, [r3, #0]
			time1=timeYellow;
 8000b48:	4b56      	ldr	r3, [pc, #344]	; (8000ca4 <normalState+0x480>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a53      	ldr	r2, [pc, #332]	; (8000c9c <normalState+0x478>)
 8000b4e:	6013      	str	r3, [r2, #0]
			time2=3;
 8000b50:	4b57      	ldr	r3, [pc, #348]	; (8000cb0 <normalState+0x48c>)
 8000b52:	2203      	movs	r2, #3
 8000b54:	601a      	str	r2, [r3, #0]
			clearAllLed();
 8000b56:	f7ff fd7f 	bl	8000658 <clearAllLed>
			setTimer5(25);
 8000b5a:	2019      	movs	r0, #25
 8000b5c:	f000 faec 	bl	8001138 <setTimer5>
		}
		break;
 8000b60:	e092      	b.n	8000c88 <normalState+0x464>
	case ManAm:
		if(timer5_flag==1) {
 8000b62:	4b4d      	ldr	r3, [pc, #308]	; (8000c98 <normalState+0x474>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d104      	bne.n	8000b74 <normalState+0x350>
			setTimer5(25);
 8000b6a:	2019      	movs	r0, #25
 8000b6c:	f000 fae4 	bl	8001138 <setTimer5>
			toggleYellow();
 8000b70:	f7ff fe28 	bl	80007c4 <toggleYellow>
		}
		if(is_button_pressed(1)) {
 8000b74:	2001      	movs	r0, #1
 8000b76:	f000 f92d 	bl	8000dd4 <is_button_pressed>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <normalState+0x360>
			increase();
 8000b80:	f7ff fe3c 	bl	80007fc <increase>
		}
		if(is_button_pressed(2)) {
 8000b84:	2002      	movs	r0, #2
 8000b86:	f000 f925 	bl	8000dd4 <is_button_pressed>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d013      	beq.n	8000bb8 <normalState+0x394>
			timeYellow=time1;
 8000b90:	4b42      	ldr	r3, [pc, #264]	; (8000c9c <normalState+0x478>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a43      	ldr	r2, [pc, #268]	; (8000ca4 <normalState+0x480>)
 8000b96:	6013      	str	r3, [r2, #0]
			if(timeYellow >=timeRed) {
 8000b98:	4b42      	ldr	r3, [pc, #264]	; (8000ca4 <normalState+0x480>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b40      	ldr	r3, [pc, #256]	; (8000ca0 <normalState+0x47c>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	db02      	blt.n	8000baa <normalState+0x386>
				timeRed=60;
 8000ba4:	4b3e      	ldr	r3, [pc, #248]	; (8000ca0 <normalState+0x47c>)
 8000ba6:	223c      	movs	r2, #60	; 0x3c
 8000ba8:	601a      	str	r2, [r3, #0]
			}
			timeGreen=timeRed-timeYellow;
 8000baa:	4b3d      	ldr	r3, [pc, #244]	; (8000ca0 <normalState+0x47c>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	4b3d      	ldr	r3, [pc, #244]	; (8000ca4 <normalState+0x480>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	1ad3      	subs	r3, r2, r3
 8000bb4:	4a3c      	ldr	r2, [pc, #240]	; (8000ca8 <normalState+0x484>)
 8000bb6:	6013      	str	r3, [r2, #0]
		}
		if(is_button_pressed(0)) {
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f000 f90b 	bl	8000dd4 <is_button_pressed>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d063      	beq.n	8000c8c <normalState+0x468>
			status=ManGreen;
 8000bc4:	4b39      	ldr	r3, [pc, #228]	; (8000cac <normalState+0x488>)
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	601a      	str	r2, [r3, #0]
			time1=timeGreen;
 8000bca:	4b37      	ldr	r3, [pc, #220]	; (8000ca8 <normalState+0x484>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a33      	ldr	r2, [pc, #204]	; (8000c9c <normalState+0x478>)
 8000bd0:	6013      	str	r3, [r2, #0]
			time2=4;
 8000bd2:	4b37      	ldr	r3, [pc, #220]	; (8000cb0 <normalState+0x48c>)
 8000bd4:	2204      	movs	r2, #4
 8000bd6:	601a      	str	r2, [r3, #0]
			clearAllLed();
 8000bd8:	f7ff fd3e 	bl	8000658 <clearAllLed>
			setTimer5(25);
 8000bdc:	2019      	movs	r0, #25
 8000bde:	f000 faab 	bl	8001138 <setTimer5>
		}
		break;
 8000be2:	e053      	b.n	8000c8c <normalState+0x468>
	case ManGreen:
		if(timer5_flag==1) {
 8000be4:	4b2c      	ldr	r3, [pc, #176]	; (8000c98 <normalState+0x474>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d104      	bne.n	8000bf6 <normalState+0x3d2>
			setTimer5(25);
 8000bec:	2019      	movs	r0, #25
 8000bee:	f000 faa3 	bl	8001138 <setTimer5>
			toggleGreen();
 8000bf2:	f7ff fdf5 	bl	80007e0 <toggleGreen>
		}
		if(is_button_pressed(1)) {
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	f000 f8ec 	bl	8000dd4 <is_button_pressed>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <normalState+0x3e2>
			increase();
 8000c02:	f7ff fdfb 	bl	80007fc <increase>
		}
		if(is_button_pressed(2)) {
 8000c06:	2002      	movs	r0, #2
 8000c08:	f000 f8e4 	bl	8000dd4 <is_button_pressed>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d013      	beq.n	8000c3a <normalState+0x416>
			timeGreen=time1;
 8000c12:	4b22      	ldr	r3, [pc, #136]	; (8000c9c <normalState+0x478>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a24      	ldr	r2, [pc, #144]	; (8000ca8 <normalState+0x484>)
 8000c18:	6013      	str	r3, [r2, #0]
			if(timeGreen >=timeRed) {
 8000c1a:	4b23      	ldr	r3, [pc, #140]	; (8000ca8 <normalState+0x484>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	4b20      	ldr	r3, [pc, #128]	; (8000ca0 <normalState+0x47c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	db02      	blt.n	8000c2c <normalState+0x408>
				timeRed=60;
 8000c26:	4b1e      	ldr	r3, [pc, #120]	; (8000ca0 <normalState+0x47c>)
 8000c28:	223c      	movs	r2, #60	; 0x3c
 8000c2a:	601a      	str	r2, [r3, #0]
			}
			timeYellow=timeRed-timeGreen;
 8000c2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <normalState+0x47c>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b1d      	ldr	r3, [pc, #116]	; (8000ca8 <normalState+0x484>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	4a1b      	ldr	r2, [pc, #108]	; (8000ca4 <normalState+0x480>)
 8000c38:	6013      	str	r3, [r2, #0]
		}
		if(is_button_pressed(0)) {
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	f000 f8ca 	bl	8000dd4 <is_button_pressed>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d024      	beq.n	8000c90 <normalState+0x46c>
			status=RedGreen;
 8000c46:	4b19      	ldr	r3, [pc, #100]	; (8000cac <normalState+0x488>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	601a      	str	r2, [r3, #0]
			setTimer1(timeGreen*100);
 8000c4c:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <normalState+0x484>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2264      	movs	r2, #100	; 0x64
 8000c52:	fb02 f303 	mul.w	r3, r2, r3
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 fa1e 	bl	8001098 <setTimer1>
			setTimer2(100);
 8000c5c:	2064      	movs	r0, #100	; 0x64
 8000c5e:	f000 fa2f 	bl	80010c0 <setTimer2>
			time1=timeRed;
 8000c62:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <normalState+0x47c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a0d      	ldr	r2, [pc, #52]	; (8000c9c <normalState+0x478>)
 8000c68:	6013      	str	r3, [r2, #0]
			time2=timeGreen;
 8000c6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <normalState+0x484>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a10      	ldr	r2, [pc, #64]	; (8000cb0 <normalState+0x48c>)
 8000c70:	6013      	str	r3, [r2, #0]
		}
		break;
 8000c72:	e00d      	b.n	8000c90 <normalState+0x46c>
	default:
		break;
 8000c74:	bf00      	nop
 8000c76:	e00c      	b.n	8000c92 <normalState+0x46e>
		break;
 8000c78:	bf00      	nop
 8000c7a:	e00a      	b.n	8000c92 <normalState+0x46e>
		break;
 8000c7c:	bf00      	nop
 8000c7e:	e008      	b.n	8000c92 <normalState+0x46e>
		break;
 8000c80:	bf00      	nop
 8000c82:	e006      	b.n	8000c92 <normalState+0x46e>
		break;
 8000c84:	bf00      	nop
 8000c86:	e004      	b.n	8000c92 <normalState+0x46e>
		break;
 8000c88:	bf00      	nop
 8000c8a:	e002      	b.n	8000c92 <normalState+0x46e>
		break;
 8000c8c:	bf00      	nop
 8000c8e:	e000      	b.n	8000c92 <normalState+0x46e>
		break;
 8000c90:	bf00      	nop
	}
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	200000a8 	.word	0x200000a8
 8000c9c:	20000058 	.word	0x20000058
 8000ca0:	20000000 	.word	0x20000000
 8000ca4:	20000004 	.word	0x20000004
 8000ca8:	20000008 	.word	0x20000008
 8000cac:	20000044 	.word	0x20000044
 8000cb0:	2000005c 	.word	0x2000005c

08000cb4 <button_reading>:
static GPIO_PinState debounceButtonBuffer3[N0_OF_BUTTONS];
//we define a flag for a button pressed more than 1 second.
//we define counter for automatically increasing the value
//after the button is pressed more than 1 second.
int buttonFlag[N0_OF_BUTTONS] = {0};
void button_reading(void){
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
	for(int i = 0; i < N0_OF_BUTTONS; i ++){
 8000cba:	2300      	movs	r3, #0
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	e070      	b.n	8000da2 <button_reading+0xee>
		debounceButtonBuffer3[i] =debounceButtonBuffer2[i];
 8000cc0:	4a3c      	ldr	r2, [pc, #240]	; (8000db4 <button_reading+0x100>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	7819      	ldrb	r1, [r3, #0]
 8000cc8:	4a3b      	ldr	r2, [pc, #236]	; (8000db8 <button_reading+0x104>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	460a      	mov	r2, r1
 8000cd0:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2[i] =debounceButtonBuffer1[i];
 8000cd2:	4a3a      	ldr	r2, [pc, #232]	; (8000dbc <button_reading+0x108>)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	7819      	ldrb	r1, [r3, #0]
 8000cda:	4a36      	ldr	r2, [pc, #216]	; (8000db4 <button_reading+0x100>)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4413      	add	r3, r2
 8000ce0:	460a      	mov	r2, r1
 8000ce2:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(GPIOB, buttonPin[i]);
 8000ce4:	4a36      	ldr	r2, [pc, #216]	; (8000dc0 <button_reading+0x10c>)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4834      	ldr	r0, [pc, #208]	; (8000dc4 <button_reading+0x110>)
 8000cf2:	f000 fe3d 	bl	8001970 <HAL_GPIO_ReadPin>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4a30      	ldr	r2, [pc, #192]	; (8000dbc <button_reading+0x108>)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4413      	add	r3, r2
 8000d00:	460a      	mov	r2, r1
 8000d02:	701a      	strb	r2, [r3, #0]
		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i] && debounceButtonBuffer2[i] == debounceButtonBuffer3[i]) {
 8000d04:	4a2d      	ldr	r2, [pc, #180]	; (8000dbc <button_reading+0x108>)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	781a      	ldrb	r2, [r3, #0]
 8000d0c:	4929      	ldr	r1, [pc, #164]	; (8000db4 <button_reading+0x100>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	440b      	add	r3, r1
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d141      	bne.n	8000d9c <button_reading+0xe8>
 8000d18:	4a26      	ldr	r2, [pc, #152]	; (8000db4 <button_reading+0x100>)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	781a      	ldrb	r2, [r3, #0]
 8000d20:	4925      	ldr	r1, [pc, #148]	; (8000db8 <button_reading+0x104>)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	440b      	add	r3, r1
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d137      	bne.n	8000d9c <button_reading+0xe8>
			if(debounceButtonBuffer1[i] != buttonBuffer[i]){
 8000d2c:	4a23      	ldr	r2, [pc, #140]	; (8000dbc <button_reading+0x108>)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4413      	add	r3, r2
 8000d32:	781a      	ldrb	r2, [r3, #0]
 8000d34:	4924      	ldr	r1, [pc, #144]	; (8000dc8 <button_reading+0x114>)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	440b      	add	r3, r1
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d019      	beq.n	8000d74 <button_reading+0xc0>
				buttonBuffer[i] = debounceButtonBuffer1[i];
 8000d40:	4a1e      	ldr	r2, [pc, #120]	; (8000dbc <button_reading+0x108>)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	7819      	ldrb	r1, [r3, #0]
 8000d48:	4a1f      	ldr	r2, [pc, #124]	; (8000dc8 <button_reading+0x114>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	460a      	mov	r2, r1
 8000d50:	701a      	strb	r2, [r3, #0]
						if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 8000d52:	4a1d      	ldr	r2, [pc, #116]	; (8000dc8 <button_reading+0x114>)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4413      	add	r3, r2
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d11e      	bne.n	8000d9c <button_reading+0xe8>
							buttonFlag[i] = 1;
 8000d5e:	4a1b      	ldr	r2, [pc, #108]	; (8000dcc <button_reading+0x118>)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2101      	movs	r1, #1
 8000d64:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							buttonTimeOut[i] = DURATION_FOR_AUTO_INCREASING;
 8000d68:	4a19      	ldr	r2, [pc, #100]	; (8000dd0 <button_reading+0x11c>)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	21c8      	movs	r1, #200	; 0xc8
 8000d6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000d72:	e013      	b.n	8000d9c <button_reading+0xe8>
							}
		}
		else {
			buttonTimeOut[i]--;
 8000d74:	4a16      	ldr	r2, [pc, #88]	; (8000dd0 <button_reading+0x11c>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d7c:	1e5a      	subs	r2, r3, #1
 8000d7e:	4914      	ldr	r1, [pc, #80]	; (8000dd0 <button_reading+0x11c>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(buttonTimeOut[i] <= 0){
 8000d86:	4a12      	ldr	r2, [pc, #72]	; (8000dd0 <button_reading+0x11c>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	dc04      	bgt.n	8000d9c <button_reading+0xe8>
					buttonBuffer[i] = BUTTON_IS_RELEASED;
 8000d92:	4a0d      	ldr	r2, [pc, #52]	; (8000dc8 <button_reading+0x114>)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4413      	add	r3, r2
 8000d98:	2201      	movs	r2, #1
 8000d9a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < N0_OF_BUTTONS; i ++){
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	dd8b      	ble.n	8000cc0 <button_reading+0xc>
			}
		}
	}
}
}
 8000da8:	bf00      	nop
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000070 	.word	0x20000070
 8000db8:	20000074 	.word	0x20000074
 8000dbc:	2000006c 	.word	0x2000006c
 8000dc0:	20000010 	.word	0x20000010
 8000dc4:	40010c00 	.word	0x40010c00
 8000dc8:	2000000c 	.word	0x2000000c
 8000dcc:	20000078 	.word	0x20000078
 8000dd0:	20000060 	.word	0x20000060

08000dd4 <is_button_pressed>:

int is_button_pressed(int index){
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
	if(index >= N0_OF_BUTTONS || index < 0) return 0;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	dc02      	bgt.n	8000de8 <is_button_pressed+0x14>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	da01      	bge.n	8000dec <is_button_pressed+0x18>
 8000de8:	2300      	movs	r3, #0
 8000dea:	e00d      	b.n	8000e08 <is_button_pressed+0x34>
		if(buttonFlag[index] == 1){
 8000dec:	4a09      	ldr	r2, [pc, #36]	; (8000e14 <is_button_pressed+0x40>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d106      	bne.n	8000e06 <is_button_pressed+0x32>
			buttonFlag[index] = 0;
 8000df8:	4a06      	ldr	r2, [pc, #24]	; (8000e14 <is_button_pressed+0x40>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			return 1;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e000      	b.n	8000e08 <is_button_pressed+0x34>
		}
		return 0;
 8000e06:	2300      	movs	r3, #0
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	20000078 	.word	0x20000078

08000e18 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	button_reading();
 8000e20:	f7ff ff48 	bl	8000cb4 <button_reading>
	timerRun();
 8000e24:	f000 f99c 	bl	8001160 <timerRun>
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e36:	f000 fab1 	bl	800139c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e3a:	f000 f83d 	bl	8000eb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e3e:	f000 f8c3 	bl	8000fc8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e42:	f000 f875 	bl	8000f30 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 );
 8000e46:	4817      	ldr	r0, [pc, #92]	; (8000ea4 <main+0x74>)
 8000e48:	f001 fa06 	bl	8002258 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer3(25);
 8000e4c:	2019      	movs	r0, #25
 8000e4e:	f000 f94b 	bl	80010e8 <setTimer3>
  setTimer4(50);
 8000e52:	2032      	movs	r0, #50	; 0x32
 8000e54:	f000 f95c 	bl	8001110 <setTimer4>
  int led_idx=0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	607b      	str	r3, [r7, #4]
  while (1)
  {
	  if(timer3_flag==1) {
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <main+0x78>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d10d      	bne.n	8000e80 <main+0x50>
	   	 setTimer3(25);
 8000e64:	2019      	movs	r0, #25
 8000e66:	f000 f93f 	bl	80010e8 <setTimer3>
	   	 update7SEG(led_idx++);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	1c5a      	adds	r2, r3, #1
 8000e6e:	607a      	str	r2, [r7, #4]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fb65 	bl	8000540 <update7SEG>
	   	 if(led_idx>=4) led_idx=0;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b03      	cmp	r3, #3
 8000e7a:	dd01      	ble.n	8000e80 <main+0x50>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	607b      	str	r3, [r7, #4]
	   	}
	  if(timer4_flag==1) {
 8000e80:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <main+0x7c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d10a      	bne.n	8000e9e <main+0x6e>
		  updateBuffer(time1,time2);
 8000e88:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <main+0x80>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a09      	ldr	r2, [pc, #36]	; (8000eb4 <main+0x84>)
 8000e8e:	6812      	ldr	r2, [r2, #0]
 8000e90:	4611      	mov	r1, r2
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff fb18 	bl	80004c8 <updateBuffer>
		  setTimer4(50);
 8000e98:	2032      	movs	r0, #50	; 0x32
 8000e9a:	f000 f939 	bl	8001110 <setTimer4>
	  }
	 normalState();
 8000e9e:	f7ff fcc1 	bl	8000824 <normalState>
	  if(timer3_flag==1) {
 8000ea2:	e7db      	b.n	8000e5c <main+0x2c>
 8000ea4:	200000ac 	.word	0x200000ac
 8000ea8:	20000098 	.word	0x20000098
 8000eac:	200000a0 	.word	0x200000a0
 8000eb0:	20000058 	.word	0x20000058
 8000eb4:	2000005c 	.word	0x2000005c

08000eb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b090      	sub	sp, #64	; 0x40
 8000ebc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ebe:	f107 0318 	add.w	r3, r7, #24
 8000ec2:	2228      	movs	r2, #40	; 0x28
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f001 fd82 	bl	80029d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]
 8000ed8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eda:	2302      	movs	r3, #2
 8000edc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ee2:	2310      	movs	r3, #16
 8000ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eea:	f107 0318 	add.w	r3, r7, #24
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 fd86 	bl	8001a00 <HAL_RCC_OscConfig>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000efa:	f000 f8c7 	bl	800108c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000efe:	230f      	movs	r3, #15
 8000f00:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f02:	2300      	movs	r3, #0
 8000f04:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 fff2 	bl	8001f00 <HAL_RCC_ClockConfig>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f22:	f000 f8b3 	bl	800108c <Error_Handler>
  }
}
 8000f26:	bf00      	nop
 8000f28:	3740      	adds	r7, #64	; 0x40
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f36:	f107 0308 	add.w	r3, r7, #8
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f44:	463b      	mov	r3, r7
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f4c:	4b1d      	ldr	r3, [pc, #116]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000f4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000f54:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000f56:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5c:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000f62:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000f64:	2209      	movs	r2, #9
 8000f66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f68:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f6e:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f74:	4813      	ldr	r0, [pc, #76]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000f76:	f001 f91f 	bl	80021b8 <HAL_TIM_Base_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f80:	f000 f884 	bl	800108c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f8a:	f107 0308 	add.w	r3, r7, #8
 8000f8e:	4619      	mov	r1, r3
 8000f90:	480c      	ldr	r0, [pc, #48]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000f92:	f001 fab5 	bl	8002500 <HAL_TIM_ConfigClockSource>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f9c:	f000 f876 	bl	800108c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fa8:	463b      	mov	r3, r7
 8000faa:	4619      	mov	r1, r3
 8000fac:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000fae:	f001 fc81 	bl	80028b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000fb8:	f000 f868 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fbc:	bf00      	nop
 8000fbe:	3718      	adds	r7, #24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	200000ac 	.word	0x200000ac

08000fc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fce:	f107 0308 	add.w	r3, r7, #8
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fdc:	4b28      	ldr	r3, [pc, #160]	; (8001080 <MX_GPIO_Init+0xb8>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	4a27      	ldr	r2, [pc, #156]	; (8001080 <MX_GPIO_Init+0xb8>)
 8000fe2:	f043 0304 	orr.w	r3, r3, #4
 8000fe6:	6193      	str	r3, [r2, #24]
 8000fe8:	4b25      	ldr	r3, [pc, #148]	; (8001080 <MX_GPIO_Init+0xb8>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	f003 0304 	and.w	r3, r3, #4
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff4:	4b22      	ldr	r3, [pc, #136]	; (8001080 <MX_GPIO_Init+0xb8>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	4a21      	ldr	r2, [pc, #132]	; (8001080 <MX_GPIO_Init+0xb8>)
 8000ffa:	f043 0308 	orr.w	r3, r3, #8
 8000ffe:	6193      	str	r3, [r2, #24]
 8001000:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <MX_GPIO_Init+0xb8>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	f003 0308 	and.w	r3, r3, #8
 8001008:	603b      	str	r3, [r7, #0]
 800100a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Red1_Pin|LED_Yellow1_Pin|LED_Green1_Pin|LED_Red2_Pin
 800100c:	2200      	movs	r2, #0
 800100e:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8001012:	481c      	ldr	r0, [pc, #112]	; (8001084 <MX_GPIO_Init+0xbc>)
 8001014:	f000 fcc3 	bl	800199e <HAL_GPIO_WritePin>
                          |LED_Yellow2_Pin|LED_Green2_Pin|SEG0_Pin|SEG1_Pin
                          |SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, test_Pin|EN0_Pin|EN1_Pin|EN2_Pin
 8001018:	2200      	movs	r2, #0
 800101a:	f44f 618f 	mov.w	r1, #1144	; 0x478
 800101e:	481a      	ldr	r0, [pc, #104]	; (8001088 <MX_GPIO_Init+0xc0>)
 8001020:	f000 fcbd 	bl	800199e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Red1_Pin LED_Yellow1_Pin LED_Green1_Pin LED_Red2_Pin
                           LED_Yellow2_Pin LED_Green2_Pin SEG0_Pin SEG1_Pin
                           SEG2_Pin SEG3_Pin SEG4_Pin SEG5_Pin
                           SEG6_Pin */
  GPIO_InitStruct.Pin = LED_Red1_Pin|LED_Yellow1_Pin|LED_Green1_Pin|LED_Red2_Pin
 8001024:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001028:	60bb      	str	r3, [r7, #8]
                          |LED_Yellow2_Pin|LED_Green2_Pin|SEG0_Pin|SEG1_Pin
                          |SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102a:	2301      	movs	r3, #1
 800102c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001032:	2302      	movs	r3, #2
 8001034:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001036:	f107 0308 	add.w	r3, r7, #8
 800103a:	4619      	mov	r1, r3
 800103c:	4811      	ldr	r0, [pc, #68]	; (8001084 <MX_GPIO_Init+0xbc>)
 800103e:	f000 fb1d 	bl	800167c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8001042:	2307      	movs	r3, #7
 8001044:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800104a:	2301      	movs	r3, #1
 800104c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104e:	f107 0308 	add.w	r3, r7, #8
 8001052:	4619      	mov	r1, r3
 8001054:	480c      	ldr	r0, [pc, #48]	; (8001088 <MX_GPIO_Init+0xc0>)
 8001056:	f000 fb11 	bl	800167c <HAL_GPIO_Init>

  /*Configure GPIO pins : test_Pin EN0_Pin EN1_Pin EN2_Pin
                           EN3_Pin */
  GPIO_InitStruct.Pin = test_Pin|EN0_Pin|EN1_Pin|EN2_Pin
 800105a:	f44f 638f 	mov.w	r3, #1144	; 0x478
 800105e:	60bb      	str	r3, [r7, #8]
                          |EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001060:	2301      	movs	r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2302      	movs	r3, #2
 800106a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106c:	f107 0308 	add.w	r3, r7, #8
 8001070:	4619      	mov	r1, r3
 8001072:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_GPIO_Init+0xc0>)
 8001074:	f000 fb02 	bl	800167c <HAL_GPIO_Init>

}
 8001078:	bf00      	nop
 800107a:	3718      	adds	r7, #24
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40021000 	.word	0x40021000
 8001084:	40010800 	.word	0x40010800
 8001088:	40010c00 	.word	0x40010c00

0800108c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001090:	b672      	cpsid	i
}
 8001092:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001094:	e7fe      	b.n	8001094 <Error_Handler+0x8>
	...

08001098 <setTimer1>:
int timer3_flag = 0;
int timer4_counter=0;
int timer4_flag = 0;
int timer5_counter=0;
int timer5_flag = 0;
void setTimer1(int duration){
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 80010a0:	4a05      	ldr	r2, [pc, #20]	; (80010b8 <setTimer1+0x20>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80010a6:	4b05      	ldr	r3, [pc, #20]	; (80010bc <setTimer1+0x24>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	20000084 	.word	0x20000084
 80010bc:	20000088 	.word	0x20000088

080010c0 <setTimer2>:

void setTimer2(int duration){
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 80010c8:	4a05      	ldr	r2, [pc, #20]	; (80010e0 <setTimer2+0x20>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80010ce:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <setTimer2+0x24>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	bc80      	pop	{r7}
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	2000008c 	.word	0x2000008c
 80010e4:	20000090 	.word	0x20000090

080010e8 <setTimer3>:

void setTimer3(int duration){
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 80010f0:	4a05      	ldr	r2, [pc, #20]	; (8001108 <setTimer3+0x20>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80010f6:	4b05      	ldr	r3, [pc, #20]	; (800110c <setTimer3+0x24>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000094 	.word	0x20000094
 800110c:	20000098 	.word	0x20000098

08001110 <setTimer4>:

void setTimer4(int duration){
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	timer4_counter = duration;
 8001118:	4a05      	ldr	r2, [pc, #20]	; (8001130 <setTimer4+0x20>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 800111e:	4b05      	ldr	r3, [pc, #20]	; (8001134 <setTimer4+0x24>)
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	bc80      	pop	{r7}
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	2000009c 	.word	0x2000009c
 8001134:	200000a0 	.word	0x200000a0

08001138 <setTimer5>:

void setTimer5(int duration){
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	timer5_counter = duration;
 8001140:	4a05      	ldr	r2, [pc, #20]	; (8001158 <setTimer5+0x20>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8001146:	4b05      	ldr	r3, [pc, #20]	; (800115c <setTimer5+0x24>)
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	200000a4 	.word	0x200000a4
 800115c:	200000a8 	.word	0x200000a8

08001160 <timerRun>:
void timerRun(){
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8001164:	4b29      	ldr	r3, [pc, #164]	; (800120c <timerRun+0xac>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	dd0b      	ble.n	8001184 <timerRun+0x24>
		timer1_counter--;
 800116c:	4b27      	ldr	r3, [pc, #156]	; (800120c <timerRun+0xac>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	3b01      	subs	r3, #1
 8001172:	4a26      	ldr	r2, [pc, #152]	; (800120c <timerRun+0xac>)
 8001174:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 8001176:	4b25      	ldr	r3, [pc, #148]	; (800120c <timerRun+0xac>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	dc02      	bgt.n	8001184 <timerRun+0x24>
			timer1_flag = 1;
 800117e:	4b24      	ldr	r3, [pc, #144]	; (8001210 <timerRun+0xb0>)
 8001180:	2201      	movs	r2, #1
 8001182:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter>0) {
 8001184:	4b23      	ldr	r3, [pc, #140]	; (8001214 <timerRun+0xb4>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	dd0b      	ble.n	80011a4 <timerRun+0x44>
			timer2_counter--;
 800118c:	4b21      	ldr	r3, [pc, #132]	; (8001214 <timerRun+0xb4>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	3b01      	subs	r3, #1
 8001192:	4a20      	ldr	r2, [pc, #128]	; (8001214 <timerRun+0xb4>)
 8001194:	6013      	str	r3, [r2, #0]
			if(timer2_counter <= 0){
 8001196:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <timerRun+0xb4>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	dc02      	bgt.n	80011a4 <timerRun+0x44>
				timer2_flag = 1;
 800119e:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <timerRun+0xb8>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	601a      	str	r2, [r3, #0]
			}
	}

	if(timer3_counter>0) {
 80011a4:	4b1d      	ldr	r3, [pc, #116]	; (800121c <timerRun+0xbc>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	dd0b      	ble.n	80011c4 <timerRun+0x64>
				timer3_counter--;
 80011ac:	4b1b      	ldr	r3, [pc, #108]	; (800121c <timerRun+0xbc>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	3b01      	subs	r3, #1
 80011b2:	4a1a      	ldr	r2, [pc, #104]	; (800121c <timerRun+0xbc>)
 80011b4:	6013      	str	r3, [r2, #0]
				if(timer3_counter <= 0){
 80011b6:	4b19      	ldr	r3, [pc, #100]	; (800121c <timerRun+0xbc>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	dc02      	bgt.n	80011c4 <timerRun+0x64>
					timer3_flag = 1;
 80011be:	4b18      	ldr	r3, [pc, #96]	; (8001220 <timerRun+0xc0>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	601a      	str	r2, [r3, #0]
				}
		}

	if(timer4_counter>0) {
 80011c4:	4b17      	ldr	r3, [pc, #92]	; (8001224 <timerRun+0xc4>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	dd0b      	ble.n	80011e4 <timerRun+0x84>
		 	 	timer4_counter--;
 80011cc:	4b15      	ldr	r3, [pc, #84]	; (8001224 <timerRun+0xc4>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	3b01      	subs	r3, #1
 80011d2:	4a14      	ldr	r2, [pc, #80]	; (8001224 <timerRun+0xc4>)
 80011d4:	6013      	str	r3, [r2, #0]
				if(timer4_counter <= 0){
 80011d6:	4b13      	ldr	r3, [pc, #76]	; (8001224 <timerRun+0xc4>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	dc02      	bgt.n	80011e4 <timerRun+0x84>
					timer4_flag = 1;
 80011de:	4b12      	ldr	r3, [pc, #72]	; (8001228 <timerRun+0xc8>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	601a      	str	r2, [r3, #0]
				}
	}
	if(timer5_counter>0) {
 80011e4:	4b11      	ldr	r3, [pc, #68]	; (800122c <timerRun+0xcc>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	dd0b      	ble.n	8001204 <timerRun+0xa4>
			 	 timer5_counter--;
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <timerRun+0xcc>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	3b01      	subs	r3, #1
 80011f2:	4a0e      	ldr	r2, [pc, #56]	; (800122c <timerRun+0xcc>)
 80011f4:	6013      	str	r3, [r2, #0]
				if(timer5_counter <= 0){
 80011f6:	4b0d      	ldr	r3, [pc, #52]	; (800122c <timerRun+0xcc>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	dc02      	bgt.n	8001204 <timerRun+0xa4>
					timer5_flag = 1;
 80011fe:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <timerRun+0xd0>)
 8001200:	2201      	movs	r2, #1
 8001202:	601a      	str	r2, [r3, #0]
					}
	}

}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr
 800120c:	20000084 	.word	0x20000084
 8001210:	20000088 	.word	0x20000088
 8001214:	2000008c 	.word	0x2000008c
 8001218:	20000090 	.word	0x20000090
 800121c:	20000094 	.word	0x20000094
 8001220:	20000098 	.word	0x20000098
 8001224:	2000009c 	.word	0x2000009c
 8001228:	200000a0 	.word	0x200000a0
 800122c:	200000a4 	.word	0x200000a4
 8001230:	200000a8 	.word	0x200000a8

08001234 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800123a:	4b15      	ldr	r3, [pc, #84]	; (8001290 <HAL_MspInit+0x5c>)
 800123c:	699b      	ldr	r3, [r3, #24]
 800123e:	4a14      	ldr	r2, [pc, #80]	; (8001290 <HAL_MspInit+0x5c>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6193      	str	r3, [r2, #24]
 8001246:	4b12      	ldr	r3, [pc, #72]	; (8001290 <HAL_MspInit+0x5c>)
 8001248:	699b      	ldr	r3, [r3, #24]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001252:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <HAL_MspInit+0x5c>)
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	4a0e      	ldr	r2, [pc, #56]	; (8001290 <HAL_MspInit+0x5c>)
 8001258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800125c:	61d3      	str	r3, [r2, #28]
 800125e:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <HAL_MspInit+0x5c>)
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <HAL_MspInit+0x60>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	4a04      	ldr	r2, [pc, #16]	; (8001294 <HAL_MspInit+0x60>)
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001286:	bf00      	nop
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	40021000 	.word	0x40021000
 8001294:	40010000 	.word	0x40010000

08001298 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012a8:	d113      	bne.n	80012d2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012aa:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <HAL_TIM_Base_MspInit+0x44>)
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	4a0b      	ldr	r2, [pc, #44]	; (80012dc <HAL_TIM_Base_MspInit+0x44>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	61d3      	str	r3, [r2, #28]
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <HAL_TIM_Base_MspInit+0x44>)
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2100      	movs	r1, #0
 80012c6:	201c      	movs	r0, #28
 80012c8:	f000 f9a1 	bl	800160e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012cc:	201c      	movs	r0, #28
 80012ce:	f000 f9ba 	bl	8001646 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012d2:	bf00      	nop
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40021000 	.word	0x40021000

080012e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <NMI_Handler+0x4>

080012e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ea:	e7fe      	b.n	80012ea <HardFault_Handler+0x4>

080012ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <MemManage_Handler+0x4>

080012f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <BusFault_Handler+0x4>

080012f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <UsageFault_Handler+0x4>

080012fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr

0800130a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr

08001316 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr

08001322 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001326:	f000 f87f 	bl	8001428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <TIM2_IRQHandler+0x10>)
 8001336:	f000 ffdb 	bl	80022f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200000ac 	.word	0x200000ac

08001344 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr

08001350 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001350:	f7ff fff8 	bl	8001344 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001354:	480b      	ldr	r0, [pc, #44]	; (8001384 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001356:	490c      	ldr	r1, [pc, #48]	; (8001388 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001358:	4a0c      	ldr	r2, [pc, #48]	; (800138c <LoopFillZerobss+0x16>)
  movs r3, #0
 800135a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800135c:	e002      	b.n	8001364 <LoopCopyDataInit>

0800135e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001362:	3304      	adds	r3, #4

08001364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001368:	d3f9      	bcc.n	800135e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800136a:	4a09      	ldr	r2, [pc, #36]	; (8001390 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800136c:	4c09      	ldr	r4, [pc, #36]	; (8001394 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001370:	e001      	b.n	8001376 <LoopFillZerobss>

08001372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001374:	3204      	adds	r2, #4

08001376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001378:	d3fb      	bcc.n	8001372 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800137a:	f001 fb05 	bl	8002988 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800137e:	f7ff fd57 	bl	8000e30 <main>
  bx lr
 8001382:	4770      	bx	lr
  ldr r0, =_sdata
 8001384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001388:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 800138c:	08002a24 	.word	0x08002a24
  ldr r2, =_sbss
 8001390:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001394:	200000f8 	.word	0x200000f8

08001398 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001398:	e7fe      	b.n	8001398 <ADC1_2_IRQHandler>
	...

0800139c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <HAL_Init+0x28>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a07      	ldr	r2, [pc, #28]	; (80013c4 <HAL_Init+0x28>)
 80013a6:	f043 0310 	orr.w	r3, r3, #16
 80013aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ac:	2003      	movs	r0, #3
 80013ae:	f000 f923 	bl	80015f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013b2:	200f      	movs	r0, #15
 80013b4:	f000 f808 	bl	80013c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b8:	f7ff ff3c 	bl	8001234 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40022000 	.word	0x40022000

080013c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <HAL_InitTick+0x54>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <HAL_InitTick+0x58>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4619      	mov	r1, r3
 80013da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013de:	fbb3 f3f1 	udiv	r3, r3, r1
 80013e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 f93b 	bl	8001662 <HAL_SYSTICK_Config>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e00e      	b.n	8001414 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b0f      	cmp	r3, #15
 80013fa:	d80a      	bhi.n	8001412 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013fc:	2200      	movs	r2, #0
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	f04f 30ff 	mov.w	r0, #4294967295
 8001404:	f000 f903 	bl	800160e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001408:	4a06      	ldr	r2, [pc, #24]	; (8001424 <HAL_InitTick+0x5c>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	e000      	b.n	8001414 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
}
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	2000001c 	.word	0x2000001c
 8001420:	20000024 	.word	0x20000024
 8001424:	20000020 	.word	0x20000020

08001428 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800142c:	4b05      	ldr	r3, [pc, #20]	; (8001444 <HAL_IncTick+0x1c>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	4b05      	ldr	r3, [pc, #20]	; (8001448 <HAL_IncTick+0x20>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4413      	add	r3, r2
 8001438:	4a03      	ldr	r2, [pc, #12]	; (8001448 <HAL_IncTick+0x20>)
 800143a:	6013      	str	r3, [r2, #0]
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr
 8001444:	20000024 	.word	0x20000024
 8001448:	200000f4 	.word	0x200000f4

0800144c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return uwTick;
 8001450:	4b02      	ldr	r3, [pc, #8]	; (800145c <HAL_GetTick+0x10>)
 8001452:	681b      	ldr	r3, [r3, #0]
}
 8001454:	4618      	mov	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr
 800145c:	200000f4 	.word	0x200000f4

08001460 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800147c:	4013      	ands	r3, r2
 800147e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001488:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800148c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001490:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001492:	4a04      	ldr	r2, [pc, #16]	; (80014a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	60d3      	str	r3, [r2, #12]
}
 8001498:	bf00      	nop
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014ac:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <__NVIC_GetPriorityGrouping+0x18>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	0a1b      	lsrs	r3, r3, #8
 80014b2:	f003 0307 	and.w	r3, r3, #7
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	db0b      	blt.n	80014ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	f003 021f 	and.w	r2, r3, #31
 80014dc:	4906      	ldr	r1, [pc, #24]	; (80014f8 <__NVIC_EnableIRQ+0x34>)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	095b      	lsrs	r3, r3, #5
 80014e4:	2001      	movs	r0, #1
 80014e6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr
 80014f8:	e000e100 	.word	0xe000e100

080014fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	6039      	str	r1, [r7, #0]
 8001506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150c:	2b00      	cmp	r3, #0
 800150e:	db0a      	blt.n	8001526 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	b2da      	uxtb	r2, r3
 8001514:	490c      	ldr	r1, [pc, #48]	; (8001548 <__NVIC_SetPriority+0x4c>)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	0112      	lsls	r2, r2, #4
 800151c:	b2d2      	uxtb	r2, r2
 800151e:	440b      	add	r3, r1
 8001520:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001524:	e00a      	b.n	800153c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	b2da      	uxtb	r2, r3
 800152a:	4908      	ldr	r1, [pc, #32]	; (800154c <__NVIC_SetPriority+0x50>)
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	f003 030f 	and.w	r3, r3, #15
 8001532:	3b04      	subs	r3, #4
 8001534:	0112      	lsls	r2, r2, #4
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	440b      	add	r3, r1
 800153a:	761a      	strb	r2, [r3, #24]
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	e000e100 	.word	0xe000e100
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001550:	b480      	push	{r7}
 8001552:	b089      	sub	sp, #36	; 0x24
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f1c3 0307 	rsb	r3, r3, #7
 800156a:	2b04      	cmp	r3, #4
 800156c:	bf28      	it	cs
 800156e:	2304      	movcs	r3, #4
 8001570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3304      	adds	r3, #4
 8001576:	2b06      	cmp	r3, #6
 8001578:	d902      	bls.n	8001580 <NVIC_EncodePriority+0x30>
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3b03      	subs	r3, #3
 800157e:	e000      	b.n	8001582 <NVIC_EncodePriority+0x32>
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001584:	f04f 32ff 	mov.w	r2, #4294967295
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43da      	mvns	r2, r3
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	401a      	ands	r2, r3
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001598:	f04f 31ff 	mov.w	r1, #4294967295
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	fa01 f303 	lsl.w	r3, r1, r3
 80015a2:	43d9      	mvns	r1, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	4313      	orrs	r3, r2
         );
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3724      	adds	r7, #36	; 0x24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr

080015b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3b01      	subs	r3, #1
 80015c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015c4:	d301      	bcc.n	80015ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015c6:	2301      	movs	r3, #1
 80015c8:	e00f      	b.n	80015ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ca:	4a0a      	ldr	r2, [pc, #40]	; (80015f4 <SysTick_Config+0x40>)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015d2:	210f      	movs	r1, #15
 80015d4:	f04f 30ff 	mov.w	r0, #4294967295
 80015d8:	f7ff ff90 	bl	80014fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015dc:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <SysTick_Config+0x40>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015e2:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <SysTick_Config+0x40>)
 80015e4:	2207      	movs	r2, #7
 80015e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	e000e010 	.word	0xe000e010

080015f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff ff2d 	bl	8001460 <__NVIC_SetPriorityGrouping>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800160e:	b580      	push	{r7, lr}
 8001610:	b086      	sub	sp, #24
 8001612:	af00      	add	r7, sp, #0
 8001614:	4603      	mov	r3, r0
 8001616:	60b9      	str	r1, [r7, #8]
 8001618:	607a      	str	r2, [r7, #4]
 800161a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001620:	f7ff ff42 	bl	80014a8 <__NVIC_GetPriorityGrouping>
 8001624:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	68b9      	ldr	r1, [r7, #8]
 800162a:	6978      	ldr	r0, [r7, #20]
 800162c:	f7ff ff90 	bl	8001550 <NVIC_EncodePriority>
 8001630:	4602      	mov	r2, r0
 8001632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001636:	4611      	mov	r1, r2
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ff5f 	bl	80014fc <__NVIC_SetPriority>
}
 800163e:	bf00      	nop
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	4603      	mov	r3, r0
 800164e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff ff35 	bl	80014c4 <__NVIC_EnableIRQ>
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff ffa2 	bl	80015b4 <SysTick_Config>
 8001670:	4603      	mov	r3, r0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800167c:	b480      	push	{r7}
 800167e:	b08b      	sub	sp, #44	; 0x2c
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001686:	2300      	movs	r3, #0
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800168a:	2300      	movs	r3, #0
 800168c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800168e:	e148      	b.n	8001922 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001690:	2201      	movs	r2, #1
 8001692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	69fa      	ldr	r2, [r7, #28]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	f040 8137 	bne.w	800191c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	4aa3      	ldr	r2, [pc, #652]	; (8001940 <HAL_GPIO_Init+0x2c4>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d05e      	beq.n	8001776 <HAL_GPIO_Init+0xfa>
 80016b8:	4aa1      	ldr	r2, [pc, #644]	; (8001940 <HAL_GPIO_Init+0x2c4>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d875      	bhi.n	80017aa <HAL_GPIO_Init+0x12e>
 80016be:	4aa1      	ldr	r2, [pc, #644]	; (8001944 <HAL_GPIO_Init+0x2c8>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d058      	beq.n	8001776 <HAL_GPIO_Init+0xfa>
 80016c4:	4a9f      	ldr	r2, [pc, #636]	; (8001944 <HAL_GPIO_Init+0x2c8>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d86f      	bhi.n	80017aa <HAL_GPIO_Init+0x12e>
 80016ca:	4a9f      	ldr	r2, [pc, #636]	; (8001948 <HAL_GPIO_Init+0x2cc>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d052      	beq.n	8001776 <HAL_GPIO_Init+0xfa>
 80016d0:	4a9d      	ldr	r2, [pc, #628]	; (8001948 <HAL_GPIO_Init+0x2cc>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d869      	bhi.n	80017aa <HAL_GPIO_Init+0x12e>
 80016d6:	4a9d      	ldr	r2, [pc, #628]	; (800194c <HAL_GPIO_Init+0x2d0>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d04c      	beq.n	8001776 <HAL_GPIO_Init+0xfa>
 80016dc:	4a9b      	ldr	r2, [pc, #620]	; (800194c <HAL_GPIO_Init+0x2d0>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d863      	bhi.n	80017aa <HAL_GPIO_Init+0x12e>
 80016e2:	4a9b      	ldr	r2, [pc, #620]	; (8001950 <HAL_GPIO_Init+0x2d4>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d046      	beq.n	8001776 <HAL_GPIO_Init+0xfa>
 80016e8:	4a99      	ldr	r2, [pc, #612]	; (8001950 <HAL_GPIO_Init+0x2d4>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d85d      	bhi.n	80017aa <HAL_GPIO_Init+0x12e>
 80016ee:	2b12      	cmp	r3, #18
 80016f0:	d82a      	bhi.n	8001748 <HAL_GPIO_Init+0xcc>
 80016f2:	2b12      	cmp	r3, #18
 80016f4:	d859      	bhi.n	80017aa <HAL_GPIO_Init+0x12e>
 80016f6:	a201      	add	r2, pc, #4	; (adr r2, 80016fc <HAL_GPIO_Init+0x80>)
 80016f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016fc:	08001777 	.word	0x08001777
 8001700:	08001751 	.word	0x08001751
 8001704:	08001763 	.word	0x08001763
 8001708:	080017a5 	.word	0x080017a5
 800170c:	080017ab 	.word	0x080017ab
 8001710:	080017ab 	.word	0x080017ab
 8001714:	080017ab 	.word	0x080017ab
 8001718:	080017ab 	.word	0x080017ab
 800171c:	080017ab 	.word	0x080017ab
 8001720:	080017ab 	.word	0x080017ab
 8001724:	080017ab 	.word	0x080017ab
 8001728:	080017ab 	.word	0x080017ab
 800172c:	080017ab 	.word	0x080017ab
 8001730:	080017ab 	.word	0x080017ab
 8001734:	080017ab 	.word	0x080017ab
 8001738:	080017ab 	.word	0x080017ab
 800173c:	080017ab 	.word	0x080017ab
 8001740:	08001759 	.word	0x08001759
 8001744:	0800176d 	.word	0x0800176d
 8001748:	4a82      	ldr	r2, [pc, #520]	; (8001954 <HAL_GPIO_Init+0x2d8>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d013      	beq.n	8001776 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800174e:	e02c      	b.n	80017aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	623b      	str	r3, [r7, #32]
          break;
 8001756:	e029      	b.n	80017ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	3304      	adds	r3, #4
 800175e:	623b      	str	r3, [r7, #32]
          break;
 8001760:	e024      	b.n	80017ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	3308      	adds	r3, #8
 8001768:	623b      	str	r3, [r7, #32]
          break;
 800176a:	e01f      	b.n	80017ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	330c      	adds	r3, #12
 8001772:	623b      	str	r3, [r7, #32]
          break;
 8001774:	e01a      	b.n	80017ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d102      	bne.n	8001784 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800177e:	2304      	movs	r3, #4
 8001780:	623b      	str	r3, [r7, #32]
          break;
 8001782:	e013      	b.n	80017ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d105      	bne.n	8001798 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800178c:	2308      	movs	r3, #8
 800178e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69fa      	ldr	r2, [r7, #28]
 8001794:	611a      	str	r2, [r3, #16]
          break;
 8001796:	e009      	b.n	80017ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001798:	2308      	movs	r3, #8
 800179a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69fa      	ldr	r2, [r7, #28]
 80017a0:	615a      	str	r2, [r3, #20]
          break;
 80017a2:	e003      	b.n	80017ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017a4:	2300      	movs	r3, #0
 80017a6:	623b      	str	r3, [r7, #32]
          break;
 80017a8:	e000      	b.n	80017ac <HAL_GPIO_Init+0x130>
          break;
 80017aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	2bff      	cmp	r3, #255	; 0xff
 80017b0:	d801      	bhi.n	80017b6 <HAL_GPIO_Init+0x13a>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	e001      	b.n	80017ba <HAL_GPIO_Init+0x13e>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	3304      	adds	r3, #4
 80017ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	2bff      	cmp	r3, #255	; 0xff
 80017c0:	d802      	bhi.n	80017c8 <HAL_GPIO_Init+0x14c>
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	e002      	b.n	80017ce <HAL_GPIO_Init+0x152>
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	3b08      	subs	r3, #8
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	210f      	movs	r1, #15
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	fa01 f303 	lsl.w	r3, r1, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	401a      	ands	r2, r3
 80017e0:	6a39      	ldr	r1, [r7, #32]
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	fa01 f303 	lsl.w	r3, r1, r3
 80017e8:	431a      	orrs	r2, r3
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 8090 	beq.w	800191c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017fc:	4b56      	ldr	r3, [pc, #344]	; (8001958 <HAL_GPIO_Init+0x2dc>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	4a55      	ldr	r2, [pc, #340]	; (8001958 <HAL_GPIO_Init+0x2dc>)
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	6193      	str	r3, [r2, #24]
 8001808:	4b53      	ldr	r3, [pc, #332]	; (8001958 <HAL_GPIO_Init+0x2dc>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001814:	4a51      	ldr	r2, [pc, #324]	; (800195c <HAL_GPIO_Init+0x2e0>)
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	089b      	lsrs	r3, r3, #2
 800181a:	3302      	adds	r3, #2
 800181c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001820:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001824:	f003 0303 	and.w	r3, r3, #3
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	220f      	movs	r2, #15
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	4013      	ands	r3, r2
 8001836:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a49      	ldr	r2, [pc, #292]	; (8001960 <HAL_GPIO_Init+0x2e4>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d00d      	beq.n	800185c <HAL_GPIO_Init+0x1e0>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a48      	ldr	r2, [pc, #288]	; (8001964 <HAL_GPIO_Init+0x2e8>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d007      	beq.n	8001858 <HAL_GPIO_Init+0x1dc>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a47      	ldr	r2, [pc, #284]	; (8001968 <HAL_GPIO_Init+0x2ec>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d101      	bne.n	8001854 <HAL_GPIO_Init+0x1d8>
 8001850:	2302      	movs	r3, #2
 8001852:	e004      	b.n	800185e <HAL_GPIO_Init+0x1e2>
 8001854:	2303      	movs	r3, #3
 8001856:	e002      	b.n	800185e <HAL_GPIO_Init+0x1e2>
 8001858:	2301      	movs	r3, #1
 800185a:	e000      	b.n	800185e <HAL_GPIO_Init+0x1e2>
 800185c:	2300      	movs	r3, #0
 800185e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001860:	f002 0203 	and.w	r2, r2, #3
 8001864:	0092      	lsls	r2, r2, #2
 8001866:	4093      	lsls	r3, r2
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	4313      	orrs	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800186e:	493b      	ldr	r1, [pc, #236]	; (800195c <HAL_GPIO_Init+0x2e0>)
 8001870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001872:	089b      	lsrs	r3, r3, #2
 8001874:	3302      	adds	r3, #2
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d006      	beq.n	8001896 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001888:	4b38      	ldr	r3, [pc, #224]	; (800196c <HAL_GPIO_Init+0x2f0>)
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	4937      	ldr	r1, [pc, #220]	; (800196c <HAL_GPIO_Init+0x2f0>)
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	4313      	orrs	r3, r2
 8001892:	608b      	str	r3, [r1, #8]
 8001894:	e006      	b.n	80018a4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001896:	4b35      	ldr	r3, [pc, #212]	; (800196c <HAL_GPIO_Init+0x2f0>)
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	43db      	mvns	r3, r3
 800189e:	4933      	ldr	r1, [pc, #204]	; (800196c <HAL_GPIO_Init+0x2f0>)
 80018a0:	4013      	ands	r3, r2
 80018a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d006      	beq.n	80018be <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018b0:	4b2e      	ldr	r3, [pc, #184]	; (800196c <HAL_GPIO_Init+0x2f0>)
 80018b2:	68da      	ldr	r2, [r3, #12]
 80018b4:	492d      	ldr	r1, [pc, #180]	; (800196c <HAL_GPIO_Init+0x2f0>)
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	60cb      	str	r3, [r1, #12]
 80018bc:	e006      	b.n	80018cc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018be:	4b2b      	ldr	r3, [pc, #172]	; (800196c <HAL_GPIO_Init+0x2f0>)
 80018c0:	68da      	ldr	r2, [r3, #12]
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	4929      	ldr	r1, [pc, #164]	; (800196c <HAL_GPIO_Init+0x2f0>)
 80018c8:	4013      	ands	r3, r2
 80018ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d006      	beq.n	80018e6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018d8:	4b24      	ldr	r3, [pc, #144]	; (800196c <HAL_GPIO_Init+0x2f0>)
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	4923      	ldr	r1, [pc, #140]	; (800196c <HAL_GPIO_Init+0x2f0>)
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	604b      	str	r3, [r1, #4]
 80018e4:	e006      	b.n	80018f4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018e6:	4b21      	ldr	r3, [pc, #132]	; (800196c <HAL_GPIO_Init+0x2f0>)
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	43db      	mvns	r3, r3
 80018ee:	491f      	ldr	r1, [pc, #124]	; (800196c <HAL_GPIO_Init+0x2f0>)
 80018f0:	4013      	ands	r3, r2
 80018f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d006      	beq.n	800190e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001900:	4b1a      	ldr	r3, [pc, #104]	; (800196c <HAL_GPIO_Init+0x2f0>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4919      	ldr	r1, [pc, #100]	; (800196c <HAL_GPIO_Init+0x2f0>)
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	4313      	orrs	r3, r2
 800190a:	600b      	str	r3, [r1, #0]
 800190c:	e006      	b.n	800191c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800190e:	4b17      	ldr	r3, [pc, #92]	; (800196c <HAL_GPIO_Init+0x2f0>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	43db      	mvns	r3, r3
 8001916:	4915      	ldr	r1, [pc, #84]	; (800196c <HAL_GPIO_Init+0x2f0>)
 8001918:	4013      	ands	r3, r2
 800191a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800191c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191e:	3301      	adds	r3, #1
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001928:	fa22 f303 	lsr.w	r3, r2, r3
 800192c:	2b00      	cmp	r3, #0
 800192e:	f47f aeaf 	bne.w	8001690 <HAL_GPIO_Init+0x14>
  }
}
 8001932:	bf00      	nop
 8001934:	bf00      	nop
 8001936:	372c      	adds	r7, #44	; 0x2c
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	10320000 	.word	0x10320000
 8001944:	10310000 	.word	0x10310000
 8001948:	10220000 	.word	0x10220000
 800194c:	10210000 	.word	0x10210000
 8001950:	10120000 	.word	0x10120000
 8001954:	10110000 	.word	0x10110000
 8001958:	40021000 	.word	0x40021000
 800195c:	40010000 	.word	0x40010000
 8001960:	40010800 	.word	0x40010800
 8001964:	40010c00 	.word	0x40010c00
 8001968:	40011000 	.word	0x40011000
 800196c:	40010400 	.word	0x40010400

08001970 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	460b      	mov	r3, r1
 800197a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	887b      	ldrh	r3, [r7, #2]
 8001982:	4013      	ands	r3, r2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d002      	beq.n	800198e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001988:	2301      	movs	r3, #1
 800198a:	73fb      	strb	r3, [r7, #15]
 800198c:	e001      	b.n	8001992 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800198e:	2300      	movs	r3, #0
 8001990:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001992:	7bfb      	ldrb	r3, [r7, #15]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr

0800199e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
 80019a6:	460b      	mov	r3, r1
 80019a8:	807b      	strh	r3, [r7, #2]
 80019aa:	4613      	mov	r3, r2
 80019ac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019ae:	787b      	ldrb	r3, [r7, #1]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d003      	beq.n	80019bc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019b4:	887a      	ldrh	r2, [r7, #2]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019ba:	e003      	b.n	80019c4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019bc:	887b      	ldrh	r3, [r7, #2]
 80019be:	041a      	lsls	r2, r3, #16
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	611a      	str	r2, [r3, #16]
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr

080019ce <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b085      	sub	sp, #20
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
 80019d6:	460b      	mov	r3, r1
 80019d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019e0:	887a      	ldrh	r2, [r7, #2]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4013      	ands	r3, r2
 80019e6:	041a      	lsls	r2, r3, #16
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	43d9      	mvns	r1, r3
 80019ec:	887b      	ldrh	r3, [r7, #2]
 80019ee:	400b      	ands	r3, r1
 80019f0:	431a      	orrs	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	611a      	str	r2, [r3, #16]
}
 80019f6:	bf00      	nop
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr

08001a00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e26c      	b.n	8001eec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f000 8087 	beq.w	8001b2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a20:	4b92      	ldr	r3, [pc, #584]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 030c 	and.w	r3, r3, #12
 8001a28:	2b04      	cmp	r3, #4
 8001a2a:	d00c      	beq.n	8001a46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a2c:	4b8f      	ldr	r3, [pc, #572]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 030c 	and.w	r3, r3, #12
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	d112      	bne.n	8001a5e <HAL_RCC_OscConfig+0x5e>
 8001a38:	4b8c      	ldr	r3, [pc, #560]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a44:	d10b      	bne.n	8001a5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a46:	4b89      	ldr	r3, [pc, #548]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d06c      	beq.n	8001b2c <HAL_RCC_OscConfig+0x12c>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d168      	bne.n	8001b2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e246      	b.n	8001eec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a66:	d106      	bne.n	8001a76 <HAL_RCC_OscConfig+0x76>
 8001a68:	4b80      	ldr	r3, [pc, #512]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a7f      	ldr	r2, [pc, #508]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a72:	6013      	str	r3, [r2, #0]
 8001a74:	e02e      	b.n	8001ad4 <HAL_RCC_OscConfig+0xd4>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d10c      	bne.n	8001a98 <HAL_RCC_OscConfig+0x98>
 8001a7e:	4b7b      	ldr	r3, [pc, #492]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a7a      	ldr	r2, [pc, #488]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a88:	6013      	str	r3, [r2, #0]
 8001a8a:	4b78      	ldr	r3, [pc, #480]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a77      	ldr	r2, [pc, #476]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	e01d      	b.n	8001ad4 <HAL_RCC_OscConfig+0xd4>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aa0:	d10c      	bne.n	8001abc <HAL_RCC_OscConfig+0xbc>
 8001aa2:	4b72      	ldr	r3, [pc, #456]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a71      	ldr	r2, [pc, #452]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	4b6f      	ldr	r3, [pc, #444]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a6e      	ldr	r2, [pc, #440]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	e00b      	b.n	8001ad4 <HAL_RCC_OscConfig+0xd4>
 8001abc:	4b6b      	ldr	r3, [pc, #428]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a6a      	ldr	r2, [pc, #424]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ac6:	6013      	str	r3, [r2, #0]
 8001ac8:	4b68      	ldr	r3, [pc, #416]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a67      	ldr	r2, [pc, #412]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d013      	beq.n	8001b04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001adc:	f7ff fcb6 	bl	800144c <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae4:	f7ff fcb2 	bl	800144c <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b64      	cmp	r3, #100	; 0x64
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e1fa      	b.n	8001eec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af6:	4b5d      	ldr	r3, [pc, #372]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0xe4>
 8001b02:	e014      	b.n	8001b2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b04:	f7ff fca2 	bl	800144c <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b0c:	f7ff fc9e 	bl	800144c <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b64      	cmp	r3, #100	; 0x64
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e1e6      	b.n	8001eec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b1e:	4b53      	ldr	r3, [pc, #332]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f0      	bne.n	8001b0c <HAL_RCC_OscConfig+0x10c>
 8001b2a:	e000      	b.n	8001b2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d063      	beq.n	8001c02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b3a:	4b4c      	ldr	r3, [pc, #304]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 030c 	and.w	r3, r3, #12
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00b      	beq.n	8001b5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b46:	4b49      	ldr	r3, [pc, #292]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f003 030c 	and.w	r3, r3, #12
 8001b4e:	2b08      	cmp	r3, #8
 8001b50:	d11c      	bne.n	8001b8c <HAL_RCC_OscConfig+0x18c>
 8001b52:	4b46      	ldr	r3, [pc, #280]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d116      	bne.n	8001b8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b5e:	4b43      	ldr	r3, [pc, #268]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d005      	beq.n	8001b76 <HAL_RCC_OscConfig+0x176>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d001      	beq.n	8001b76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e1ba      	b.n	8001eec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b76:	4b3d      	ldr	r3, [pc, #244]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	4939      	ldr	r1, [pc, #228]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b8a:	e03a      	b.n	8001c02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d020      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b94:	4b36      	ldr	r3, [pc, #216]	; (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9a:	f7ff fc57 	bl	800144c <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ba2:	f7ff fc53 	bl	800144c <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e19b      	b.n	8001eec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb4:	4b2d      	ldr	r3, [pc, #180]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0f0      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc0:	4b2a      	ldr	r3, [pc, #168]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	4927      	ldr	r1, [pc, #156]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	600b      	str	r3, [r1, #0]
 8001bd4:	e015      	b.n	8001c02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bd6:	4b26      	ldr	r3, [pc, #152]	; (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bdc:	f7ff fc36 	bl	800144c <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001be4:	f7ff fc32 	bl	800144c <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e17a      	b.n	8001eec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bf6:	4b1d      	ldr	r3, [pc, #116]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f0      	bne.n	8001be4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d03a      	beq.n	8001c84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d019      	beq.n	8001c4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c16:	4b17      	ldr	r3, [pc, #92]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c1c:	f7ff fc16 	bl	800144c <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c24:	f7ff fc12 	bl	800144c <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e15a      	b.n	8001eec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c36:	4b0d      	ldr	r3, [pc, #52]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d0f0      	beq.n	8001c24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c42:	2001      	movs	r0, #1
 8001c44:	f000 fa9a 	bl	800217c <RCC_Delay>
 8001c48:	e01c      	b.n	8001c84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c50:	f7ff fbfc 	bl	800144c <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c56:	e00f      	b.n	8001c78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c58:	f7ff fbf8 	bl	800144c <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d908      	bls.n	8001c78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e140      	b.n	8001eec <HAL_RCC_OscConfig+0x4ec>
 8001c6a:	bf00      	nop
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	42420000 	.word	0x42420000
 8001c74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c78:	4b9e      	ldr	r3, [pc, #632]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1e9      	bne.n	8001c58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f000 80a6 	beq.w	8001dde <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c92:	2300      	movs	r3, #0
 8001c94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c96:	4b97      	ldr	r3, [pc, #604]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10d      	bne.n	8001cbe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ca2:	4b94      	ldr	r3, [pc, #592]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	4a93      	ldr	r2, [pc, #588]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cac:	61d3      	str	r3, [r2, #28]
 8001cae:	4b91      	ldr	r3, [pc, #580]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb6:	60bb      	str	r3, [r7, #8]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cbe:	4b8e      	ldr	r3, [pc, #568]	; (8001ef8 <HAL_RCC_OscConfig+0x4f8>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d118      	bne.n	8001cfc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cca:	4b8b      	ldr	r3, [pc, #556]	; (8001ef8 <HAL_RCC_OscConfig+0x4f8>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a8a      	ldr	r2, [pc, #552]	; (8001ef8 <HAL_RCC_OscConfig+0x4f8>)
 8001cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cd6:	f7ff fbb9 	bl	800144c <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cde:	f7ff fbb5 	bl	800144c <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b64      	cmp	r3, #100	; 0x64
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e0fd      	b.n	8001eec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf0:	4b81      	ldr	r3, [pc, #516]	; (8001ef8 <HAL_RCC_OscConfig+0x4f8>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0f0      	beq.n	8001cde <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d106      	bne.n	8001d12 <HAL_RCC_OscConfig+0x312>
 8001d04:	4b7b      	ldr	r3, [pc, #492]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	4a7a      	ldr	r2, [pc, #488]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	6213      	str	r3, [r2, #32]
 8001d10:	e02d      	b.n	8001d6e <HAL_RCC_OscConfig+0x36e>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d10c      	bne.n	8001d34 <HAL_RCC_OscConfig+0x334>
 8001d1a:	4b76      	ldr	r3, [pc, #472]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	4a75      	ldr	r2, [pc, #468]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001d20:	f023 0301 	bic.w	r3, r3, #1
 8001d24:	6213      	str	r3, [r2, #32]
 8001d26:	4b73      	ldr	r3, [pc, #460]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	4a72      	ldr	r2, [pc, #456]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001d2c:	f023 0304 	bic.w	r3, r3, #4
 8001d30:	6213      	str	r3, [r2, #32]
 8001d32:	e01c      	b.n	8001d6e <HAL_RCC_OscConfig+0x36e>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	2b05      	cmp	r3, #5
 8001d3a:	d10c      	bne.n	8001d56 <HAL_RCC_OscConfig+0x356>
 8001d3c:	4b6d      	ldr	r3, [pc, #436]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	4a6c      	ldr	r2, [pc, #432]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001d42:	f043 0304 	orr.w	r3, r3, #4
 8001d46:	6213      	str	r3, [r2, #32]
 8001d48:	4b6a      	ldr	r3, [pc, #424]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	4a69      	ldr	r2, [pc, #420]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	6213      	str	r3, [r2, #32]
 8001d54:	e00b      	b.n	8001d6e <HAL_RCC_OscConfig+0x36e>
 8001d56:	4b67      	ldr	r3, [pc, #412]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	4a66      	ldr	r2, [pc, #408]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001d5c:	f023 0301 	bic.w	r3, r3, #1
 8001d60:	6213      	str	r3, [r2, #32]
 8001d62:	4b64      	ldr	r3, [pc, #400]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	4a63      	ldr	r2, [pc, #396]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001d68:	f023 0304 	bic.w	r3, r3, #4
 8001d6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d015      	beq.n	8001da2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d76:	f7ff fb69 	bl	800144c <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d7c:	e00a      	b.n	8001d94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d7e:	f7ff fb65 	bl	800144c <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e0ab      	b.n	8001eec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d94:	4b57      	ldr	r3, [pc, #348]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0ee      	beq.n	8001d7e <HAL_RCC_OscConfig+0x37e>
 8001da0:	e014      	b.n	8001dcc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da2:	f7ff fb53 	bl	800144c <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da8:	e00a      	b.n	8001dc0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001daa:	f7ff fb4f 	bl	800144c <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e095      	b.n	8001eec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc0:	4b4c      	ldr	r3, [pc, #304]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1ee      	bne.n	8001daa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dcc:	7dfb      	ldrb	r3, [r7, #23]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d105      	bne.n	8001dde <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dd2:	4b48      	ldr	r3, [pc, #288]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	4a47      	ldr	r2, [pc, #284]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001dd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 8081 	beq.w	8001eea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001de8:	4b42      	ldr	r3, [pc, #264]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 030c 	and.w	r3, r3, #12
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d061      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	69db      	ldr	r3, [r3, #28]
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d146      	bne.n	8001e8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dfc:	4b3f      	ldr	r3, [pc, #252]	; (8001efc <HAL_RCC_OscConfig+0x4fc>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e02:	f7ff fb23 	bl	800144c <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0a:	f7ff fb1f 	bl	800144c <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e067      	b.n	8001eec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e1c:	4b35      	ldr	r3, [pc, #212]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1f0      	bne.n	8001e0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e30:	d108      	bne.n	8001e44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e32:	4b30      	ldr	r3, [pc, #192]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	492d      	ldr	r1, [pc, #180]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e44:	4b2b      	ldr	r3, [pc, #172]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a19      	ldr	r1, [r3, #32]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e54:	430b      	orrs	r3, r1
 8001e56:	4927      	ldr	r1, [pc, #156]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e5c:	4b27      	ldr	r3, [pc, #156]	; (8001efc <HAL_RCC_OscConfig+0x4fc>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e62:	f7ff faf3 	bl	800144c <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6a:	f7ff faef 	bl	800144c <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e037      	b.n	8001eec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e7c:	4b1d      	ldr	r3, [pc, #116]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0f0      	beq.n	8001e6a <HAL_RCC_OscConfig+0x46a>
 8001e88:	e02f      	b.n	8001eea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e8a:	4b1c      	ldr	r3, [pc, #112]	; (8001efc <HAL_RCC_OscConfig+0x4fc>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e90:	f7ff fadc 	bl	800144c <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e98:	f7ff fad8 	bl	800144c <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e020      	b.n	8001eec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eaa:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0x498>
 8001eb6:	e018      	b.n	8001eea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69db      	ldr	r3, [r3, #28]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d101      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e013      	b.n	8001eec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ec4:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <HAL_RCC_OscConfig+0x4f4>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d106      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d001      	beq.n	8001eea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	40007000 	.word	0x40007000
 8001efc:	42420060 	.word	0x42420060

08001f00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e0d0      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f14:	4b6a      	ldr	r3, [pc, #424]	; (80020c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0307 	and.w	r3, r3, #7
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d910      	bls.n	8001f44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f22:	4b67      	ldr	r3, [pc, #412]	; (80020c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f023 0207 	bic.w	r2, r3, #7
 8001f2a:	4965      	ldr	r1, [pc, #404]	; (80020c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f32:	4b63      	ldr	r3, [pc, #396]	; (80020c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d001      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e0b8      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d020      	beq.n	8001f92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d005      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f5c:	4b59      	ldr	r3, [pc, #356]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	4a58      	ldr	r2, [pc, #352]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0308 	and.w	r3, r3, #8
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d005      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f74:	4b53      	ldr	r3, [pc, #332]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	4a52      	ldr	r2, [pc, #328]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f80:	4b50      	ldr	r3, [pc, #320]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	494d      	ldr	r1, [pc, #308]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d040      	beq.n	8002020 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d107      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa6:	4b47      	ldr	r3, [pc, #284]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d115      	bne.n	8001fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e07f      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d107      	bne.n	8001fce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fbe:	4b41      	ldr	r3, [pc, #260]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d109      	bne.n	8001fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e073      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fce:	4b3d      	ldr	r3, [pc, #244]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e06b      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fde:	4b39      	ldr	r3, [pc, #228]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f023 0203 	bic.w	r2, r3, #3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	4936      	ldr	r1, [pc, #216]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ff0:	f7ff fa2c 	bl	800144c <HAL_GetTick>
 8001ff4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff6:	e00a      	b.n	800200e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff8:	f7ff fa28 	bl	800144c <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	f241 3288 	movw	r2, #5000	; 0x1388
 8002006:	4293      	cmp	r3, r2
 8002008:	d901      	bls.n	800200e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e053      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800200e:	4b2d      	ldr	r3, [pc, #180]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 020c 	and.w	r2, r3, #12
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	429a      	cmp	r2, r3
 800201e:	d1eb      	bne.n	8001ff8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002020:	4b27      	ldr	r3, [pc, #156]	; (80020c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	429a      	cmp	r2, r3
 800202c:	d210      	bcs.n	8002050 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202e:	4b24      	ldr	r3, [pc, #144]	; (80020c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f023 0207 	bic.w	r2, r3, #7
 8002036:	4922      	ldr	r1, [pc, #136]	; (80020c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	4313      	orrs	r3, r2
 800203c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800203e:	4b20      	ldr	r3, [pc, #128]	; (80020c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	429a      	cmp	r2, r3
 800204a:	d001      	beq.n	8002050 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e032      	b.n	80020b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b00      	cmp	r3, #0
 800205a:	d008      	beq.n	800206e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800205c:	4b19      	ldr	r3, [pc, #100]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	4916      	ldr	r1, [pc, #88]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 800206a:	4313      	orrs	r3, r2
 800206c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0308 	and.w	r3, r3, #8
 8002076:	2b00      	cmp	r3, #0
 8002078:	d009      	beq.n	800208e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800207a:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	490e      	ldr	r1, [pc, #56]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 800208a:	4313      	orrs	r3, r2
 800208c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800208e:	f000 f821 	bl	80020d4 <HAL_RCC_GetSysClockFreq>
 8002092:	4602      	mov	r2, r0
 8002094:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	091b      	lsrs	r3, r3, #4
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	490a      	ldr	r1, [pc, #40]	; (80020c8 <HAL_RCC_ClockConfig+0x1c8>)
 80020a0:	5ccb      	ldrb	r3, [r1, r3]
 80020a2:	fa22 f303 	lsr.w	r3, r2, r3
 80020a6:	4a09      	ldr	r2, [pc, #36]	; (80020cc <HAL_RCC_ClockConfig+0x1cc>)
 80020a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020aa:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <HAL_RCC_ClockConfig+0x1d0>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff f98a 	bl	80013c8 <HAL_InitTick>

  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40022000 	.word	0x40022000
 80020c4:	40021000 	.word	0x40021000
 80020c8:	080029f8 	.word	0x080029f8
 80020cc:	2000001c 	.word	0x2000001c
 80020d0:	20000020 	.word	0x20000020

080020d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b087      	sub	sp, #28
 80020d8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	2300      	movs	r3, #0
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	2300      	movs	r3, #0
 80020e4:	617b      	str	r3, [r7, #20]
 80020e6:	2300      	movs	r3, #0
 80020e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020ee:	4b1e      	ldr	r3, [pc, #120]	; (8002168 <HAL_RCC_GetSysClockFreq+0x94>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f003 030c 	and.w	r3, r3, #12
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	d002      	beq.n	8002104 <HAL_RCC_GetSysClockFreq+0x30>
 80020fe:	2b08      	cmp	r3, #8
 8002100:	d003      	beq.n	800210a <HAL_RCC_GetSysClockFreq+0x36>
 8002102:	e027      	b.n	8002154 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002104:	4b19      	ldr	r3, [pc, #100]	; (800216c <HAL_RCC_GetSysClockFreq+0x98>)
 8002106:	613b      	str	r3, [r7, #16]
      break;
 8002108:	e027      	b.n	800215a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	0c9b      	lsrs	r3, r3, #18
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	4a17      	ldr	r2, [pc, #92]	; (8002170 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002114:	5cd3      	ldrb	r3, [r2, r3]
 8002116:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d010      	beq.n	8002144 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002122:	4b11      	ldr	r3, [pc, #68]	; (8002168 <HAL_RCC_GetSysClockFreq+0x94>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	0c5b      	lsrs	r3, r3, #17
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	4a11      	ldr	r2, [pc, #68]	; (8002174 <HAL_RCC_GetSysClockFreq+0xa0>)
 800212e:	5cd3      	ldrb	r3, [r2, r3]
 8002130:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a0d      	ldr	r2, [pc, #52]	; (800216c <HAL_RCC_GetSysClockFreq+0x98>)
 8002136:	fb02 f203 	mul.w	r2, r2, r3
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002140:	617b      	str	r3, [r7, #20]
 8002142:	e004      	b.n	800214e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a0c      	ldr	r2, [pc, #48]	; (8002178 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002148:	fb02 f303 	mul.w	r3, r2, r3
 800214c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	613b      	str	r3, [r7, #16]
      break;
 8002152:	e002      	b.n	800215a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002154:	4b05      	ldr	r3, [pc, #20]	; (800216c <HAL_RCC_GetSysClockFreq+0x98>)
 8002156:	613b      	str	r3, [r7, #16]
      break;
 8002158:	bf00      	nop
    }
  }
  return sysclockfreq;
 800215a:	693b      	ldr	r3, [r7, #16]
}
 800215c:	4618      	mov	r0, r3
 800215e:	371c      	adds	r7, #28
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	40021000 	.word	0x40021000
 800216c:	007a1200 	.word	0x007a1200
 8002170:	08002a08 	.word	0x08002a08
 8002174:	08002a18 	.word	0x08002a18
 8002178:	003d0900 	.word	0x003d0900

0800217c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002184:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <RCC_Delay+0x34>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a0a      	ldr	r2, [pc, #40]	; (80021b4 <RCC_Delay+0x38>)
 800218a:	fba2 2303 	umull	r2, r3, r2, r3
 800218e:	0a5b      	lsrs	r3, r3, #9
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	fb02 f303 	mul.w	r3, r2, r3
 8002196:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002198:	bf00      	nop
  }
  while (Delay --);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	1e5a      	subs	r2, r3, #1
 800219e:	60fa      	str	r2, [r7, #12]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1f9      	bne.n	8002198 <RCC_Delay+0x1c>
}
 80021a4:	bf00      	nop
 80021a6:	bf00      	nop
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr
 80021b0:	2000001c 	.word	0x2000001c
 80021b4:	10624dd3 	.word	0x10624dd3

080021b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e041      	b.n	800224e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d106      	bne.n	80021e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff f85a 	bl	8001298 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2202      	movs	r2, #2
 80021e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3304      	adds	r3, #4
 80021f4:	4619      	mov	r1, r3
 80021f6:	4610      	mov	r0, r2
 80021f8:	f000 fa6e 	bl	80026d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b01      	cmp	r3, #1
 800226a:	d001      	beq.n	8002270 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e035      	b.n	80022dc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2202      	movs	r2, #2
 8002274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68da      	ldr	r2, [r3, #12]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f042 0201 	orr.w	r2, r2, #1
 8002286:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a16      	ldr	r2, [pc, #88]	; (80022e8 <HAL_TIM_Base_Start_IT+0x90>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d009      	beq.n	80022a6 <HAL_TIM_Base_Start_IT+0x4e>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800229a:	d004      	beq.n	80022a6 <HAL_TIM_Base_Start_IT+0x4e>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a12      	ldr	r2, [pc, #72]	; (80022ec <HAL_TIM_Base_Start_IT+0x94>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d111      	bne.n	80022ca <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2b06      	cmp	r3, #6
 80022b6:	d010      	beq.n	80022da <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f042 0201 	orr.w	r2, r2, #1
 80022c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022c8:	e007      	b.n	80022da <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f042 0201 	orr.w	r2, r2, #1
 80022d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bc80      	pop	{r7}
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	40012c00 	.word	0x40012c00
 80022ec:	40000400 	.word	0x40000400

080022f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b02      	cmp	r3, #2
 8002304:	d122      	bne.n	800234c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b02      	cmp	r3, #2
 8002312:	d11b      	bne.n	800234c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f06f 0202 	mvn.w	r2, #2
 800231c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	f003 0303 	and.w	r3, r3, #3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f9b4 	bl	80026a0 <HAL_TIM_IC_CaptureCallback>
 8002338:	e005      	b.n	8002346 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f9a7 	bl	800268e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f9b6 	bl	80026b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	f003 0304 	and.w	r3, r3, #4
 8002356:	2b04      	cmp	r3, #4
 8002358:	d122      	bne.n	80023a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	2b04      	cmp	r3, #4
 8002366:	d11b      	bne.n	80023a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f06f 0204 	mvn.w	r2, #4
 8002370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2202      	movs	r2, #2
 8002376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f98a 	bl	80026a0 <HAL_TIM_IC_CaptureCallback>
 800238c:	e005      	b.n	800239a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f97d 	bl	800268e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 f98c 	bl	80026b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	2b08      	cmp	r3, #8
 80023ac:	d122      	bne.n	80023f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	f003 0308 	and.w	r3, r3, #8
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	d11b      	bne.n	80023f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f06f 0208 	mvn.w	r2, #8
 80023c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2204      	movs	r2, #4
 80023ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f960 	bl	80026a0 <HAL_TIM_IC_CaptureCallback>
 80023e0:	e005      	b.n	80023ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f953 	bl	800268e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 f962 	bl	80026b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	f003 0310 	and.w	r3, r3, #16
 80023fe:	2b10      	cmp	r3, #16
 8002400:	d122      	bne.n	8002448 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f003 0310 	and.w	r3, r3, #16
 800240c:	2b10      	cmp	r3, #16
 800240e:	d11b      	bne.n	8002448 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f06f 0210 	mvn.w	r2, #16
 8002418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2208      	movs	r2, #8
 800241e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f936 	bl	80026a0 <HAL_TIM_IC_CaptureCallback>
 8002434:	e005      	b.n	8002442 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 f929 	bl	800268e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 f938 	bl	80026b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b01      	cmp	r3, #1
 8002454:	d10e      	bne.n	8002474 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b01      	cmp	r3, #1
 8002462:	d107      	bne.n	8002474 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f06f 0201 	mvn.w	r2, #1
 800246c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7fe fcd2 	bl	8000e18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800247e:	2b80      	cmp	r3, #128	; 0x80
 8002480:	d10e      	bne.n	80024a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800248c:	2b80      	cmp	r3, #128	; 0x80
 800248e:	d107      	bne.n	80024a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 fa6b 	bl	8002976 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024aa:	2b40      	cmp	r3, #64	; 0x40
 80024ac:	d10e      	bne.n	80024cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b8:	2b40      	cmp	r3, #64	; 0x40
 80024ba:	d107      	bne.n	80024cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f8fc 	bl	80026c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	f003 0320 	and.w	r3, r3, #32
 80024d6:	2b20      	cmp	r3, #32
 80024d8:	d10e      	bne.n	80024f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f003 0320 	and.w	r3, r3, #32
 80024e4:	2b20      	cmp	r3, #32
 80024e6:	d107      	bne.n	80024f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f06f 0220 	mvn.w	r2, #32
 80024f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 fa36 	bl	8002964 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024f8:	bf00      	nop
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800250a:	2300      	movs	r3, #0
 800250c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002514:	2b01      	cmp	r3, #1
 8002516:	d101      	bne.n	800251c <HAL_TIM_ConfigClockSource+0x1c>
 8002518:	2302      	movs	r3, #2
 800251a:	e0b4      	b.n	8002686 <HAL_TIM_ConfigClockSource+0x186>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2202      	movs	r2, #2
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800253a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002542:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68ba      	ldr	r2, [r7, #8]
 800254a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002554:	d03e      	beq.n	80025d4 <HAL_TIM_ConfigClockSource+0xd4>
 8002556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800255a:	f200 8087 	bhi.w	800266c <HAL_TIM_ConfigClockSource+0x16c>
 800255e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002562:	f000 8086 	beq.w	8002672 <HAL_TIM_ConfigClockSource+0x172>
 8002566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800256a:	d87f      	bhi.n	800266c <HAL_TIM_ConfigClockSource+0x16c>
 800256c:	2b70      	cmp	r3, #112	; 0x70
 800256e:	d01a      	beq.n	80025a6 <HAL_TIM_ConfigClockSource+0xa6>
 8002570:	2b70      	cmp	r3, #112	; 0x70
 8002572:	d87b      	bhi.n	800266c <HAL_TIM_ConfigClockSource+0x16c>
 8002574:	2b60      	cmp	r3, #96	; 0x60
 8002576:	d050      	beq.n	800261a <HAL_TIM_ConfigClockSource+0x11a>
 8002578:	2b60      	cmp	r3, #96	; 0x60
 800257a:	d877      	bhi.n	800266c <HAL_TIM_ConfigClockSource+0x16c>
 800257c:	2b50      	cmp	r3, #80	; 0x50
 800257e:	d03c      	beq.n	80025fa <HAL_TIM_ConfigClockSource+0xfa>
 8002580:	2b50      	cmp	r3, #80	; 0x50
 8002582:	d873      	bhi.n	800266c <HAL_TIM_ConfigClockSource+0x16c>
 8002584:	2b40      	cmp	r3, #64	; 0x40
 8002586:	d058      	beq.n	800263a <HAL_TIM_ConfigClockSource+0x13a>
 8002588:	2b40      	cmp	r3, #64	; 0x40
 800258a:	d86f      	bhi.n	800266c <HAL_TIM_ConfigClockSource+0x16c>
 800258c:	2b30      	cmp	r3, #48	; 0x30
 800258e:	d064      	beq.n	800265a <HAL_TIM_ConfigClockSource+0x15a>
 8002590:	2b30      	cmp	r3, #48	; 0x30
 8002592:	d86b      	bhi.n	800266c <HAL_TIM_ConfigClockSource+0x16c>
 8002594:	2b20      	cmp	r3, #32
 8002596:	d060      	beq.n	800265a <HAL_TIM_ConfigClockSource+0x15a>
 8002598:	2b20      	cmp	r3, #32
 800259a:	d867      	bhi.n	800266c <HAL_TIM_ConfigClockSource+0x16c>
 800259c:	2b00      	cmp	r3, #0
 800259e:	d05c      	beq.n	800265a <HAL_TIM_ConfigClockSource+0x15a>
 80025a0:	2b10      	cmp	r3, #16
 80025a2:	d05a      	beq.n	800265a <HAL_TIM_ConfigClockSource+0x15a>
 80025a4:	e062      	b.n	800266c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6818      	ldr	r0, [r3, #0]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	6899      	ldr	r1, [r3, #8]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	f000 f95e 	bl	8002876 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	609a      	str	r2, [r3, #8]
      break;
 80025d2:	e04f      	b.n	8002674 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6818      	ldr	r0, [r3, #0]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	6899      	ldr	r1, [r3, #8]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	f000 f947 	bl	8002876 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689a      	ldr	r2, [r3, #8]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025f6:	609a      	str	r2, [r3, #8]
      break;
 80025f8:	e03c      	b.n	8002674 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6818      	ldr	r0, [r3, #0]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	6859      	ldr	r1, [r3, #4]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	461a      	mov	r2, r3
 8002608:	f000 f8be 	bl	8002788 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2150      	movs	r1, #80	; 0x50
 8002612:	4618      	mov	r0, r3
 8002614:	f000 f915 	bl	8002842 <TIM_ITRx_SetConfig>
      break;
 8002618:	e02c      	b.n	8002674 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6818      	ldr	r0, [r3, #0]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	6859      	ldr	r1, [r3, #4]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	461a      	mov	r2, r3
 8002628:	f000 f8dc 	bl	80027e4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2160      	movs	r1, #96	; 0x60
 8002632:	4618      	mov	r0, r3
 8002634:	f000 f905 	bl	8002842 <TIM_ITRx_SetConfig>
      break;
 8002638:	e01c      	b.n	8002674 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6818      	ldr	r0, [r3, #0]
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	6859      	ldr	r1, [r3, #4]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	461a      	mov	r2, r3
 8002648:	f000 f89e 	bl	8002788 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2140      	movs	r1, #64	; 0x40
 8002652:	4618      	mov	r0, r3
 8002654:	f000 f8f5 	bl	8002842 <TIM_ITRx_SetConfig>
      break;
 8002658:	e00c      	b.n	8002674 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4619      	mov	r1, r3
 8002664:	4610      	mov	r0, r2
 8002666:	f000 f8ec 	bl	8002842 <TIM_ITRx_SetConfig>
      break;
 800266a:	e003      	b.n	8002674 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	73fb      	strb	r3, [r7, #15]
      break;
 8002670:	e000      	b.n	8002674 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002672:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002684:	7bfb      	ldrb	r3, [r7, #15]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr

080026a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bc80      	pop	{r7}
 80026b0:	4770      	bx	lr

080026b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr

080026c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr
	...

080026d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a25      	ldr	r2, [pc, #148]	; (8002780 <TIM_Base_SetConfig+0xa8>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d007      	beq.n	8002700 <TIM_Base_SetConfig+0x28>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026f6:	d003      	beq.n	8002700 <TIM_Base_SetConfig+0x28>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a22      	ldr	r2, [pc, #136]	; (8002784 <TIM_Base_SetConfig+0xac>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d108      	bne.n	8002712 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002706:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	4313      	orrs	r3, r2
 8002710:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a1a      	ldr	r2, [pc, #104]	; (8002780 <TIM_Base_SetConfig+0xa8>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d007      	beq.n	800272a <TIM_Base_SetConfig+0x52>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002720:	d003      	beq.n	800272a <TIM_Base_SetConfig+0x52>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a17      	ldr	r2, [pc, #92]	; (8002784 <TIM_Base_SetConfig+0xac>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d108      	bne.n	800273c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002730:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	4313      	orrs	r3, r2
 800273a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	4313      	orrs	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a07      	ldr	r2, [pc, #28]	; (8002780 <TIM_Base_SetConfig+0xa8>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d103      	bne.n	8002770 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	691a      	ldr	r2, [r3, #16]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	615a      	str	r2, [r3, #20]
}
 8002776:	bf00      	nop
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr
 8002780:	40012c00 	.word	0x40012c00
 8002784:	40000400 	.word	0x40000400

08002788 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002788:	b480      	push	{r7}
 800278a:	b087      	sub	sp, #28
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	f023 0201 	bic.w	r2, r3, #1
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	f023 030a 	bic.w	r3, r3, #10
 80027c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	621a      	str	r2, [r3, #32]
}
 80027da:	bf00      	nop
 80027dc:	371c      	adds	r7, #28
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr

080027e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b087      	sub	sp, #28
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	f023 0210 	bic.w	r2, r3, #16
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800280e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	031b      	lsls	r3, r3, #12
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	4313      	orrs	r3, r2
 8002818:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002820:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	011b      	lsls	r3, r3, #4
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	4313      	orrs	r3, r2
 800282a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	621a      	str	r2, [r3, #32]
}
 8002838:	bf00      	nop
 800283a:	371c      	adds	r7, #28
 800283c:	46bd      	mov	sp, r7
 800283e:	bc80      	pop	{r7}
 8002840:	4770      	bx	lr

08002842 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002842:	b480      	push	{r7}
 8002844:	b085      	sub	sp, #20
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
 800284a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002858:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4313      	orrs	r3, r2
 8002860:	f043 0307 	orr.w	r3, r3, #7
 8002864:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	609a      	str	r2, [r3, #8]
}
 800286c:	bf00      	nop
 800286e:	3714      	adds	r7, #20
 8002870:	46bd      	mov	sp, r7
 8002872:	bc80      	pop	{r7}
 8002874:	4770      	bx	lr

08002876 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002876:	b480      	push	{r7}
 8002878:	b087      	sub	sp, #28
 800287a:	af00      	add	r7, sp, #0
 800287c:	60f8      	str	r0, [r7, #12]
 800287e:	60b9      	str	r1, [r7, #8]
 8002880:	607a      	str	r2, [r7, #4]
 8002882:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002890:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	021a      	lsls	r2, r3, #8
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	431a      	orrs	r2, r3
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	4313      	orrs	r3, r2
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	609a      	str	r2, [r3, #8]
}
 80028aa:	bf00      	nop
 80028ac:	371c      	adds	r7, #28
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr

080028b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d101      	bne.n	80028cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028c8:	2302      	movs	r3, #2
 80028ca:	e041      	b.n	8002950 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2202      	movs	r2, #2
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a14      	ldr	r2, [pc, #80]	; (800295c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d009      	beq.n	8002924 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002918:	d004      	beq.n	8002924 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a10      	ldr	r2, [pc, #64]	; (8002960 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d10c      	bne.n	800293e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800292a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	4313      	orrs	r3, r2
 8002934:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68ba      	ldr	r2, [r7, #8]
 800293c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	bc80      	pop	{r7}
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	40012c00 	.word	0x40012c00
 8002960:	40000400 	.word	0x40000400

08002964 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr

08002976 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr

08002988 <__libc_init_array>:
 8002988:	b570      	push	{r4, r5, r6, lr}
 800298a:	2600      	movs	r6, #0
 800298c:	4d0c      	ldr	r5, [pc, #48]	; (80029c0 <__libc_init_array+0x38>)
 800298e:	4c0d      	ldr	r4, [pc, #52]	; (80029c4 <__libc_init_array+0x3c>)
 8002990:	1b64      	subs	r4, r4, r5
 8002992:	10a4      	asrs	r4, r4, #2
 8002994:	42a6      	cmp	r6, r4
 8002996:	d109      	bne.n	80029ac <__libc_init_array+0x24>
 8002998:	f000 f822 	bl	80029e0 <_init>
 800299c:	2600      	movs	r6, #0
 800299e:	4d0a      	ldr	r5, [pc, #40]	; (80029c8 <__libc_init_array+0x40>)
 80029a0:	4c0a      	ldr	r4, [pc, #40]	; (80029cc <__libc_init_array+0x44>)
 80029a2:	1b64      	subs	r4, r4, r5
 80029a4:	10a4      	asrs	r4, r4, #2
 80029a6:	42a6      	cmp	r6, r4
 80029a8:	d105      	bne.n	80029b6 <__libc_init_array+0x2e>
 80029aa:	bd70      	pop	{r4, r5, r6, pc}
 80029ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80029b0:	4798      	blx	r3
 80029b2:	3601      	adds	r6, #1
 80029b4:	e7ee      	b.n	8002994 <__libc_init_array+0xc>
 80029b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80029ba:	4798      	blx	r3
 80029bc:	3601      	adds	r6, #1
 80029be:	e7f2      	b.n	80029a6 <__libc_init_array+0x1e>
 80029c0:	08002a1c 	.word	0x08002a1c
 80029c4:	08002a1c 	.word	0x08002a1c
 80029c8:	08002a1c 	.word	0x08002a1c
 80029cc:	08002a20 	.word	0x08002a20

080029d0 <memset>:
 80029d0:	4603      	mov	r3, r0
 80029d2:	4402      	add	r2, r0
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d100      	bne.n	80029da <memset+0xa>
 80029d8:	4770      	bx	lr
 80029da:	f803 1b01 	strb.w	r1, [r3], #1
 80029de:	e7f9      	b.n	80029d4 <memset+0x4>

080029e0 <_init>:
 80029e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029e2:	bf00      	nop
 80029e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029e6:	bc08      	pop	{r3}
 80029e8:	469e      	mov	lr, r3
 80029ea:	4770      	bx	lr

080029ec <_fini>:
 80029ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ee:	bf00      	nop
 80029f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029f2:	bc08      	pop	{r3}
 80029f4:	469e      	mov	lr, r3
 80029f6:	4770      	bx	lr
